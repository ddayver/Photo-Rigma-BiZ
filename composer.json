{
    "name": "ddayver/photo-rigma-biz",
    "description": "Open source photo gallery with multi-DBMS support",
    "license": "MIT",
    "type": "project",
    "authors": [
        {
            "name": "Dark Dayver",
            "email": "admin@rigma.biz"
        }
    ],
    "require": {
        "php": "^8.4",
        "ext-ctype": "*",
        "ext-exif": "*",
        "ext-fileinfo": "*",
        "ext-filter": "*",
        "ext-gd": "*",
        "ext-hash": "*",
        "ext-json": "*",
        "ext-mbstring": "*",
        "ext-pdo": "*",
        "ext-pdo_mysql": "*",
        "ext-session": "*",
        "ext-zip": "*",
        "vlucas/phpdotenv": "^5.6"
    },
    "require-dev": {
        "roave/security-advisories": "dev-latest",
        "friendsofphp/php-cs-fixer": "^3.75",
        "phpunit/phpunit": "^9.6"
    },
    "suggest": {
        "ext-gmagick": "Alternative to Imagick for image processing",
        "ext-imagick": "For advanced image processing (alternative to GD)",
        "ext-intl": "For advanced string handling and transliteration",
        "ext-memcached": "For Memcached cache support",
        "ext-pdo_pgsql": "For PostgreSQL database support",
        "ext-pdo_sqlite": "For SQLite database support",
        "ext-redis": "For Redis cache support",
        "symfony/var-dumper": "*"
    },
    "minimum-stability": "dev",
    "prefer-stable": true,
    "autoload": {
        "psr-4": {
            "PhotoRigma\\Classes\\": "src/Classes/",
            "PhotoRigma\\Interfaces\\": "src/Interfaces/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "PhotoRigma\\Tests\\": "tests/"
        }
    },
    "config": {
        "platform-check": true,
        "sort-packages": true
    },
    "scripts": {
        "post-install-cmd": [
            "echo \"[1/5] Инициализация...\"",
            "test -f .env || cp .env.example .env",
            "php -r \"\\$file='.env'; \\$content=file_get_contents(\\$file); if(preg_match('/^APP_KEY=\\s*$/m', \\$content)) { \\$content=preg_replace('/^APP_KEY=.*$/m', 'APP_KEY=base64:'.base64_encode(random_bytes(32)), \\$content); file_put_contents(\\$file, \\$content); echo '[2/5] APP_KEY установлен'.PHP_EOL; }\"",
            "php -r \"\\$file='.env'; \\$content=file_get_contents(\\$file); if(preg_match('/^APP_SALT=\\s*$|^APP_SALT=change_this_to_random_string$/m', \\$content)) { \\$content=preg_replace('/^APP_SALT=.*$/m', 'APP_SALT='.bin2hex(random_bytes(16)), \\$content); file_put_contents(\\$file, \\$content); echo '[3/5] APP_SALT установлен'.PHP_EOL; }\"",
            "php -r \"if(!file_exists('.env')) { echo '[4/5] Внимание: .env не создан!'; exit(1); }\"",
            "echo \"[5/5] Готово! Запускайте index.php из public/\""
        ],
        "post-update-cmd": [
            "php -r \"\\$isGit=is_dir('.git'); if(\\$isGit){ \\$changes=shell_exec('git diff --name-only HEAD@{1} HEAD 2>/dev/null'); \\$vendorOnly=\\$changes&&!preg_match('/^(?!vendor\\\\/).+/m',\\$changes); echo \\$vendorOnly?'=== Packages updated ===':'=== Code updated ==='; } else { \\$vendorTime=filemtime('vendor/composer'); \\$codeTime=max(array_map('filemtime',array_merge(glob('src/*'),glob('sql/*/*')))); echo \\$vendorTime>\\$codeTime?'=== Packages updated ===':'=== Code updated ==='; }\"",
            "php -r \"foreach(['mysql','pgsql','sqlite'] as \\$type){ if(file_exists('sql/'.\\$type.'/update/')&&count(glob('sql/'.\\$type.'/update/*.sql'))){echo 'DB migrations ('.\\$type.'): sql/'.\\$type.'/update/'.PHP_EOL;}}\""
        ],
        "post-package-update": [
            "php -r \"if(isset(\\$argv[1])){echo 'Package updated: '.\\$argv[1].PHP_EOL.'Actions:'.PHP_EOL.'1. Check changelog'.PHP_EOL.'2. Test functionality'.PHP_EOL;}\""
        ],
        "check-updates": [
            "@post-update-cmd",
            "php -r \"\\$found=false; foreach(['mysql','pgsql','sqlite'] as \\$type){ if(file_exists('sql/'.\\$type.'/update/')&&count(glob('sql/'.\\$type.'/update/*.sql'))){\\$found=true;}} if(\\$found){echo 'WARNING: Pending DB migrations!'.PHP_EOL;}\""
        ],
        "cs-check": "php-cs-fixer fix --dry-run --diff",
        "cs-fix": "php-cs-fixer fix"
    },
    "scripts-descriptions": {
        "cs-check": "Check code style",
        "cs-fix": "Fix code style issues"
    }
}
