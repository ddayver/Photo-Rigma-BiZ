<?php

/**
 * @file      include/Template_Interface.php
 * @brief     Интерфейс для работы с HTML-шаблонами, включая рендеринг и подстановку данных.
 *
 * @author    Dark Dayver
 * @version   0.4.4
 * @date      2025-05-07
 * @namespace PhotoRigma\\Interfaces
 *
 * @details   Этот файл содержит интерфейс `Template_Interface`, который определяет методы для работы с
 *            HTML-шаблонами:
 *            - Добавление строковых данных, условий и блоков выбора для замены в шаблоне.
 *            - Формирование заголовка и подвала HTML-страницы.
 *            - Поддержка читаемых URL через параметр `$mod_rewrite`.
 *            Все ошибки, возникающие при работе с шаблонами, обрабатываются через исключения.
 *
 * @section   TemplateInterface_Main_Functions Основные функции
 *            - Установка объекта, реализующего интерфейс `Work_Interface`, через сеттер (`set_work`).
 *            - Добавление условий вывода фрагментов шаблона (`add_if`, `add_if_array`).
 *            - Добавление выбора блоков для вывода фрагментов шаблона (`add_case`, `add_case_array`).
 *            - Добавление строковых данных для замены в шаблоне (`add_string`, `add_string_array`).
 *            - Создание и обработка шаблона, включая чтение файла, парсинг и замену плейсхолдеров
 *              (`create_template`).
 *            - Формирование заголовка HTML-страницы с меню, метаданными и блоками контента (`page_header`).
 *            - Формирование подвала HTML-страницы с выводом копирайта, статистики, информации о пользователе и
 *              случайной фотографии (`page_footer`).
 *
 * @note      Этот файл является частью системы PhotoRigma и играет ключевую роль в организации работы приложения.
 *            Реализация интерфейса гарантирует единообразие работы с шаблонами в системе.
 *
 * @copyright Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license   MIT License (https://opensource.org/licenses/MIT)
 *            Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *            сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *            предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *            - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use InvalidArgumentException;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . ' [ERROR] | ' . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . ' | ' . __FILE__ . ' | Попытка прямого вызова файла'
    );
    die('HACK!');
}

/**
 * @interface Template_Interface
 * @brief     Интерфейс для работы с шаблонами.
 *
 * @details   Этот интерфейс определяет контракт для работы с шаблонами, используемыми в приложении. Он предоставляет
 *            методы для добавления данных, условий и строковых переменных в шаблоны, а также для формирования
 *            заголовка и подвала HTML-страниц. Основные возможности:
 *            - Установка объекта, реализующего интерфейс `Work_Interface`, через сеттер (`set_work`).
 *            - Добавление условий вывода фрагментов шаблона (`add_if`, `add_if_array`).
 *            - Добавление выбора блоков для вывода фрагментов шаблона (`add_case`, `add_case_array`).
 *            - Добавление строковых данных для замены в шаблоне (`add_string`, `add_string_array`).
 *            - Создание и обработка шаблона, включая чтение файла, парсинг и замену плейсхолдеров (`create_template`).
 *            - Формирование заголовка HTML-страницы с меню, метаданными и блоками контента (`page_header`).
 *            - Формирование подвала HTML-страницы с выводом копирайта, статистики, информации о пользователе и
 *            случайной фотографии (`page_footer`).
 *
 * @note    Интерфейс предназначен для использования в классах, которые реализуют логику работы с шаблонами.
 *
 * @warning Реализация методов интерфейса должна строго следовать контракту. Некорректная реализация может привести к
 *          ошибкам при формировании шаблонов.
 */
interface Template_Interface
{
    /**
     * @brief   Установка объекта, реализующего интерфейс Work_Interface, через сеттер.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе. Присваивает объект
     *          для дальнейшего использования.
     *
     * @param Work_Interface $work Объект, реализующий интерфейс `Work_Interface`:
     *                             - Должен быть экземпляром класса, реализующего интерфейс `Work_Interface`.
     *
     * @return void Метод ничего не возвращает.
     *
     * @note    Метод проверяет тип переданного объекта.
     *          Объект используется для взаимодействия с другими компонентами системы.
     *
     * @warning Некорректный объект (не реализует интерфейс `Work_Interface`) вызывает исключение.
     *
     * Пример использования:
     * @code
     * // Создание объекта Template и установка объекта Work
     * $template = new Template();
     * $work = new Work(); // Класс, реализующий Work_Interface
     * $template->set_work($work);
     * @endcode
     * @see    PhotoRigma::Interfaces::Work_Interface
     *         Интерфейс, которому должен соответствовать объект.
     */
    public function set_work(Work_Interface $work): void;

    /**
     * @brief   Добавляет массив данных об условиях вывода фрагментов шаблона.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что массив данных не пуст. Если массив пуст, выбрасывается исключение.
     *          2. Проверяет формат пути (`$path_array`), если он указан. Путь должен быть строкой или `false`.
     *          3. Для каждого элемента массива проверяет корректность ключа (только латинские буквы, цифры и
     *             подчеркивания) и значения (булево значение).
     *          4. Добавляет каждую пару ключ-значение в шаблон.
     *
     * @param array        $array_data Массив условий:
     *                                 - Ключи: только латинские буквы, цифры и подчеркивания.
     *                                 - Значения: булевы значения (`true` или `false`).
     *                                 Пример: ["SHOW_HEADER" => true, "SHOW_FOOTER" => false].
     *                                 Ограничения: массив не может быть пустым.
     * @param string|false $path_array Путь для рекурсивного размещения условий:
     *                                 - Должен быть строкой (например, "Массив1[0]->Массив1.0[0]") или `false` (по
     *                                   умолчанию).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если массив данных пуст.
     *                                  - Если путь (`$path_array`) имеет некорректный формат (не строка и не `false`).
     *                                  - Если ключ массива некорректен (пустой или содержит недопустимые символы).
     *                                  - Если значение массива не является булевым значением (`true` или `false`).
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что массив данных содержит только допустимые ключи и булевы значения. Некорректные данные
     *          могут привести к выбросу исключения.
     *
     * Пример использования:
     * @code
     * // Добавление условий без указания пути
     * $template->add_if_array([
     *     'SHOW_HEADER' => true,
     *     'SHOW_FOOTER' => false
     * ]);
     *
     * // Добавление условий с указанием пути
     * $template->add_if_array(
     *     [
     *         'SHOW_HEADER' => true,
     *         'SHOW_FOOTER' => false
     *     ],
     *     'Массив1[0]->Массив1.0[0]'
     * );
     * @endcode
     */
    public function add_if_array(array $array_data, string|false $path_array = false): void;

    /**
     * @brief   Добавляет условие вывода фрагментов шаблона.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность имени условия (только латинские буквы, цифры и подчеркивания). Если имя
     *             некорректно, выбрасывается исключение.
     *          2. Проверяет формат пути (`$path_array`), если он указан. Путь должен быть строкой или `false`.
     *          3. Добавляет условие в массив или объект в зависимости от указанного пути.
     *
     * @param string       $name       Название условия:
     *                                 - Должно содержать только латинские буквы, цифры и подчеркивания.
     *                                 - Не может быть пустым.
     *                                 Пример: "SHOW_HEADER".
     * @param bool         $value      Значение условия:
     *                                 - Должно быть булевым значением (`true` или `false`).
     *                                 Пример: true.
     * @param string|false $path_array Путь для рекурсивного размещения условия:
     *                                 - Должен быть строкой (например, "Массив1[0]->Массив1.0[0]") или `false` (по
     *                                   умолчанию).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если имя условия некорректно (пустое или содержит недопустимые символы).
     *                                  - Если путь (`$path_array`) имеет некорректный формат (не строка и не `false`).
     * @throws RuntimeException         Выбрасывается при ошибках обработки пути.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что имя условия содержит только допустимые символы. Некорректные данные могут привести к
     *          выбросу исключения.
     *
     * Пример использования:
     * @code
     * // Добавление условия без указания пути
     * $template->add_if('SHOW_HEADER', true);
     *
     * // Добавление условия с указанием пути
     * $template->add_if(
     *     'SHOW_FOOTER',
     *     false,
     *     'Массив1[0]->Массив1.0[0]'
     * );
     * @endcode
     */
    public function add_if(string $name, bool $value, string|false $path_array = false): void;

    /**
     * @brief   Добавляет массив данных о выборе блока для вывода фрагментов шаблона.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что массив данных не пуст. Если массив пуст, выбрасывается исключение.
     *          2. Проверяет формат пути (`$path_array`), если он указан. Путь должен быть строкой или `false`.
     *          3. Для каждого элемента массива проверяет корректность ключа и значения (только латинские буквы, цифры
     *             и подчеркивания). Если ключ или значение некорректны, выбрасывается исключение.
     *          4. Добавляет каждую пару ключ-значение в шаблон.
     *
     * @param array        $array_data Массив данных о выборе блока для вывода фрагментов шаблона:
     *                                 - Ключи и значения должны содержать только латинские буквы, цифры и
     *                                   подчеркивания.
     *                                 - Пример: ["BLOCK_TYPE" => "HEADER", "BLOCK_STYLE" => "COMPACT"].
     *                                 - Ограничения: массив не может быть пустым.
     * @param string|false $path_array Путь для рекурсивного размещения условия:
     *                                 - Должен быть строкой (например, "Массив1[0]->Массив1.0[0]") или `false` (по
     *                                   умолчанию).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если массив данных пуст.
     *                                  - Если путь (`$path_array`) имеет некорректный формат (не строка и не `false`).
     *                                  - Если ключ массива некорректен (пустой или содержит недопустимые символы).
     *                                  - Если значение массива некорректно (пустое или содержит недопустимые символы).
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что массив данных содержит только допустимые ключи и значения. Некорректные данные могут
     *          привести к выбросу исключения.
     *
     * Пример использования:
     * @code
     * // Добавление данных без указания пути
     * $template->add_case_array([
     *     'BLOCK_TYPE' => 'HEADER',
     *     'BLOCK_STYLE' => 'COMPACT'
     * ]);
     *
     * // Добавление данных с указанием пути
     * $template->add_case_array(
     *     [
     *         'BLOCK_TYPE' => 'HEADER',
     *         'BLOCK_STYLE' => 'COMPACT'
     *     ],
     *     'Массив1[0]->Массив1.0[0]'
     * );
     * @endcode
     */
    public function add_case_array(array $array_data, string|bool $path_array = false): void;

    /**
     * @brief   Добавляет данные о выборе блока для вывода фрагментов шаблона.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность имени условия (только латинские буквы, цифры и подчеркивания). Если имя
     *             некорректно, выбрасывается исключение.
     *          2. Проверяет корректность значения условия (только латинские буквы, цифры и подчеркивания). Если
     *             значение некорректно, выбрасывается исключение.
     *          3. Проверяет формат пути (`$path_array`), если он указан. Путь должен быть строкой или `false`.
     *          4. Добавляет условие в массив или объект в зависимости от указанного пути.
     *
     * @param string       $name       Название условия:
     *                                 - Должно содержать только латинские буквы, цифры и подчеркивания.
     *                                 - Не может быть пустым.
     *                                 Пример: "BLOCK_TYPE".
     * @param string       $value      Значение условия:
     *                                 - Должно содержать только латинские буквы, цифры и подчеркивания.
     *                                 - Не может быть пустым.
     *                                 Пример: "HEADER".
     * @param string|false $path_array Путь для рекурсивного размещения условия:
     *                                 - Должен быть строкой (например, "Массив1[0]->Массив1.0[0]") или `false` (по
     *                                   умолчанию).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если имя условия некорректно (пустое или содержит недопустимые символы).
     *                                  - Если значение условия некорректно (пустое или содержит недопустимые символы).
     *                                  - Если путь (`$path_array`) имеет некорректный формат (не строка и не `false`).
     * @throws RuntimeException Выбрасывается при ошибках обработки пути.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что имя и значение условия содержат только допустимые символы. Некорректные данные могут
     *          привести к выбросу исключения.
     *
     * Пример использования:
     * @code
     * // Добавление условия без указания пути
     * $template->add_case('BLOCK_TYPE', 'HEADER');
     *
     * // Добавление условия с указанием пути
     * $template->add_case(
     *     'BLOCK_TYPE',
     *     'FOOTER',
     *     'Массив1[0]->Массив1.0[0]'
     * );
     * @endcode
     */
    public function add_case(string $name, string $value, string|false $path_array = false): void;

    /**
     * @brief   Добавляет массив строковых данных для замены в шаблоне.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что массив данных не пуст. Если массив пуст, выбрасывается исключение.
     *          2. Проверяет формат пути (`$path_array`), если он указан. Путь должен быть строкой или `false`.
     *          3. Для каждого элемента массива проверяет корректность ключа (только латинские буквы, цифры и
     *             подчеркивания) и значения (строка). Если ключ или значение некорректны, выбрасывается исключение.
     *          4. Добавляет каждую пару ключ-значение в шаблон.
     *
     * @param array        $array_data Массив данных:
     *                                 - Ключи: только латинские буквы, цифры и подчеркивания.
     *                                 - Значения: строки.
     *                                 Пример: ["TITLE" => "Welcome to the Site", "HEADER_TITLE" => "Main Page"].
     *                                 Ограничения: массив не может быть пустым.
     * @param string|false $path_array Путь для рекурсивного размещения переменных:
     *                                 - Должен быть строкой (например, "Массив1[0]->Массив1.0[0]") или `false` (по
     *                                   умолчанию).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если массив данных пуст.
     *                                  - Если путь (`$path_array`) имеет некорректный формат (не строка и не `false`).
     *                                  - Если ключ массива некорректен (пустой или содержит недопустимые символы).
     *                                  - Если значение массива не является строкой.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что массив данных содержит только допустимые ключи и строковые значения. Некорректные данные
     *          могут привести к выбросу исключения.
     *
     * Пример использования:
     * @code
     * // Добавление данных без указания пути
     * $template->add_string_array([
     *     'TITLE' => 'Welcome to the Site',
     *     'HEADER_TITLE' => 'Main Page'
     * ]);
     *
     * // Добавление данных с указанием пути
     * $template->add_string_array(
     *     [
     *         'TITLE' => 'Welcome to the Site',
     *         'HEADER_TITLE' => 'Main Page'
     *     ],
     *     'Массив1[0]->Массив1.0[0]'
     * );
     * @endcode
     */
    public function add_string_array(array $array_data, string|false $path_array = false): void;

    /**
     * @brief   Добавляет строковую переменную для замены в шаблоне.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность имени переменной (только латинские буквы, цифры и подчеркивания). Если имя
     *             некорректно, выбрасывается исключение.
     *          2. Проверяет, что значение является строкой. Если значение некорректно, выбрасывается исключение.
     *          3. Если указан путь (`$path_array`), проверяет его формат (строка или `false`). Если путь указан,
     *             добавляет переменную рекурсивно.
     *          4. Если путь не указан, добавляет переменную в массив или объект.
     *
     * @param string       $name       Название переменной:
     *                                 - Должно содержать только латинские буквы, цифры и подчеркивания.
     *                                 - Не может быть пустым.
     *                                 Пример: "TITLE".
     * @param string       $value      Значение переменной:
     *                                 - Должно быть строкой.
     *                                 Пример: "Welcome to the Site".
     * @param string|false $path_array Путь для рекурсивного размещения переменной:
     *                                 - Должен быть строкой (например, "header.block") или `false` (по умолчанию).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если имя переменной некорректно (пустое или содержит недопустимые символы).
     *                                  - Если значение переменной не является строкой.
     *                                  - Если путь (`$path_array`) имеет некорректный формат (не строка и не `false`).
     * @throws RuntimeException         Выбрасывается при ошибках обработки пути.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что имя переменной и её значение содержат допустимые символы. Некорректные данные могут
     *          привести к выбросу исключения.
     *
     * Пример использования:
     * @code
     * // Добавление переменной без указания пути
     * $template->add_string('TITLE', 'Welcome to the Site');
     *
     * // Добавление переменной с указанием пути
     * $template->add_string(
     *     'HEADER_TITLE',
     *     'Main Page',
     *     'header.block'
     * );
     * @endcode
     */
    public function add_string(string $name, string $value, string|false $path_array = false): void;

    /**
     * @brief   Создает и обрабатывает шаблон, включая чтение файла, парсинг и замену плейсхолдеров.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Читает содержимое файла шаблона.
     *          2. Проверяет, что файл не пустой и содержит данные (кроме пробелов). Если файл пуст или содержит только
     *             пробелы, выбрасывается исключение.
     *          3. Заменяет плейсхолдеры `{SITE_URL}` и `{THEME_URL}` на реальные значения.
     *          4. Выполняет парсинг шаблона.
     *
     * @return void Метод ничего не возвращает, но изменяет содержимое шаблона после обработки.
     *
     * @throws RuntimeException Выбрасывается при ошибках:
     *                          - Если произошла ошибка при чтении файла шаблона.
     *                          - Если файл шаблона пуст или содержит только пробелы.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что файл шаблона существует, доступен для чтения и содержит допустимые данные. Некорректный
     *          путь или содержимое файла могут привести к выбросу исключения.
     *
     * Пример использования:
     * @code
     * // Создание и обработка шаблона
     * $template->create_template();
     * @endcode
     */
    public function create_template(): void;

    /**
     * @brief   Формирует заголовок HTML-страницы с меню, метаданными и блоками контента.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность параметра `$action`. Он должен содержать только латинские буквы, цифры и
     *             подчеркивания. Если параметр некорректен, выбрасывается исключение.
     *          2. Генерирует данные для меню и фотографий.
     *          3. Создает экземпляр шаблона заголовка (`header.html`) и заполняет его строковыми данными, условиями и
     *             выбором блоков.
     *          4. Обрабатывает короткое и длинное меню, а также блоки с последними фотографиями.
     *          5. Устанавливает файл шаблона и создает контент, который добавляется в начало текущего содержимого
     *             страницы.
     *
     * @param string $title      Дополнительное название страницы для тега `<title>`. Может быть пустым.
     *                           Пример: "Главная страница".
     *                           Если пустой, используется значение из конфигурации.
     * @param string $action     Текущее активное действие (пункт меню):
     *                           - Должно содержать только латинские буквы, цифры и подчеркивания.
     *                           - Не может быть пустым или содержать недопустимые символы.
     *                           Пример: "home".
     * @param string $csrf_token CSRF-токен для защиты от межсайтовой подделки запросов.
     *                           Пример: "abc123xyz".
     *
     * @return void Метод ничего не возвращает, но изменяет содержимое HTML-страницы.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если параметр `$action` некорректен (пустой или содержит недопустимые
     *                                    символы).
     * @throws RuntimeException         Выбрасывается при ошибках обработки шаблонов или данных.
     * @throws Exception                Выбрасывается при ошибках генерации данных фотографий.
     *
     * @note    Метод использует шаблон `header.html` для формирования заголовка. Убедитесь, что шаблон существует и
     *          доступен.
     *
     * @warning Входные параметры должны быть корректными. Невалидные данные могут привести к исключениям или ошибкам в
     *          работе метода. Особое внимание уделите параметру `$action`, так как его некорректность может привести к
     *          неправильной генерации шаблона.
     *
     * Пример использования:
     * @code
     * // Формирование заголовка страницы
     * $template->page_header('Главная страница', 'home', 'abc123xyz');
     * @endcode
     */
    public function page_header(string $title, string $action, string $csrf_token): void;

    /**
     * @brief   Формирует подвал HTML-страницы с выводом копирайта, статистики, информации о пользователе и случайной
     *          фотографии.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Генерирует данные для подвала, включая информацию о пользователе, статистику, лучших пользователей и
     *             случайную фотографию.
     *          2. Создает экземпляр шаблона подвала (`footer.html`) и заполняет его строковыми данными, условиями и
     *             выбором блоков.
     *          3. Обрабатывает блоки для правой панели:
     *             - Информация о пользователе (включая CSRF-токен).
     *             - Статистика.
     *             - Лучшие пользователи.
     *             - Случайная фотография.
     *          4. Устанавливает файл шаблона и создает контент, который добавляется в конец текущего содержимого
     *             страницы.
     *
     * @param int    $login_id   Идентификатор пользователя, авторизованного на сайте:
     *                           - Должно быть целым числом >= 0.
     *                           - Значение `0` используется для неавторизованных пользователей.
     *                           Пример: 123.
     * @param string $csrf_token CSRF-токен для защиты от межсайтовой подделки запросов:
     *                           - Должен быть непустой строкой.
     *                           Пример: "abc123xyz".
     *
     * @return void Метод ничего не возвращает, но изменяет содержимое HTML-страницы.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если параметр `$login_id` некорректен (отрицательное число).
     *                                  - Если параметр `$csrf_token` пустой.
     * @throws RuntimeException         Выбрасывается при ошибках обработки шаблонов или данных.
     * @throws Exception                Выбрасывается при ошибках генерации данных случайной фотографии.
     *
     * @note    Метод использует шаблон `footer.html` для формирования подвала. Убедитесь, что шаблон существует и
     *          доступен.
     *
     * @warning Входные параметры должны быть корректными. Невалидные данные могут привести к исключениям или ошибкам в
     *          работе метода. Особое внимание уделите параметру `$csrf_token`, так как его отсутствие или
     *          некорректность могут привести к уязвимостям безопасности.
     *
     * Пример использования:
     * @code
     * // Формирование подвала страницы
     * $template->page_footer(123, 'abc123xyz');
     * @endcode
     */
    public function page_footer(int $login_id, string $csrf_token): void;
}
