<?php

/**
 * Интерфейс для работы с изображениями.
 *
 * Этот файл содержит интерфейс `Work_Image_Interface`, который определяет контракт для классов, реализующих методы
 * для выполнения операций с изображениями:
 * - Вычисление размеров эскизов.
 * - Изменение размеров изображений.
 * - Обработка отсутствующих изображений.
 * - Вывод изображений через HTTP.
 * - Корректировка расширения файла в соответствии с его MIME-типом.
 * - Удаление директории и её содержимого.
 * - Создание директорий для категории и копирование файлов `index.php`.
 *
 * @author    Dark Dayver
 * @version   0.5.0
 * @since     2025-05-29
 * @namespace PhotoRigma\\Interfaces
 * @package   PhotoRigma
 *
 * @section   WorkImageInterface_Main_Functions Основные функции
 *            - Вычисление размеров эскизов.
 *            - Изменение размеров изображений.
 *            - Обработка отсутствующих изображений.
 *            - Вывод изображений через HTTP.
 *            - Корректировка расширения файла в соответствии с его MIME-типом.
 *            - Удаление директории и её содержимого.
 *            - Создание директорий для категории и копирование файлов `index.php`.
 *
 * @note      Этот файл является частью системы PhotoRigma и играет ключевую роль в обработке изображений.
 *            Интерфейс поддерживает работу с библиотеками GraphicsMagick, ImageMagick и GD для изменения размеров
 *            изображений. Реализованы меры безопасности для предотвращения уязвимостей, таких как MIME-sniffing
 *            и кликджекинг.
 *
 * @copyright Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license   MIT License {@link https://opensource.org/licenses/MIT}
 *            Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *            сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *            предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *            - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use InvalidArgumentException;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    /** @noinspection ForgottenDebugOutputInspection */
    error_log(
        date('H:i:s') . ' [ERROR] | ' . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . ' | ' . __FILE__ . ' | Попытка прямого вызова файла'
    );
    die('HACK!');
}

/**
 * Интерфейс для работы с изображениями.
 *
 * Этот интерфейс определяет контракт для классов, реализующих методы для выполнения операций с изображениями:
 * - Вычисление размеров эскизов (`size_image`).
 * - Изменение размеров изображений (`image_resize`).
 * - Обработка отсутствующих изображений (`no_photo`).
 * - Вывод изображений через HTTP (`image_attach`).
 * - Корректировка расширения файла в соответствии с его MIME-типом (`fix_file_extension`).
 * - Удаление директории и её содержимого (`remove_directory`).
 * - Создание директорий для категории и копирование файлов `index.php` (`create_directory`).
 * Методы интерфейса предназначены для использования в различных частях приложения, таких как обработка изображений,
 * управление файловой системой и вывод изображений через HTTP.
 *
 * @note    Используются константы:
 *          - `MAX_IMAGE_WIDTH = 5000`: Максимальная ширина изображения (в пикселях).
 *          - `MAX_IMAGE_HEIGHT = 5000`: Максимальная высота изображения (в пикселях).
 *
 * @warning Некорректная реализация методов может привести к ошибкам при работе с изображениями или файловой
 *          системой, особенно при обработке пользовательского ввода или больших файлов.
 */
interface Work_Image_Interface
{
    /**
     * Вычисляет размеры для вывода эскиза изображения.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование файла.
     * 2. Получает реальные размеры изображения.
     * 3. Вычисляет ширину и высоту эскиза на основе реальных размеров изображения и конфигурационных параметров:
     *    - `temp_photo_w`: Целевая ширина эскиза (в пикселях).
     *    - `temp_photo_h`: Целевая высота эскиза (в пикселях).
     * 4. Если изображение меньше целевого размера, возвращаются оригинальные размеры.
     * 5. В противном случае размеры масштабируются пропорционально.
     *
     * @param string $path_image Путь к файлу изображения:
     *                           - Путь должен быть абсолютным.
     *                           - Файл должен существовать и быть доступным для чтения.
     *
     * @return array Массив с шириной и высотой эскиза:
     *               - Ключ `'width'` (int): Ширина эскиза (целое число ≥ 0).
     *               - Ключ `'height'` (int): Высота эскиза (целое число ≥ 0).
     *               Размеры могут совпадать с оригинальными размерами изображения, если оно меньше целевого размера.
     *
     * @throws RuntimeException Выбрасывается в следующих случаях:
     *                           - Если файл не существует.
     *                           - Если не удалось получить размеры изображения.
     *
     * @warning Метод зависит от корректности данных в конфигурации (`temp_photo_w` и `temp_photo_h`).
     *          Если эти параметры некорректны, результат может быть непредсказуемым.
     */
    public function size_image(string $path_image): array;

    /**
     * Изменяет размер изображения.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность путей к исходному изображению и файлу эскиза.
     * 2. Проверяет существование и доступность исходного изображения для чтения.
     * 3. Проверяет доступность директории для сохранения эскиза для записи.
     * 4. Получает размеры исходного изображения и проверяет их на соответствие максимальным значениям.
     * 5. Рассчитывает размеры эскиза на основе конфигурации (`temp_photo_w`, `temp_photo_h`).
     * 6. Если файл эскиза уже существует и его размеры совпадают с расчётными, метод завершает работу.
     * 7. Определяет MIME-тип исходного изображения.
     * 8. Выбирает библиотеку для обработки изображения в следующем порядке приоритета:
     *    - GraphicsMagick (если доступен),
     *    - ImageMagick (если доступен),
     *    - GD (если предыдущие библиотеки недоступны или вызвали ошибку).
     *
     * @param string $full_path      Путь к исходному изображению:
     *                               - Путь должен быть абсолютным.
     *                               - Файл должен существовать и быть доступным для чтения.
     * @param string $thumbnail_path Путь для сохранения эскиза:
     *                               - Путь должен быть абсолютным.
     *                               - Директория должна быть доступна для записи.
     *
     * @return bool True, если операция выполнена успешно, иначе False.
     *
     * @throws InvalidArgumentException Выбрасывается, если пути к файлам некорректны или имеют недопустимый формат.
     * @throws RuntimeException         Выбрасывается, если возникли ошибки при проверке файлов, директорий или
     *                                  размеров изображения.
     * @throws Exception                Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод использует следующие константы для ограничения размеров исходного изображения:
     *          - `MAX_IMAGE_WIDTH`: Максимальная ширина исходного изображения (в пикселях). Значение: 5000.
     *          - `MAX_IMAGE_HEIGHT`: Максимальная высота исходного изображения (в пикселях). Значение: 5000.
     *
     * @warning Метод зависит от корректности данных в конфигурации (`temp_photo_w`, `temp_photo_h`).
     *          Если эти параметры некорректны, результат может быть непредсказуемым.
     *          Убедитесь, что пути к файлам и директориям корректны перед вызовом метода.
     */
    public function image_resize(string $full_path, string $thumbnail_path): bool;

    /**
     * Возвращает данные для отсутствующего изображения.
     *
     * Этот метод формирует массив данных, который используется для представления информации об отсутствующем
     * изображении. Это может быть полезно, например, если изображение не найдено или недоступно. Метод использует
     * константы приложения для формирования URL-адресов и путей.
     *
     * @return array Массив данных об изображении или его отсутствии:
     *               - 'url'                  (string): URL полноразмерного изображения.
     *               - 'thumbnail_url'        (string): URL эскиза изображения.
     *               - 'name'                 (string): Название изображения. Значение по умолчанию: `'No photo'`.
     *               - 'description'          (string): Описание изображения. Значение по умолчанию: `'No photo
     *                                                  available'`.
     *               - 'category_name'        (string): Название категории. Значение по умолчанию: `'No category'`.
     *               - 'category_description' (string): Описание категории. Значение по умолчанию: `'No category
     *                                                  available'`.
     *               - 'rate'                 (string): Рейтинг изображения. Значение по умолчанию: `'Rate: 0/0'`.
     *               - 'url_user'             (string): URL пользователя. Значение по умолчанию: пустая строка (`''`).
     *               - 'real_name'            (string): Имя пользователя. Значение по умолчанию: `'No user'`.
     *               - 'full_path'            (string): Полный путь к изображению. Формируется на основе конфигурации.
     *               - 'thumbnail_path'       (string): Полный путь к эскизу. Формируется на основе конфигурации.
     *               - 'file'                 (string): Имя файла. Значение по умолчанию: `'no_foto.png'`.
     *
     * @warning Метод зависит от корректности констант. Если эти параметры некорректны, результат может быть
     *          непредсказуемым.
     */
    public function no_photo(): array;

    /**
     * Выводит изображение через HTTP.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование и доступность файла:
     *    - Если файл не существует или недоступен для чтения, отправляется HTTP-статус `404 Not Found`.
     * 2. Определяет MIME-тип файла:
     *    - Если MIME-тип не соответствует изображению, отправляется HTTP-статус `500 Internal Server Error`.
     * 3. Проверяет размер файла:
     *    - Если размер превышает 10 МБ или неизвестен, отправляется HTTP-статус `413 Payload Too Large`.
     * 4. Устанавливает заголовки для вывода изображения:
     *    - `Content-Type`: MIME-тип файла.
     *    - `Content-Disposition`: Имя файла для заголовка.
     *    - `Content-Length`: Размер файла.
     *    - Дополнительные заголовки безопасности.
     * 5. Отправляет содержимое файла через HTTP.
     * 6. Завершает выполнение скрипта после отправки заголовков и содержимого файла.
     *
     * @param string $full_path Полный путь к файлу:
     *                          - Путь должен быть абсолютным.
     *                          - Файл должен существовать и быть доступным для чтения.
     * @param string $name_file Имя файла для заголовка `Content-Disposition`:
     *                          - Имя должно быть корректным (например, без запрещённых символов).
     *
     * @return void Метод ничего не возвращает. Завершает выполнение скрипта после отправки заголовков и содержимого
     *              файла.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод завершает выполнение скрипта (`exit`), отправляя заголовки и содержимое файла.
     *          Дополнительные заголовки безопасности:
     *          - `X-Content-Type-Options: nosniff`
     *          - `X-Frame-Options: DENY`
     *          - `X-XSS-Protection: 1; mode=block`
     *          - `Referrer-Policy: no-referrer`
     *          - `Content-Security-Policy: default-src 'self'; img-src 'self' data:;`
     *
     * @warning Метод завершает выполнение скрипта (`exit`), отправляя заголовки и содержимое файла.
     *          Убедитесь, что файл существует и доступен для чтения перед вызовом метода.
     */
    public function image_attach(string $full_path, string $name_file): void;

    /**
     * Корректировка расширения файла в соответствии с его MIME-типом.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет путь к файлу на корректность.
     * 2. Определяет реальный MIME-тип файла.
     * 3. Проверяет соответствие MIME-типа поддерживаемым форматам:
     *    - 'image/jpeg' -> 'jpg'
     *    - 'image/png' -> 'png'
     *    - 'image/gif' -> 'gif'
     *    - 'image/webp' -> 'webp'
     *    - 'image/tiff' -> 'tiff'
     *    - 'image/svg+xml' -> 'svg'
     *    - 'image/bmp' -> 'bmp'
     *    - 'image/x-icon' -> 'ico'
     *    - 'image/avif' -> 'avif'
     *    - 'image/heic' -> 'heic'
     *    - 'image/vnd.adobe.photoshop' -> 'psd'
     *    - 'image/x-canon-cr2' -> 'cr2'
     *    - 'image/x-nikon-nef' -> 'nef'
     *    - 'image/x-xbitmap' -> 'xbm'
     *    - 'image/x-portable-anymap' -> 'pnm'
     *    - 'image/x-pcx' -> 'pcx'
     * 4. Если расширение отсутствует или некорректное, оно добавляется или исправляется.
     *
     * @param string $full_path Полный путь к файлу:
     *                          - Путь должен быть абсолютным.
     *                          - Файл должен существовать и быть доступным для чтения.
     *
     * @return string Полный путь к файлу с правильным расширением:
     *                - Если расширение было изменено или добавлено, возвращается новый путь.
     *                - Если расширение уже корректное, возвращается исходный путь.
     *
     * @throws InvalidArgumentException Выбрасывается, если путь к файлу имеет недопустимый формат.
     * @throws RuntimeException         Выбрасывается, если:
     *                                  - MIME-тип файла не поддерживается.
     *                                  - Файл недоступен для чтения.
     * @throws Exception                Выбрасывается при возникновении ошибок логирования информации.
     *
     * @warning Метод завершает выполнение с ошибкой, если MIME-тип файла не поддерживается.
     *          Убедитесь, что файл существует и доступен для чтения перед вызовом метода.
     */
    public function fix_file_extension(string $full_path): string;

    /**
     * Удаляет директорию и её содержимое, предварительно проверяя права доступа.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование указанной директории.
     * 2. Проверяет права доступа к директории (должна быть доступна для записи).
     * 3. Рекурсивно удаляет все файлы и поддиректории внутри директории.
     * 4. Удаляет саму директорию.
     *
     * @param string $path Путь к директории:
     *                     - Должен быть строкой, указывающей на существующую директорию.
     *                     - Директория должна быть доступна для записи.
     *
     * @return bool Возвращает `true`, если директория успешно удалена.
     *
     * @throws RuntimeException Выбрасывается в следующих случаях:
     *                           - Если директория не существует.
     *                           - Если директория недоступна для записи.
     *                           - Если не удалось удалить файл или поддиректорию внутри директории.
     *                           - Если не удалось удалить саму директорию.
     *
     * @note    Метод рекурсивно удаляет все файлы и поддиректории внутри директории.
     *
     * @warning Используйте этот метод с осторожностью, так как удаление директории необратимо.
     *          Убедитесь, что переданная директория действительно должна быть удалена.
     */
    public function remove_directory(string $path): bool;

    /**
     * Создаёт директории для категории.
     *
     * Этот метод выполняет следующие действия:
     * 1. Формирует пути для директорий галереи и миниатюр на основе конфигурации.
     * 2. Проверяет права доступа к родительским директориям.
     * 3. Рекурсивно создаёт директории для галереи и миниатюр.
     *
     * @param string $directory_name Имя директории:
     *                               - Должен быть строкой, содержащей только допустимые символы для имён директорий.
     *                               - Не должен содержать запрещённых символов (например, `\/:*?"<>|`).
     *
     * @return bool Возвращает `true`, если директории успешно созданы.
     *
     * @throws RuntimeException Выбрасывается в следующих случаях:
     *                           - Если родительская директория недоступна для записи.
     *                           - Если не удалось создать директории.
     *
     * @warning Используйте этот метод с осторожностью, так как он создаёт директории.
     */
    public function create_directory(string $directory_name): bool;
}
