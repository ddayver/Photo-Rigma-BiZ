<?php

/**
 * Интерфейс точки инициализации ядра проекта.
 *
 * Этот файл содержит описание контракта на выполнение инициализации ядра:
 * - Проверка WORK_DIR
 * - Проверка наличия обязательных файлов
 * - Подключение системных компонентов
 * - Выброс исключений при ошибках инициализации
 *
 * @author    Dark Dayver
 * @version   0.5.0
 * @since     2025-05-15
 * @namespace PhotoRigma\\Interfaces
 * @package   PhotoRigma
 *
 * @note      Прямой вызов файла запрещён — используется только через точку входа index.php
 *            Все реализации должны выбрасывать RuntimeException при ошибках
 *
 * @warning   Нарушение контракта может привести к фатальным последствиям:
 *            - Ошибки инициализации
 *            - Потеря данных
 *            - Нарушение безопасности
 *
 * @copyright Copyright (c) 2008–2025 Dark Dayver. Все права защищены.
 * @license   MIT License {@link https://opensource.org/licenses/MIT}
 *            Разрешается использовать, копировать, изменять, объединять, публиковать,
 *            распространять, сублицензировать и продавать копии программного обеспечения,
 *            а также разрешать лицам, которым предоставляется данное программное обеспечение,
 *            делать это при соблюдении следующих условий:
 *            - Уведомление об авторских правах и условия лицензии должны быть включены во все
 *              копии или значимые части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use JsonException;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    /** @noinspection ForgottenDebugOutputInspection */
    error_log(
        date('H:i:s') . ' [ERROR] | ' . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . ' | ' . __FILE__ . ' | Попытка прямого вызова файла'
    );
    die('HACK!');
}

/**
 * Интерфейс точки инициализации ядра проекта.
 *
 * Этот интерфейс определяет контракт на выполнение:
 * - Проверка WORK_DIR и обязательных файлов
 * - Подключение системных компонентов
 * - Выброс исключений при ошибках
 *
 * @note       Реализация должна быть совместима с PSR-4 и PSR-12
 *             init(), load() должны вызываться один раз — при запуске приложения
 *
 * @warning    Все реализации обязаны выбрасывать RuntimeException при ошибках.
 *             Нарушение контракта может привести к фатальным последствиям.
 */
interface Bootstrap_Interface
{
    /**
     * Выполняет инициализацию ядра проекта.
     *
     * Метод обязывает реализацию:
     * - Проверить наличие WORK_DIR
     * - Проверить существование и доступность системных файлов
     * - Выбросить исключение при ошибках доступности файлов
     *
     * @return array Список доступных файлов для подключения с их полным путем.
     *
     * @throws RuntimeException Если WORK_DIR не определена
     * @throws RuntimeException Если один из файлов отсутствует или недоступен
     *
     * @note    init() должен быть статическим
     *          Не допускается прямое выполнение вне точки входа
     *
     * @warning Нарушение контракта может привести к фатальным последствиям:
     *          - Ошибки инициализации
     *          - Потеря данных
     *          - Нарушение безопасности
     */
    public static function init(): array;

    /**
     * Инициализирует основные компоненты приложения.
     *
     * Метод:
     * - Создаёт объект кеширования.
     * - Подключает базу данных.
     * - Инициализирует класс Work.
     * - Запускает change_user() для определения пользователя и шаблона
     * - Возвращает массив с объектами: [$db, $work, $user, $template]
     *
     * @param array $config   Конфигурационный массив проекта
     * @param array $session  Ссылка на сессию — используется для авторизации
     *
     * @return array Массив с инициализированными объектами: [Database, Work, User, Template]
     *
     * @note Метод вызывается один раз — при запуске приложения.
     *       Все зависимости создаются внутри метода: Cache_Handler, Database, Work.
     *       Для работы требует корректного $config и активной сессии.
     *
     * @warning Не меняйте порядок инициализации — это может привести к ошибкам.
     *          Передавайте $session по ссылке — иначе сессия не будет обновляться.
     *
     * @throws JsonException При ошибке кодирования прав доступа в JSON.
     * @throws Exception     При внутренних ошибках создания объектов.
     */
    public static function load(array $config, array &$session): array;

    /**
     * Инициализирует объекты пользователя и шаблонизатора.
     *
     * Метод:
     * - Создаёт объект User.
     * - Определяет тему оформления из сессии или конфигурации.
     * - Создаёт объект Template с указанием директорий шаблонаю.
     * - Выполняет DI между объектами.
     * - Возвращает массив [$user, $template]
     *
     * @param Database_Interface $db      Объект подключения к базе данных
     * @param Work_Interface     $work    Основной класс приложения
     * @param array              $session Ссылка на сессию — используется для авторизации
     *
     * @return array Массив с объектами: [User, Template]
     *
     * @note Метод вызывается один раз — при инициализации ядра.
     *       Работает только с уже созданными $db и $work.
     *       Тема берётся из сессии пользователя или конфига сайта.
     *
     * @warning Не меняйте порядок DI — это может привести к ошибкам в связях.
     *          Передавайте $session по ссылке — иначе данные не сохранятся.
     *
     * @throws JsonException При ошибке кодирования прав доступа в JSON.
     */
    public static function change_user(Database_Interface $db, Work_Interface $work, array &$session): array;
}
