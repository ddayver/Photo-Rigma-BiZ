<?php

/**
 * Интерфейс для вспомогательных методов.
 *
 * Этот файл содержит интерфейс `Work_Helper_Interface`, который определяет контракт для класса, предоставляющего
 * вспомогательные методы для обработки данных:
 * - Очистка строк от HTML-тегов и специальных символов.
 * - Преобразование размеров в байты.
 * - Транслитерация строк и замена знаков пунктуации.
 * - Преобразование BBCode в HTML.
 * - Разбиение строк на несколько строк ограниченной длины.
 * - Проверка MIME-типов файлов через доступные библиотеки.
 * Все методы интерфейса реализуются как статические.
 *
 * @author    Dark Dayver
 * @version   0.5.0
 * @since     2025-05-29
 * @namespace PhotoRigma\\Interfaces
 * @package   PhotoRigma
 *
 * @section   WorkHelperInterface_Main_Functions Основные функции
 *            - Очистка строк от HTML-тегов и специальных символов.
 *            - Преобразование размеров в байты.
 *            - Транслитерация строк и замена знаков пунктуации.
 *            - Преобразование BBCode в HTML.
 *            - Разбиение строк на несколько строк ограниченной длины.
 *            - Проверка MIME-типов файлов через доступные библиотеки.
 *
 * @note      Этот файл является частью системы PhotoRigma и играет ключевую роль в обработке данных.
 *            Интерфейс поддерживает работу с различными форматами данных, включая строки, числа, изображения и
 *            MIME-типы. Реализованы меры безопасности для предотвращения внедрения вредоносного кода.
 *
 * @copyright Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license   MIT License {@link https://opensource.org/licenses/MIT}
 *            Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *            сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *            предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *            - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    /** @noinspection ForgottenDebugOutputInspection */
    error_log(
        date('H:i:s') . ' [ERROR] | ' . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . ' | ' . __FILE__ . ' | Попытка прямого вызова файла'
    );
    die('HACK!');
}

/**
 * Интерфейс для вспомогательных методов.
 *
 * Этот интерфейс определяет контракт для класса `Work_Helper`, который предоставляет статические методы для
 * выполнения различных вспомогательных задач:
 * - Очистка строк от HTML-тегов и специальных символов (`clean_field`).
 * - Преобразование размеров в байты (`return_bytes`).
 * - Транслитерация строк и замена знаков пунктуации (`encodename`).
 * - Преобразование BBCode в HTML (`ubb`).
 * - Разбиение строк на несколько строк ограниченной длины (`utf8_wordwrap`).
 * - Проверка MIME-типов файлов через доступные библиотеки (`validate_mime_type`).
 * Методы интерфейса предназначены для использования в различных частях приложения, таких как обработка
 * пользовательского ввода, работа с файлами, генерация безопасного вывода и т.д.
 *
 * @note    Методы интерфейса реализуются как статические, что позволяет использовать их без создания экземпляра
 *          класса.
 *
 * @warning Некорректная реализация методов может привести к ошибкам при работе с данными, особенно при обработке
 *          пользовательского ввода или файлов.
 */
interface Work_Helper_Interface
{
    /**
     * Очищает строку от HTML-тегов и специальных символов.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет, что входные данные не являются пустыми (`null` или пустая строка). Если данные пусты, возвращает
     *    пустую строку (`''`).
     * 2. Преобразует входные данные в кодировку UTF-8.
     * 3. Удаляет все HTML-теги из строки.
     * 4. Экранирует специальные символы (например, `<`, `>`, `&`, `"`, `'`) для защиты от XSS-атак.
     * Метод используется для безопасной обработки пользовательского ввода.
     *
     * @param string $field Строка или данные, которые могут быть преобразованы в строку:
     *                      - Если входные данные пусты (`null` или пустая строка), метод вернёт пустую строку (`''`).
     *
     * @return string Очищенная строка или пустая строка (`''`), если входные данные пусты.
     *
     * @warning Метод не обрабатывает вложенные структуры данных (например, массивы).
     *          Убедитесь, что входные данные могут быть преобразованы в строку.
     */
    public static function clean_field(string $field): string;

    /**
     * Преобразует размер в формате "число[K|M|G]" в количество байт.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входных данных.
     * 2. Преобразует размер, заданный в формате "число[K|M|G]", в количество байт:
     *    - K (килобайты): умножается на 1024.
     *    - M (мегабайты): умножается на 1024².
     *    - G (гигабайты): умножается на 1024³.
     * 3. Если суффикс отсутствует или недопустим, значение считается в байтах.
     * 4. Отрицательные числа преобразуются в положительные.
     * 5. Возвращает `0`, если входные данные некорректны.
     *
     * @param string|int $val Размер в формате "число[K|M|G]" или число:
     *                        - Допустимые суффиксы: `K`, `M`, `G`.
     *                        - Если суффикс недопустим, он игнорируется, и значение преобразуется в число.
     *                        - Отрицательные числа преобразуются в положительные.
     *
     * @return int Размер в байтах. Возвращает `0` для некорректных входных данных.
     *
     * @warning Метод чувствителен к формату входных данных. Убедитесь, что они корректны.
     */
    public static function return_bytes(string|int $val): int;

    /**
     * Транслитерирует строку и заменяет знаки пунктуации на "_".
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет, что входная строка не является пустой. Если строка пустая, то она возвращается без обработки.
     * 2. Транслитерирует не латинские символы в латиницу.
     * 3. Заменяет все символы, кроме букв и цифр, на `"_"`:
     *    - Заменяет множественные подчёркивания на одно.
     *    - Удаляет подчёркивания в начале и конце строки.
     * 4. Если после обработки строка становится пустой, генерируется уникальная последовательность длиной 16 символов.
     * Метод используется для создания "безопасных" имен файлов или URL.
     *
     * @param string $string Исходная строка:
     *                       - Если строка пустая, то она возвращается без обработки.
     *                       Рекомендуется использовать строки в кодировке UTF-8.
     *
     * @return string Строка после транслитерации и замены символов:
     *                - Если после обработки строка становится пустой, генерируется уникальная последовательность.
     *
     * @warning Метод не гарантирует сохранение исходного формата строки, так как все специальные символы заменяются на
     *          `"_"`.
     */
    public static function encodename(string $string): string;

    /**
     * Преобразует BBCode в HTML.
     *
     * Этот метод преобразует BBCode-теги в соответствующие HTML-теги. Поддерживаются следующие BBCode-теги:
     * - [b]Жирный текст[/b] -> `<strong>Жирный текст</strong>`
     * - [u]Подчёркнутый текст[/u] -> `<u>Подчёркнутый текст</u>`
     * - [i]Курсив[/i] -> `<em>Курсив</em>`
     * - [url]Ссылка[/url], [url=URL]Текст ссылки[/url] -> `<a href="URL" target="_blank" rel="noopener
     *   noreferrer">Текст ссылки</a>`
     * - [color=COLOR]Цвет текста[/color] -> `<span style="color: COLOR;">Цвет текста</span>`
     * - [size=SIZE]Размер текста[/size] -> `<span style="font-size: SIZE;">Размер текста</span>`
     * - [quote]Цитата[/quote], [quote=AUTHOR]Цитата автора[/quote] -> `<blockquote>Цитата</blockquote>`
     * - [list], [list=1], [list=a] — списки -> `<ul>`, `<ol>` с соответствующими элементами `<li>`
     * - [code]Блок кода[/code] -> `<pre><code>Блок кода</code></pre>`
     * - [spoiler]Спойлер[/spoiler] -> `<details><summary>Спойлер</summary>Содержимое</details>`
     * - [hr] — горизонтальная линия -> `<hr>`
     * - [br] — перенос строки -> `<br>`
     * - [left], [center], [right] — выравнивание текста -> `<div style="text-align: left|center|right;">`
     * - [img]Изображение[/img] -> `<img src="URL" alt="Изображение">`
     * Метод защищает от XSS-атак и ограничивает глубину рекурсии для вложенных тегов.
     *
     * @param string $text Текст с BBCode:
     *                     - Если строка пустая, она возвращается без обработки.
     *                     Рекомендуется использовать строки в кодировке UTF-8.
     *
     * @return string Текст с HTML-разметкой:
     *                - Некорректные BBCode-теги игнорируются или преобразуются в текст.
     *
     * @throws Exception Выбрасывается, если произошла ошибка при обработке BBCode.
     *
     * @warning Метод ограничивает глубину рекурсии для вложенных тегов (максимум 10 уровней).
     *          Некорректные URL или изображения заменяются на безопасные значения или удаляются.
     */
    public static function ubb(string $text): string;

    /**
     * Разбивает строку на несколько строк ограниченной длины.
     *
     * Этот метод разбивает строку на несколько строк, каждая из которых имеет длину не более указанной.
     * Разрыв строки выполняется только по пробелам, чтобы сохранить читаемость текста. Поддерживается работа с UTF-8
     * символами. Если параметры некорректны (например, `$width <= 0` или `$break` пустой), возвращается исходная
     * строка.
     *
     * @param string $str   Исходная строка:
     *                      - Рекомендуется использовать строки в кодировке UTF-8.
     *                      - Если строка пустая или её длина меньше или равна `$width`, она возвращается без
     *                        изменений.
     * @param int    $width Максимальная длина строки (по умолчанию 70):
     *                      - Должен быть положительным целым числом.
     * @param string $break Символ разрыва строки (по умолчанию PHP_EOL):
     *                      - Не должен быть пустой строкой.
     *
     * @return string Строка, разбитая на несколько строк:
     *                - В случае некорректных параметров возвращается исходная строка.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @warning Метод корректно работает только с UTF-8 символами.
     *          Если параметры некорректны (например, `$width <= 0` или `$break` пустой), возвращается исходная строка.
     */
    public static function utf8_wordwrap(string $str, int $width = 70, string $break = PHP_EOL): string;

    /**
     * Проверяет, поддерживается ли указанный MIME-тип изображения.
     *
     * Этот метод проверяет, поддерживается ли указанный MIME-тип хотя бы одной из доступных библиотек:
     * - Imagick: Поддерживает широкий спектр форматов, включая JPEG, PNG, GIF, WebP, TIFF, SVG, BMP, ICO, AVIF,
     *            HEIC, PSD, CR2, NEF и другие.
     * - Gmagick: Поддерживает основные форматы, такие как JPEG, PNG, GIF, WebP, TIFF, SVG, BMP, ICO, AVIF, HEIC.
     * - Встроенные функции PHP (GD): Поддерживаются только базовые форматы, такие как JPEG, PNG, GIF, WebP.
     * Если MIME-тип не поддерживается ни одной библиотекой, возвращается `false`.
     *
     * @param string $real_mime_type Реальный MIME-тип файла:
     *                               - Должен быть корректным MIME-типом для изображений.
     *
     * @return bool True, если MIME-тип поддерживается хотя бы одной библиотекой, иначе false.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @warning Метод зависит от доступности библиотек (Imagick, Gmagick) и встроенных функций PHP по работе с
     *          изображениями (GD). Если ни одна из библиотек недоступна, метод может некорректно работать.
     */
    public static function validate_mime_type(string $real_mime_type): bool;
}
