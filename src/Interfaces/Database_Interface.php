<?php

/**
 * @file      include/Database_Interface.php
 * @brief     Интерфейс для работы с базами данных через PDO.
 *
 * @author    Dark Dayver
 * @version   0.4.4
 * @date      2025-05-07
 * @namespace PhotoRigma\\Interfaces
 *
 * @details   Этот файл содержит определение интерфейса `Database_Interface`, который устанавливает контракт
 *            для классов, предназначенных для работы с реляционными базами данных (MySQL/MariaDB, PostgreSQL, SQLite)
 *            через PDO. Интерфейс гарантирует единообразие и предсказуемость поведения реализаций и включает методы для:
 *            - Выполнения стандартных операций с данными (SELECT, JOIN, INSERT, UPDATE, DELETE, TRUNCATE)
 *              с поддержкой подготовленных выражений и **гибких опций запроса, включая сложные условия WHERE (OR, NOT)**.
 *            - **Реализации полнотекстового поиска (Full-Text Search - FTS)**, специфичного для каждой поддерживаемой
 *              СУБД.
 *            - Обработки результатов запросов, включая получение данных и метаданных.
 *            - Управления соединением с базой данных и транзакциями.
 *            - Механизмов временного изменения формата SQL для межСУБД совместимости запросов.
 *            - Интеграции с обработчиком кеша (`Cache_Handler_Interface`) для оптимизации.
 *            - Обработки ошибок через исключения.
 *
 * @section   DatabaseInterface_Main_Functions Основные функции
 *            - Выполнение стандартных операций SELECT, INSERT, UPDATE, DELETE, TRUNCATE, JOIN.
 *            - Поддержка гибких условий WHERE (OR, NOT) в методах работы с данными.
 *            - Реализация полнотекстового поиска (FTS).
 *            - Получение метаданных запросов (количество затронутых строк, ID последней вставленной строки).
 *            - Форматирование даты для SQL-запросов.
 *            - Управление транзакциями (начало, подтверждение, откат).
 *
 * @see       PhotoRigma::Interfaces::Cache_Handler_Interface
 *            Интерфейс обработчика кеша, используемый реализациями Database_Interface.
 *
 * @note      Этот файл является частью системы PhotoRigma и обеспечивает взаимодействие приложения с базами данных.
 *            Реализация интерфейса гарантирует унифицированный подход к работе с различными СУБД.
 *
 * @copyright Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license   MIT License (https://opensource.org/licenses/MIT)
 *            Разрешается использовать, копировать, изменять, объединять, публиковать,
 *            распространять, сублицензировать и/или продавать копии программного обеспечения,
 *            а также разрешать лицам, которым предоставляется данное программное обеспечение,
 *            делать это при соблюдении следующих условий:
 *            - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use InvalidArgumentException;
use JsonException;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . ' [ERROR] | ' . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . ' | ' . __FILE__ . ' | Попытка прямого вызова файла'
    );
    die('HACK!');
}

/**
 * @interface Database_Interface
 * @brief     Интерфейс для работы с базами данных через PDO.
 *
 * @details   Этот интерфейс определяет контракт для классов, предоставляющих функционал для работы
 *            с реляционными базами данных через PDO, поддерживая следующие СУБД: MySQL (включая MariaDB),
 *            PostgreSQL и SQLite. Интерфейс гарантирует наличие методов для выполнения основных операций
 *            с базой данных и предоставления служебной информации:
 *            - Выполнение стандартных операций с данными (`SELECT`, `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, `JOIN`)
 *              с поддержкой подготовленных выражений и гибких опций запроса. Ожидается, что методы, принимающие
 *              массив опций, будут поддерживать построение сложных условий `WHERE` с использованием операторов `OR` и `NOT`.
 *            - Реализация **полнотекстового поиска (Full-Text Search - FTS)**. Интерфейс предусматривает
 *              наличие методов для выполнения FTS, которые должны быть реализованы с учетом специфики поддерживаемых
 *              СУБД и, как правило, включать механизмы fallback (например, на `LIKE`/`ILIKE`).
 *            - Получение метаданных выполненных запросов (например, количество строк, затронутых операциями изменения данных,
 *              или ID последней вставленной записи).
 *            - Форматирование дат и времени для использования в SQL-запросах с учетом синтаксиса целевой СУБД.
 *            - Управление транзакциями базы данных (начало, фиксация, откат).
 *            - Механизм временного изменения формата SQL для совместимости запросов между разными СУБД
 *              (например, возможность передать запрос в синтаксисе одной СУБД, который будет выполнен на другой).
 *            - Интеграция с обработчиком кеша (`Cache_Handler_Interface`) для долгосрочного хранения
 *              оптимизационных данных класса-реализации.
 *
 *            Все методы интерфейса должны использовать подготовленные выражения для обеспечения защиты
 *            от SQL-инъекций и выбрасывать соответствующие исключения при возникновении ошибок.
 *            Интерфейс может быть реализован различными классами, включая стандартный класс `Database` или
 *            пользовательские реализации, следующие данному контракту.
 *
 * @since     0.4.0
 *
 * @note    Интерфейс поддерживает только MySQL/MariaDB, PostgreSQL и SQLite.
 *
 * @warning Реализация методов интерфейса, в частности, связанных с полнотекстовым поиском и обработкой опций, может
 *          отличаться от предыдущих версий. Убедитесь, что вы изучили новую документацию перед использованием.
 *
 * @see    PhotoRigma::Interfaces::Cache_Handler_Interface
 *         Интерфейс обработчика кеша, используемый реализациями Database_Interface.
 */
interface Database_Interface
{
    /**
     * @brief   Выполняет SQL-запрос на выборку данных из таблицы.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность выполнения SQL-запроса на выборку данных, включая:
     *          1. Приём параметров для определения выбираемых полей, основной таблицы и дополнительных опций запроса
     *             (`where`, `group`, `order`, `limit`, `params`).
     *          2. Формирование и выполнение SQL-запроса на выборку на основе предоставленных данных и опций.
     *          3. Использование подготовленных выражений для обеспечения безопасности при работе с данными.
     *          4. Возврат результата выполнения запроса.
     *          Реализующие классы должны обеспечить корректную обработку всех входных параметров и
     *          возвращаемого значения согласно описанию.
     *
     * @param string|array $select   Список полей для выборки. Может быть строкой (имя одного поля) или массивом
     *                               (список полей). Если передан массив, он преобразуется в строку с разделителем `,`.
     * @param string       $from_tbl Имя таблицы, из которой выбираются данные.
     *                               Должно быть строкой, содержащей только допустимые имена таблиц без специальных
     *                               символов.
     * @param array        $options  Массив дополнительных опций для формирования запроса. Поддерживаемые ключи:
     *                               - where (string|array|false): Условие WHERE.
     *                                 * string - используется как есть.
     *                                 * array - преобразуется в SQL. Поддерживает простые условия
     *                                   (`['поле' => значение]`) и логические операторы (`'OR' => [...]`,
     *                                   `'NOT' => [...]`).
     *                                 * false - игнорируется.
     *                               - group (string|false): Группировка GROUP BY. Игнорируется, если false.
     *                                 Должна быть строкой.
     *                               - order (string|false): Сортировка ORDER BY. Игнорируется, если false.
     *                                 Должна быть строкой.
     *                               - limit (int|string|false): Ограничение LIMIT.
     *                                 * int - прямое значение.
     *                                 * string - формат "OFFSET,COUNT".
     *                                 * false - игнорируется.
     *                               - params (array): Ассоциативный массив параметров
     *                                 ([":имя" => значение]).
     *                                 Обязателен для использования с условиями `where` и другими частями запроса,
     *                                 требующими подготовленных выражений. Обеспечивает защиту от SQL-инъекций.
     *                                 Может быть пустым массивом, если параметры не требуются.
     *
     * @return bool Возвращает true, если запрос успешно выполнен. В случае ошибки должна быть выброшена ошибка.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных (`$select`, `$from_tbl`,
     *                                  `$options`).
     * @throws Exception                Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Все параметры и возвращаемое значение должны строго соответствовать описанию.
     *
     * @warning Убедитесь, что передаваемые аргументы соответствуют требованиям.
     *          Использование параметров `params` обязательно для значений, подставляемых в запросы.
     *
     * Пример использования:
     * @code
     * // Пример безопасного использования метода на объекте, реализующем интерфейс
     * $dataReader = new MyDataReader(); // Класс, реализующий интерфейс Database_Interface
     *
     * $results = $dataReader->select(
     *     ['id', 'name'],
     *     'users',
     *     [
     *         'where' => 'status = :status',
     *         'group' => 'category_id',
     *         'order' => 'created_at DESC',
     *         'limit' => 10,
     *         'params' => [':status' => 'active']
     *     ]
     * );
     *
     * if ($results !== false) {
     *     print_r($results);
     * } else {
     *     echo "Запрос не дал результатов.";
     * }
     * @endcode
     */
    public function select(string|array $select, string $from_tbl, array $options = []): bool;

    /**
     * @brief   Выполняет SQL-запрос с использованием JOIN для выборки данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность выполнения SQL-запроса с использованием JOIN, включая:
     *          1. Приём параметров для определения выбираемых полей, основной таблицы, массива JOIN-операций
     *             и дополнительных опций запроса (`where`, `group`, `order`, `limit`, `params`).
     *          2. Формирование и выполнение SQL-запроса с JOIN на основе предоставленных данных и опций.
     *          3. Использование подготовленных выражений для обеспечения безопасности при работе с данными.
     *          4. Возврат результата выполнения запроса.
     *          Реализующие классы должны обеспечить корректную обработку всех входных параметров и
     *          возвращаемого значения согласно описанию.
     *
     * @param string|array $select   Список полей для выборки. Может быть строкой (имя одного поля) или массивом
     *                               (список полей). Если передан массив, он преобразуется в строку с разделителем `,`.
     * @param string       $from_tbl Имя основной таблицы, из которой начинается выборка.
     *                               Должно быть строкой, содержащей только допустимые имена таблиц без специальных
     *                               символов.
     * @param array        $join     Массив описаний JOIN-операций. Каждый элемент массива должен содержать следующие
     *                               ключи:
     *                               - table (string): Имя таблицы для JOIN.
     *                               - type (string, optional): Тип JOIN (например, INNER, LEFT, RIGHT). По
     *                                 умолчанию используется INNER.
     *                               - on (string): Условие для JOIN. Должно быть строкой с допустимым условием
     *                                 сравнения полей.
     *                               Массив не может быть пустым.
     * @param array        $options  Массив дополнительных опций для формирования запроса. Поддерживаемые ключи:
     *                               - where (string|array|false): Условие WHERE.
     *                                 * string - используется как есть.
     *                                 * array - преобразуется в SQL. Поддерживает простые условия
     *                                   (`['поле' => значение]`) и логические операторы (`'OR' => [...]`,
     *                                   `'NOT' => [...]`).
     *                                 * false - игнорируется.
     *                               - group (string|false): Группировка GROUP BY. Игнорируется, если false.
     *                                 Должна быть строкой.
     *                               - order (string|false): Сортировка ORDER BY. Игнорируется, если false.
     *                                 Должна быть строкой.
     *                               - limit (int|string|false): Ограничение LIMIT.
     *                                 * int - прямое значение.
     *                                 * string - формат "OFFSET,COUNT".
     *                                 * false - игнорируется.
     *                               - params (array): Ассоциативный массив параметров
     *                                 ([":имя" => значение]).
     *                                 Обязателен для использования с условиями `where` и другими частями запроса,
     *                                 требующими подготовленных выражений. Обеспечивает защиту от SQL-инъекций.
     *                                 Может быть пустым массивом, если параметры не требуются.
     *
     * @return bool Возвращает true, если запрос успешно выполнен. В случае ошибки должна быть выброшена ошибка.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных (`$select`, `$from_tbl`,
     *                                  `$join`, `$options`).
     * @throws Exception                Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Все параметры и возвращаемое значение должны строго соответствовать описанию.
     *
     * @warning Убедитесь, что передаваемые аргументы соответствуют требованиям.
     *          Массив `$join` не должен быть пустым.
     *          Использование параметров `params` обязательно для значений, подставляемых в запросы.
     *
     * Пример использования:
     * @code
     * // Пример безопасного использования метода на объекте, реализующем интерфейс
     * $queryBuilder = new MyQueryBuilder(); // Класс, реализующий интерфейс Database_Interface
     *
     * $results = $queryBuilder->join(
     *     ['users.id', 'users.name', 'orders.order_date'],
     *     'users',
     *     [
     *         ['type' => 'INNER', 'table' => 'orders', 'on' => 'users.id = orders.user_id'],
     *     ],
     *     [
     *         'where' => ['users.status' => 1],
     *         'params' => [':status' => 1],
     *     ]
     * );
     *
     * if ($results !== false) {
     *     print_r($results);
     * } else {
     *     echo "Запрос не дал результатов.";
     * }
     * @endcode
     */
    public function join(string|array $select, string $from_tbl, array $join, array $options = []): bool;

    /**
     * @brief   Удаляет данные из таблицы.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность удаления данных, включая:
     *          1. Приём имени таблицы, из которой нужно удалить данные.
     *          2. Приём дополнительных опций для формирования запроса, включая обязательное условие `where`.
     *          3. Удаление данных из таблицы на основе предоставленных условий и опций.
     *          4. Использование подготовленных выражений для обеспечения безопасности.
     *          Реализующие классы должны обеспечить корректную обработку всех входных параметров и
     *          возвращаемого значения согласно описанию.
     *
     * @param string $from_tbl Имя таблицы, из которой необходимо удалить данные.
     *                         Должно быть строкой, содержащей только допустимые имена таблиц без специальных символов.
     * @param array  $options  Массив дополнительных опций для формирования запроса. Поддерживаемые ключи:
     *                         - where (string|array|false): Условие WHERE.
     *                           * string - используется как есть.
     *                           * array - преобразуется в SQL. Поддерживает простые условия
     *                             (`['поле' => значение]`) и логические операторы (`'OR' => [...]`,
     *                             `'NOT' => [...]`).
     *                           * false - игнорируется.
     *                           Обязательный параметр для безопасности. Без условия WHERE запрос не будет выполнен.
     *                         - group (string|false): Группировка GROUP BY. Игнорируется, если false.
     *                           Должна быть строкой.
     *                           Не поддерживается в запросах DELETE и удаляется с записью в лог.
     *                         - order (string|false): Сортировка ORDER BY. Игнорируется, если false.
     *                           Должна быть строкой.
     *                           Может использоваться только вместе с `limit`. Если указан только один из них, оба
     *                           игнорируются с записью в лог.
     *                         - limit (int|string|false): Ограничение LIMIT.
     *                           * int - прямое значение.
     *                           * string - формат "OFFSET,COUNT".
     *                           * false - игнорируется.
     *                           Может использоваться только вместе с `order`. Если указан только один из них, оба
     *                           игнорируются с записью в лог.
     *                         - params (array): Ассоциативный массив параметров
     *                           ([":имя" => значение]).
     *                           Обязателен для использования с условиями `where` и другими частями запроса,
     *                           требующими подготовленных выражений. Обеспечивает защиту от SQL-инъекций.
     *                           Может быть пустым массивом, если параметры не требуются.
     *
     * @return bool Возвращает true, если запрос успешно выполнен (даже если результат пустой). В случае ошибки
     *              выбрасывается исключение.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных или отсутствии обязательного
     *                                  условия `where`.
     * @throws RuntimeException         Выбрасывается при ошибках выполнения запроса или внутренней логики.
     * @throws JsonException            Выбрасывается при ошибках, связанных с кодированием/декодированием JSON.
     * @throws Exception                Выбрасывается при возникновении общих ошибок.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Все параметры и возвращаемое значение должны строго соответствовать описанию.
     *
     * @warning Убедитесь, что передаваемые аргументы соответствуют требованиям.
     *          Обязательное указание условия `where` в опциях является частью контракта для обеспечения безопасности
     *          и предотвращения случайного удаления всех данных.
     *          Использование параметров `params` обязательно для значений, подставляемых в запросы, для
     *          предотвращения SQL-инъекций.
     *
     * Пример использования:
     * @code
     * // Пример безопасного использования метода на объекте, реализующем интерфейс
     * $dataRepository = new MyDataRepository(); // Класс, реализующий интерфейс Database_Interface
     *
     * $dataRepository->delete('users', [
     *     'where' => 'id = :id',
     *     'params' => [':id' => 1],
     * ]);
     *
     * // Использование с ассоциативным массивом в `where`
     * $dataRepository->delete('users', [
     *     'where' => ['id' => 1],
     * ]);
     * @endcode
     */
    public function delete(string $from_tbl, array $options = []): bool;

    /**
     * @brief   Очищает таблицу (TRUNCATE).
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность полной очистки таблицы в базе данных с использованием
     *          операции TRUNCATE.
     *
     * @param string $from_tbl Имя таблицы, которую необходимо очистить.
     *                         Должно быть строкой, содержащей только допустимые имена таблиц без специальных символов.
     *
     * @return bool Возвращает `true`, если операция очистки успешно выполнена.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректном имени таблицы.
     * @throws Exception                Выбрасывается при ошибках выполнения операции очистки.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Параметр `$from_tbl` должен строго соответствовать описанию.
     *          Помните, что TRUNCATE - это необратимая операция, которая не участвует в транзакциях.
     *
     * @warning Реализация должна выполнить полную очистку таблицы.
     *          Используйте этот метод с крайней осторожностью, так как данные будут удалены без возможности
     *          восстановления через ROLLBACK.
     *
     * Пример использования:
     * @code
     * // Пример очистки таблицы на объекте, реализующем интерфейс
     * $dbMaintenance = new MyDbMaintenance(); // Класс, реализующий интерфейс Database_Interface
     *
     * $dbMaintenance->truncate('temp_logs');
     * // Таблица 'temp_logs' теперь пуста
     * @endcode
     */
    public function truncate(string $from_tbl): bool;

    /**
     * @brief   Обновляет данные в таблице.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность обновления данных, включая:
     *          1. Приём массива данных для обновления, имени таблицы и опций запроса, включая обязательное условие
     *             `where`.
     *          2. Выполнение обновления данных в таблице на основе предоставленных данных и опций.
     *          3. Использование подготовленных выражений для обеспечения безопасности.
     *          Реализующие классы должны обеспечить корректную обработку всех входных параметров и
     *          возвращаемого значения согласно описанию.
     *
     * @param array  $update   Ассоциативный массив данных для обновления в формате: 'имя_поля' => 'значение'.
     *                         Для защиты от SQL-инъекций рекомендуется использовать плейсхолдеры (например, `:name`).
     * @param string $from_tbl Имя таблицы, в которой необходимо обновить данные.
     *                         Должно быть строкой, содержащей только допустимые имена таблиц без специальных символов.
     * @param array  $options  Массив опций для формирования запроса. Поддерживаемые ключи:
     *                         - where (string|array|false): Условие WHERE.
     *                           * string - используется как есть.
     *                           * array - преобразуется в SQL. Поддерживает простые условия
     *                             (`['поле' => значение]`) и логические операторы (`'OR' => [...]`,
     *                             `'NOT' => [...]`).
     *                           * false - игнорируется.
     *                           Обязательный параметр для безопасности. Без условия WHERE запрос не будет выполнен.
     *                         - group (string|false): Группировка GROUP BY. Игнорируется, если false.
     *                           Должна быть строкой.
     *                           Не поддерживается в запросах UPDATE.
     *                         - order (string|false): Сортировка ORDER BY. Игнорируется, если false.
     *                           Должна быть строкой.
     *                         - limit (int|string|false): Ограничение LIMIT.
     *                           * int - прямое значение.
     *                           * string - формат "OFFSET,COUNT".
     *                           * false - игнорируется.
     *                         - params (array): Ассоциативный массив параметров
     *                           ([":имя" => значение]).
     *                           Обязателен для использования с данными для обновления или условиями `where`,
     *                           требующими подготовленных выражений. Обеспечивает защиту от SQL-инъекций.
     *                           Может быть пустым массивом, если параметры не требуются.
     *
     * @return bool Возвращает true, если запрос успешно выполнен. В случае ошибки должна быть выброшена ошибка.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных (`$update`, `$from_tbl`,
     *                                  `$options`) или отсутствии обязательного условия `where`.
     * @throws JsonException            Выбрасывается при ошибках, связанных с кодированием/декодированием JSON.
     * @throws Exception                Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Все параметры и возвращаемое значение должны строго соответствовать описанию.
     *          Ключ `group` игнорируется в этом методе.
     *
     * @warning Убедитесь, что передаваемые аргументы соответствуют требованиям.
     *          Обязательное указание условия `where` в опциях является частью контракта для
     *          обеспечения безопасности и предотвращения случайного обновления всех данных.
     *          Использование параметров `params` обязательно для значений, подставляемых в запросы.
     *
     * Пример использования:
     * @code
     * // Пример безопасного использования метода на объекте, реализующем интерфейс
     * $dataUpdater = new MyDataUpdater(); // Класс, реализующий интерфейс Database_Interface
     *
     * $dataUpdater->update(
     *     ['name' => ':name'],
     *     'users',
     *     [
     *         'where' => 'id = :id',
     *         'params' => [':id' => 1, ':name' => 'John Doe']
     *     ]
     * );
     * @endcode
     */
    public function update(array $update, string $from_tbl, array $options = []): bool;

    /**
     * @brief   Вставляет данные в таблицу.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность вставки данных, включая:
     *          1. Приём массива данных для вставки, имени таблицы и типа запроса (`IGNORE`, `REPLACE`, `INTO`).
     *          2. Приём дополнительных опций для формирования запроса (поддерживается только `params`).
     *          3. Выполнение вставки данных в таблицу с использованием подготовленных выражений.
     *          Реализующие классы должны обеспечить корректную обработку всех входных параметров и
     *          возвращаемого значения согласно описанию.
     *
     * @param array $insert   Ассоциативный массив данных для вставки в формате: 'имя_поля' => 'значение' или
     *                        'имя_поля' => ':плейсхолдер'.
     *                        Если передан пустой массив, должна быть выброшена ошибка.
     * @param string $to_tbl  Имя таблицы, в которую необходимо вставить данные.
     *                        Должно быть строкой, содержащей только допустимые имена таблиц без специальных символов.
     * @param string $type    Тип запроса (необязательно). Определяет тип SQL-запроса на вставку. Допустимые значения:
     *                        - 'ignore': INSERT IGNORE INTO.
     *                        - 'replace': REPLACE INTO.
     *                        - 'into': INSERT INTO (явное указание).
     *                        - '' (пустая строка): INSERT INTO (по умолчанию).
     *                        Если указан недопустимый тип, должна быть выброшена ошибка.
     * @param array  $options Массив опций для формирования запроса. Поддерживаемые ключи:
     *                        - params (array): Параметры для подготовленного выражения. Ассоциативный массив
     *                          значений, используемых в запросе (например, [":name" => "John Doe", ":email" =>
     *                          "john@local.com"]).
     *                          Обязателен для использования с данными для вставки, требующими
     *                          подготовленных выражений. Обеспечивает защиту от SQL-инъекций.
     *                          Может быть пустым массивом, если параметры не требуются.
     *                        - where (string|array|false): Условие WHERE. Игнорируется в этом методе.
     *                        - group (string|false): Группировка GROUP BY. Игнорируется в этом методе.
     *                        - order (string|false): Сортировка ORDER BY. Игнорируется в этом методе.
     *                        - limit (int|string|false): Ограничение LIMIT. Игнорируется в этом методе.
     *
     * @return bool Возвращает true, если запрос успешно выполнен. В случае ошибки должна быть выброшена ошибка.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных (`$insert`, `$to_tbl`, `$type`,
     *                                  `$options`).
     * @throws Exception                Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Все параметры и возвращаемое значение должны строго соответствовать описанию.
     *          Ключи массива `$options` (`where`, `group`, `order`, `limit`) игнорируются в этом методе.
     *
     * @warning Убедитесь, что передаваемые аргументы соответствуют требованиям.
     *          Массив `$insert` не должен быть пустым. Параметр `$type` должен быть одним из допустимых значений.
     *          Использование параметров `params` обязательно для значений, подставляемых в запросы.
     *
     * Пример использования:
     * @code
     * // Пример безопасного использования метода на объекте, реализующем интерфейс
     * $dataWriter = new MyDataWriter(); // Класс, реализующий интерфейс Database_Interface
     *
     * $dataWriter->insert(
     *     ['name' => ':name', 'email' => ':email'],
     *     'users',
     *     'ignore', // или 'replace', 'into', ''
     *     ['params' => [':name' => 'John Doe', ':email' => 'john@local.com']]
     * );
     * @endcode
     */
    public function insert(array $insert, string $to_tbl, string $type = '', array $options = []): bool;

    /**
     * @brief   Извлекает одну строку результата.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность получения одной строки результата из последнего
     *          выполненного SQL-запроса (обычно SELECT) в виде ассоциативного массива.
     *          Реализация должна возвращать ассоциативный массив данных одной строки или `false`, если результатов
     *          больше нет.
     *
     * @return array|false Возвращает ассоциативный массив, содержащий данные одной строки результата, если она
     *                     доступна. При последовательных вызовах переходит к следующей строке.
     *                     Если результатов больше нет (все строки были извлечены), возвращает `false`.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректном состоянии результата запроса, например, если
     *                                  результат недоступен или не готов к чтению.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Возвращаемое значение (ассоциативный массив или `false`) должно строго соответствовать описанию.
     *          Реализация должна учитывать, что результат запроса должен быть получен и доступен
     *          для извлечения данных по одной строке перед вызовом этого метода.
     *
     * @warning Реализация должна убедиться, что перед вызовом этого метода был успешно выполнен
     *          запрос, который установил доступный для чтения результат.
     *
     * Пример использования:
     * @code
     * // Предполагается, что перед этим был выполнен SELECT запрос
     * $dataReader = new MyDataReader(); // Класс, реализующий интерфейс Database_Interface
     * // ... например: $dataReader->select(['id', 'name'], 'users', ['where' => 'status = 1']);
     *
     * // Извлекаем строки по одной
     * while ($row = $dataReader->result_row()) {
     *     echo "ID: " . $row['id'] . ", Name: " . $row['name'] . "\n";
     * }
     * @endcode
     */
    public function result_row(): array|false;

    /**
     * @brief   Извлекает все строки результата.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность получения всех строк результата из последнего выполненного SQL-запроса
     *          (обычно SELECT) в виде массива ассоциативных массивов.
     *          Реализация должна возвращать массив данных или `false`, если результатов нет.
     *
     * @return array|false Возвращает массив ассоциативных массивов, содержащих данные всех строк результата, если
     *                     они доступны. Если результатов нет (запрос не вернул строк), возвращает `false`.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректном состоянии результата запроса, например, если
     *                                  результат недоступен или не готов к чтению.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Возвращаемое значение (массив или `false`) должно строго соответствовать описанию.
     *          Реализация должна учитывать, что результат запроса должен быть получен и доступен
     *          для извлечения данных перед вызовом этого метода.
     *
     * @warning Реализация должна убедиться, что перед вызовом этого метода был успешно выполнен
     *          запрос, который установил доступный для чтения результат.
     *
     * Пример использования:
     * @code
     * // Предполагается, что перед этим был выполнен SELECT запрос
     * $dataReader = new MyDataReader(); // Класс, реализующий интерфейс Database_Interface
     * // ... например: $dataReader->select(['id', 'name'], 'users', ['where' => 'status = 1']);
     *
     * // Получаем все строки результата в виде массива
     * $results = $dataReader->result_array();
     *
     * if ($results !== false) {
     *     foreach ($results as $row) {
     *         echo "ID: " . $row['id'] . ", Name: " . $row['name'] . "\n";
     *     }
     * } else {
     *     echo "No results found.";
     * }
     * @endcode
     */
    public function result_array(): array|false;

    /**
     * @brief   Возвращает количество строк, затронутых последним SQL-запросом.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность получения количества строк, затронутых последним
     *          выполненным SQL-запросом на модификацию данных (INSERT, UPDATE, DELETE, REPLACE).
     *          Реализация должна возвращать целое число, представляющее количество затронутых строк.
     *
     * @return int Количество строк, затронутых последним SQL-запросом.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректном состоянии, например, если количество
     *                                  затронутых строк не установлено или имеет недопустимое значение.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Возвращаемое значение (целое число) должно строго соответствовать описанию.
     *          Реализация должна учитывать, что количество затронутых строк актуально
     *          после выполнения запроса на модификацию данных.
     *
     * @warning Реализация должна убедиться, что перед вызовом этого метода был выполнен
     *          запрос на модификацию данных (INSERT, UPDATE, DELETE или REPLACE),
     *          чтобы возвращаемое значение было корректным.
     *
     * Пример использования:
     * @code
     * // Предполагается, что перед этим был выполнен INSERT, UPDATE, DELETE или REPLACE запрос
     * $dataReader = new MyDataReader(); // Класс, реализующий интерфейс Database_Interface
     * // ... например: $dataReader->update('users', ['status' => 1], ['where' => 'id = 5']);
     *
     * // Получаем количество затронутых строк
     * $affectedRows = $dataReader->get_affected_rows();
     * echo "Affected rows: " . $affectedRows;
     * @endcode
     */
    public function get_affected_rows(): int;

    /**
     * @brief   Возвращает ID последней вставленной строки.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность получения ID последней строки, успешно вставленной в базу данных.
     *          Реализация должна возвращать целое число, представляющее ID.
     *
     * @return int ID последней вставленной строки.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректном состоянии, например, если ID последней
     *                                  вставленной строки не установлено или имеет недопустимое значение.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Возвращаемое значение (целое число) должно строго соответствовать описанию.
     *          Реализация должна учитывать, что ID последней вставленной строки актуально
     *          после выполнения запроса на вставку данных.
     *
     * @warning Реализация должна убедиться, что перед вызовом этого метода был выполнен
     *          запрос на вставку данных (INSERT),
     *          чтобы возвращаемое значение было корректным.
     *
     * Пример использования:
     * @code
     * // Предполагается, что перед этим был выполнен INSERT запрос
     * $dataWriter = new MyDataWriter(); // Класс, реализующий интерфейс Database_Interface
     * // ... например: $dataWriter->insert(['name' => 'New User'], 'users');
     *
     * // Получаем ID последней вставленной строки
     * $lastInsertId = $dataWriter->get_last_insert_id();
     * echo "Last insert ID: " . $lastInsertId;
     * @endcode
     */
    public function get_last_insert_id(): int;

    /**
     * @brief   Формирует SQL-выражение для форматирования даты.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность формирования специфичного для базы данных
     *          SQL-выражения для форматирования значения из столбца с датой в заданный формат.
     *
     * @param string $column Название столбца с датой.
     *                       - Должен быть непустой строкой в формате имени столбца таблицы в БД.
     * @param string $format Формат даты.
     *                       - Может быть указан в любом поддерживаемом формате (например, MySQL, PostgreSQL, SQLite).
     *                       - Реализация должна обрабатывать этот формат и преобразовывать его в
     *                         соответствующий формат для используемой СУБД.
     *
     * @return string SQL-выражение для форматирования даты.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных (`$column`, `$format`) или если
     *                                  тип СУБД не поддерживается.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Все параметры и возвращаемое значение должны строго соответствовать описанию.
     *          Реализация должна обрабатывать форматы даты, специфичные для используемой СУБД.
     *
     * @warning Убедитесь, что `$column` (непустая строка) и `$format` содержат корректные значения перед вызовом метода.
     *
     * Пример использования:
     * @code
     * // Пример использования метода на объекте, реализующем интерфейс
     * $dbHelper = new MyDbHelper(); // Класс, реализующий интерфейс Database_Interface
     *
     * $formattedDateSql = $dbHelper->format_date('created_at', '%Y-%m-%d');
     * // $formattedDateSql будет содержать SQL-выражение, специфичное для используемой СУБД,
     * // например: DATE_FORMAT(created_at, '%Y-%m-%d') для MySQL
     * @endcode
     */
    public function format_date(string $column, string $format): string;

    /**
     * @brief   Начинает транзакцию в базе данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность начала транзакции в базе данных.
     *          Метод принимает необязательный строковый параметр для указания контекста транзакции.
     *
     * @param string $context Контекст транзакции (необязательный параметр).
     *                        Используется для описания цели или места начала транзакции.
     *                        По умолчанию: пустая строка (`''`).
     *
     * @return void           Метод ничего не возвращает.
     *
     * @throws Exception      Выбрасывается, если произошла ошибка при начале транзакции.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Параметр `$context` должен строго соответствовать описанию.
     *
     * @warning Реализация должна убедиться, что соединение с базой данных установлено и валидно
     *          перед попыткой начать транзакцию.
     *
     * Пример использования:
     * @code
     * // Пример начала транзакции на объекте, реализующем интерфейс
     * $dbManager = new MyDatabaseManager(); // Класс, реализующий интерфейс Database_Interface
     *
     * $dbManager->begin_transaction('Обработка заказа');
     * // ... операции с БД ...
     * // $dbManager->commit(); или $dbManager->roll_back();
     * @endcode
     */
    public function begin_transaction(string $context = ''): void;

    /**
     * @brief   Подтверждает транзакцию в базе данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность подтверждения транзакции в базе данных.
     *          Метод принимает необязательный строковый параметр для указания контекста подтверждения транзакции.
     *
     * @param string $context Контекст транзакции (необязательный параметр).
     *                        Используется для описания цели или места подтверждения транзакции.
     *                        По умолчанию: пустая строка (`''`).
     *
     * @return void           Метод ничего не возвращает.
     *
     * @throws Exception      Выбрасывается, если произошла ошибка при подтверждении транзакции.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Параметр `$context` должен строго соответствовать описанию.
     *
     * @warning Реализация должна убедиться, что транзакция была начата перед вызовом этого метода.
     *          Попытка подтвердить несуществующую транзакцию приведёт к ошибке.
     *
     * Пример использования:
     * @code
     * // Пример подтверждения транзакции на объекте, реализующем интерфейс
     * $dbManager = new MyDatabaseManager(); // Класс, реализующий интерфейс Database_Interface
     *
     * $dbManager->begin_transaction('Групповое добавление');
     * // ... операции в транзакции ...
     * $dbManager->commit_transaction('Групповое добавление завершено');
     * @endcode
     */
    public function commit_transaction(string $context = ''): void;

    /**
     * @brief   Отменяет транзакцию в базе данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность отмены (отката) текущей транзакции в базе данных.
     *          Метод принимает необязательный строковый параметр для указания контекста отмены транзакции.
     *
     * @param string $context Контекст транзакции (необязательный параметр).
     *                        Используется для описания цели или места отмены транзакции.
     *                        По умолчанию: пустая строка (`''`).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws Exception Выбрасывается, если произошла ошибка при отмене транзакции.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Параметр `$context` должен строго соответствовать описанию.
     *
     * @warning Реализация должна убедиться, что транзакция была начата перед вызовом этого метода.
     *          Попытка отменить несуществующую транзакцию приведёт к ошибке.
     *
     * Пример использования:
     * @code
     * // Пример отмены транзакции на объекте, реализующем интерфейс
     * $dbManager = new MyDatabaseManager(); // Класс, реализующий интерфейс Database_Interface
     *
     * $dbManager->begin_transaction('Групповое добавление');
     * // ... операции в транзакции ...
     * try {
     * // ...
     * } catch (\Exception $e) {
     * $dbManager->rollback_transaction('Групповое добавление - Ошибка');
     * }
     * @endcode
     */
    public function rollback_transaction(string $context = ''): void;

    /**
     * @brief   Временно изменяет формат SQL для выполнения запросов.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность выполнения предоставленного коллбэка в контексте
     *          временно измененного формата SQL, гарантируя восстановление исходного формата
     *          после завершения коллбэка, в том числе при возникновении исключений.
     *
     * @param string   $format   Формат SQL, который нужно использовать временно.
     *                           Поддерживаемые значения: 'mysql', 'pgsql', 'sqlite'.
     * @param callable $callback Коллбэк, содержащий код, который должен выполняться
     *                           в контексте указанного формата SQL. Коллбэк может принимать ссылку на текущий
     *                           объект базы данных (реализующий этот интерфейс) как аргумент.
     *
     * @return mixed Результат выполнения коллбэка `$callback`.
     *
     * @throws InvalidArgumentException Выбрасывается при указании неподдерживаемого формата SQL.
     * @throws Exception                Любые исключения, выброшенные внутри переданного коллбэка, должны автоматически
     *                                  распространяться (не перехватываются этим методом).
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Параметры (`$format`, `$callback`) и возвращаемое значение (`mixed`) должны строго
     *          соответствовать описанию. Реализация должна гарантировать временную смену и
     *          последующее восстановление формата SQL, включая обработку исключений внутри коллбэка.
     * @warning Важные замечания для реализации:
     *          1. Убедитесь, что все методы текущего объекта (реализующего этот интерфейс),
     *             вызываемые внутри коллбэка, корректно работают с временным форматом SQL.
     *          2. **Особая осторожность:** Исключения, выброшенные внутри коллбэка, **не должны перехватываться**
     *             реализацией этого метода; они должны распространяться (пробрасываться) дальше.
     *
     * Пример использования:
     * @code
     * // Пример выполнения запросов в формате PostgreSQL на объекте, реализующем интерфейс
     * $dbInterface = new MyDbImplementation(); // Класс, реализующий интерфейс Database_Interface
     * // Предполагается, что TBL_NEWS определена как константа
     *
     * $years_list = $dbInterface->with_sql_format('pgsql', function (\Database_Interface $db) {
     *     // Внутри этого коллбэка $db должен использовать формат 'pgsql'
     *     // Например, вызов $db->format_date(...) должен вернуть PostgreSQL-совместимую строку
     *     $formatted_date = $db->format_date('data_last_edit', 'YYYY');
     *     $db->select(
     *         'DISTINCT ' . $formatted_date . ' AS year',
     *         TBL_NEWS,
     *         [
     *             'order' => 'year ASC',
     *         ]
     *     );
     *     return $db->result_array();
     * });
     * print_r($years_list);
     *
     * // После завершения коллбэка, исходный формат SQL должен быть восстановлен автоматически реализацией.
     * @endcode
     */
    public function with_sql_format(string $format, callable $callback): mixed;

    /**
     * @brief   Выполняет полнотекстовый поиск в указанной таблице по заданным столбцам.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он определяет функциональность выполнения полнотекстового поиска, включая:
     *          1. Приём параметров для определения возвращаемых столбцов, столбцов для поиска, строки поиска,
     *             таблицы и дополнительных опций запроса.
     *          2. Формирование и выполнение SQL-запроса с полнотекстовым поиском.
     *          3. Использование подготовленных выражений для обеспечения безопасности при работе с данными.
     *          4. Возврат результата выполнения поиска.
     *          Реализующие классы должны обеспечить корректную обработку всех входных параметров и
     *          возвращаемого значения согласно описанию.
     *
     * @param array  $columns_to_return Массив строк с именами столбцов, данные из которых необходимо включить в
     *                                   результат запроса.
     * @param array  $columns_to_search Массив строк с именами столбцов, по которым должен выполняться полнотекстовый
     *                                   поиск.
     * @param string $search_string     Строка для полнотекстового поиска.
     *                                  - Может содержать `*` для выбора всех записей из таблицы.
     * @param string $table             Строка с именем таблицы, в которой выполняется полнотекстовый поиск.
     * @param array  $options           Массив дополнительных опций для формирования запроса. Поддерживаемые ключи:
     *                                  - where (string|array|false): Условие WHERE.
     *                                    * string - используется как есть.
     *                                    * array - преобразуется в SQL.
     *                                    * false - игнорируется.
     *                                  - group (string|false): Группировка GROUP BY. Игнорируется, если false.
     *                                  - order (string|false): ORDER BY. Игнорируется, если false.
     *                                  - limit (int|string|false): Ограничение LIMIT.
     *                                    * int - прямое значение.
     *                                    * string - формат "OFFSET,COUNT".
     *                                    * false - игнорируется.
     *                                  - params (array): Ассоциативный массив параметров
     *                                    ([":имя" => значение]).
     *                                    Использование параметров `params` обязательно
     *                                    для защиты от SQL-инъекций.
     *
     * @return array|false Возвращает результат выполнения запроса в виде ассоциативного массива строк или false,
     *                     если результат пустой или произошла ошибка.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных.
     * @throws RuntimeException         Выбрасывается при ошибках выполнения запроса или внутренней логики.
     * @throws JsonException            Выбрасывается при ошибках, связанных с кодированием/декодированием JSON.
     * @throws Exception                Выбрасывается при возникновении общих ошибок.
     *
     * @note    Метод должен быть реализован в классе, реализующем данный интерфейс.
     *          Все параметры и возвращаемое значение должны строго соответствовать описанию.
     *
     * @warning Убедитесь, что передаваемые аргументы соответствуют требованиям.
     *          Использование параметров `params` обязательно для значений, подставляемых в запросы,
     *          для предотвращения SQL-инъекций.
     *
     * Пример использования:
     * @code
     * // Пример вызова метода на объекте, реализующем интерфейс
     * $searchService = new MyFullTextSearchService(); // Класс, реализующий интерфейс
     *
     * $results = $searchService->full_text_search(
     *     ['id', 'title'],
     *     ['title', 'content'],
     *     'test',
     *     'articles',
     *     [
     *         'where' => ['is_active' => true],
     *         'limit' => 5,
     *         'params' => [':is_active' => true]
     *     ]
     * );
     *
     * if ($results !== false) {
     *     print_r($results);
     * } else {
     *     echo "Ничего не найдено.";
     * }
     * @endcode
     */
    public function full_text_search(
        array $columns_to_return,
        array $columns_to_search,
        string $search_string,
        string $table,
        array $options = []
    ): array|false;
}
