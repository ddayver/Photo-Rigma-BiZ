<?php

/**
 * Интерфейс для центральной точки приложения.
 *
 * Этот файл содержит интерфейс `Work_Interface`, который определяет методы для управления языковыми данными,
 * объектом пользователя и обеспечивает доступ к функционалу дочерних компонентов через фасады:
 * - Установка языковых данных из директорий (`set_lang`). Метод сканирует указанные директории, загружает файлы
 *   языковых данных и передаёт их в дочерние компоненты.
 * - Установка объекта пользователя через сеттер (`set_user`).
 * - Делегирование вызовов методов дочерним компонентам:
 *   - `Work_Helper_Interface`: Вспомогательные методы (например, очистка строк, преобразование размеров).
 *   - `Work_CoreLogic_Interface`: Базовая логика приложения (например, работа с категориями, новостями).
 *   - `Work_Image_Interface`: Работа с изображениями (например, изменение размеров, вывод эскизов).
 *   - `Work_Template_Interface`: Формирование данных для шаблонов (например, меню, статистика).
 *   - `Work_Security_Interface`: Безопасность приложения (например, проверка входных данных, CAPTCHA).
 * Реализация этого интерфейса гарантирует единообразие работы с основными компонентами приложения.
 *
 * @author    Dark Dayver
 * @version   0.5.0
 * @since     2025-05-29
 * @namespace PhotoRigma\\Interfaces
 * @package   PhotoRigma
 *
 * @section   WorkInterface_Main_Functions Основные функции
 *            - Управление языковыми данными через метод `set_lang`.
 *            - Управление объектом пользователя через метод `set_user`.
 *            - Делегирование вызовов методов дочерним компонентам (например, `Work_Helper_Interface`,
 *              `Work_CoreLogic_Interface`, `Work_Image_Interface` и др.).
 *
 * @uses      \PhotoRigma\Interfaces\User_Interface Интерфейс для работы с пользователями.
 * @uses      \PhotoRigma\Interfaces\Work_Helper_Interface Интерфейс для вспомогательных методов.
 * @uses      \PhotoRigma\Interfaces\Work_CoreLogic_Interface Интерфейс для базовой логики приложения.
 * @uses      \PhotoRigma\Interfaces\Work_Image_Interface Интерфейс для работы с изображениями.
 * @uses      \PhotoRigma\Interfaces\Work_Template_Interface Интерфейс для формирования данных шаблонов.
 * @uses      \PhotoRigma\Interfaces\Work_Security_Interface Интерфейс для работы с безопасностью.
 *
 * @note      Этот файл является частью системы PhotoRigma и играет ключевую роль в организации работы приложения.
 *            Интерфейс предоставляет контракт для реализации основной логики взаимодействия между компонентами.
 *
 * @copyright Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license   MIT License {@link https://opensource.org/licenses/MIT}
 *            Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *            сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *            предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *            - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

// Предотвращение прямого вызова файла
use Exception;
use InvalidArgumentException;
use JetBrains\PhpStorm\NoReturn;
use JsonException;
use PDOException;
use Random;
use RuntimeException;

if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    /** @noinspection ForgottenDebugOutputInspection */
    error_log(
        date('H:i:s') . ' [ERROR] | ' . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . ' | ' . __FILE__ . ' | Попытка прямого вызова файла'
    );
    die('HACK!');
}

/**
 * Интерфейс для центральной точки приложения.
 *
 * Этот интерфейс определяет контракт для класса `Work`, который является центральной точкой приложения.
 * Он предоставляет методы для управления языковыми данными, объектом пользователя и обеспечивает доступ к
 * функционалу дочерних компонентов через фасады. Все методы вызываются через класс `Work`.
 * Основные возможности:
 * - Установка языковых данных из директорий (`set_lang`). Метод сканирует указанные директории, загружает файлы
 *   языковых данных и передаёт их в дочерние компоненты.
 * - Установка объекта пользователя через сеттер (`set_user`).
 * - Делегирование вызовов методов дочерним компонентам:
 *   - `Work_Helper_Interface`: Вспомогательные методы (например, очистка строк, преобразование размеров).
 *   - `Work_CoreLogic_Interface`: Базовая логика приложения (например, работа с категориями, новостями).
 *   - `Work_Image_Interface`: Работа с изображениями (например, изменение размеров, вывод эскизов).
 *   - `Work_Template_Interface`: Формирование данных для шаблонов (например, меню, статистика).
 *   - `Work_Security_Interface`: Безопасность приложения (например, проверка входных данных, CAPTCHA).
 *
 * @note    Методы данного интерфейса зависят от реализации дочерних компонентов. Некорректная реализация
 *          дочерних интерфейсов может привести к ошибкам в работе приложения.
 *
 * @warning Все методы должны быть реализованы в классе `Work`. Неполная реализация может привести к непредсказуемому
 *          поведению приложения.
 *
 * @uses \PhotoRigma\Interfaces\User_Interface Интерфейс для работы с пользователями.
 * @uses \PhotoRigma\Interfaces\Work_Helper_Interface Интерфейс для вспомогательных методов.
 * @uses \PhotoRigma\Interfaces\Work_CoreLogic_Interface Интерфейс для базовой логики приложения.
 * @uses \PhotoRigma\Interfaces\Work_Image_Interface Интерфейс для работы с изображениями.
 * @uses \PhotoRigma\Interfaces\Work_Template_Interface Интерфейс для формирования данных шаблонов.
 * @uses \PhotoRigma\Interfaces\Work_Security_Interface Интерфейс для работы с безопасностью.
 */
interface Work_Interface
{
    /**
     * Преобразует размер в формате "число[K|M|G]" в количество байт.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входных данных.
     * 2. Преобразует размер, заданный в формате "число[K|M|G]", в количество байт:
     *    - K (килобайты): умножается на 1024.
     *    - M (мегабайты): умножается на 1024².
     *    - G (гигабайты): умножается на 1024³.
     * 3. Если суффикс отсутствует или недопустим, значение считается в байтах.
     * 4. Отрицательные числа преобразуются в положительные.
     * 5. Возвращает `0`, если входные данные некорректны.
     *
     * @param string|int $val Размер в формате "число[K|M|G]" или число:
     *                        - Допустимые суффиксы: `K`, `M`, `G`.
     *                        - Если суффикс недопустим, он игнорируется, и значение преобразуется в число.
     *                        - Отрицательные числа преобразуются в положительные.
     *
     * @return int Размер в байтах. Возвращает `0` для некорректных входных данных.
     *
     * @warning Метод чувствителен к формату входных данных. Убедитесь, что они корректны.
     */
    public static function return_bytes(string|int $val): int;

    /**
     * Транслитерирует строку и заменяет знаки пунктуации на "_".
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет, что входная строка не является пустой. Если строка пустая, то она возвращается без обработки.
     * 2. Транслитерирует не латинские символы в латиницу.
     * 3. Заменяет все символы, кроме букв и цифр, на `"_"`:
     *    - Заменяет множественные подчёркивания на одно.
     *    - Удаляет подчёркивания в начале и конце строки.
     * 4. Если после обработки строка становится пустой, генерируется уникальная последовательность длиной 16 символов.
     * Метод используется для создания "безопасных" имен файлов или URL.
     *
     * @param string $string Исходная строка:
     *                       - Если строка пустая, то она возвращается без обработки.
     *                       Рекомендуется использовать строки в кодировке UTF-8.
     *
     * @return string Строка после транслитерации и замены символов:
     *                - Если после обработки строка становится пустой, генерируется уникальная последовательность.
     *
     * @warning Метод не гарантирует сохранение исходного формата строки, так как все специальные символы заменяются на
     *          `"_"`.
     */
    public static function encodename(string $string): string;

    /**
     * Преобразует BBCode в HTML.
     *
     * Этот метод преобразует BBCode-теги в соответствующие HTML-теги. Поддерживаются следующие BBCode-теги:
     * - [b]Жирный текст[/b] -> `<strong>Жирный текст</strong>`
     * - [u]Подчёркнутый текст[/u] -> `<u>Подчёркнутый текст</u>`
     * - [i]Курсив[/i] -> `<em>Курсив</em>`
     * - [url]Ссылка[/url], [url=URL]Текст ссылки[/url] -> `<a href="URL" target="_blank" rel="noopener
     *   noreferrer">Текст ссылки</a>`
     * - [color=COLOR]Цвет текста[/color] -> `<span style="color: COLOR;">Цвет текста</span>`
     * - [size=SIZE]Размер текста[/size] -> `<span style="font-size: SIZE;">Размер текста</span>`
     * - [quote]Цитата[/quote], [quote=AUTHOR]Цитата автора[/quote] -> `<blockquote>Цитата</blockquote>`
     * - [list], [list=1], [list=a] — списки -> `<ul>`, `<ol>` с соответствующими элементами `<li>`
     * - [code]Блок кода[/code] -> `<pre><code>Блок кода</code></pre>`
     * - [spoiler]Спойлер[/spoiler] -> `<details><summary>Спойлер</summary>Содержимое</details>`
     * - [hr] — горизонтальная линия -> `<hr>`
     * - [br] — перенос строки -> `<br>`
     * - [left], [center], [right] — выравнивание текста -> `<div style="text-align: left|center|right;">`
     * - [img]Изображение[/img] -> `<img src="URL" alt="Изображение">`
     * Метод защищает от XSS-атак и ограничивает глубину рекурсии для вложенных тегов.
     *
     * @param string $text Текст с BBCode:
     *                     - Если строка пустая, она возвращается без обработки.
     *                     Рекомендуется использовать строки в кодировке UTF-8.
     *
     * @return string Текст с HTML-разметкой:
     *                - Некорректные BBCode-теги игнорируются или преобразуются в текст.
     *
     * @throws Exception Выбрасывается, если произошла ошибка при обработке BBCode.
     *
     * @warning Метод ограничивает глубину рекурсии для вложенных тегов (максимум 10 уровней).
     *          Некорректные URL или изображения заменяются на безопасные значения или удаляются.
     */
    public static function ubb(string $text): string;

    /**
     * Разбивает строку на несколько строк ограниченной длины.
     *
     * Этот метод разбивает строку на несколько строк, каждая из которых имеет длину не более указанной.
     * Разрыв строки выполняется только по пробелам, чтобы сохранить читаемость текста. Поддерживается работа с UTF-8
     * символами. Если параметры некорректны (например, `$width <= 0` или `$break` пустой), возвращается исходная
     * строка.
     *
     * @param string $str   Исходная строка:
     *                      - Рекомендуется использовать строки в кодировке UTF-8.
     *                      - Если строка пустая или её длина меньше или равна `$width`, она возвращается без
     *                        изменений.
     * @param int    $width Максимальная длина строки (по умолчанию 70):
     *                      - Должен быть положительным целым числом.
     * @param string $break Символ разрыва строки (по умолчанию PHP_EOL):
     *                      - Не должен быть пустой строкой.
     *
     * @return string Строка, разбитая на несколько строк:
     *                - В случае некорректных параметров возвращается исходная строка.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @warning Метод корректно работает только с UTF-8 символами.
     *          Если параметры некорректны (например, `$width <= 0` или `$break` пустой), возвращается исходная строка.
     */
    public static function utf8_wordwrap(string $str, int $width = 70, string $break = PHP_EOL): string;

    /**
     * Проверяет, поддерживается ли указанный MIME-тип изображения.
     *
     * Этот метод проверяет, поддерживается ли указанный MIME-тип хотя бы одной из доступных библиотек:
     * - Imagick: Поддерживает широкий спектр форматов, включая JPEG, PNG, GIF, WebP, TIFF, SVG, BMP, ICO, AVIF,
     *            HEIC, PSD, CR2, NEF и другие.
     * - Gmagick: Поддерживает основные форматы, такие как JPEG, PNG, GIF, WebP, TIFF, SVG, BMP, ICO, AVIF, HEIC.
     * - Встроенные функции PHP (GD): Поддерживаются только базовые форматы, такие как JPEG, PNG, GIF, WebP.
     * Если MIME-тип не поддерживается ни одной библиотекой, возвращается `false`.
     *
     * @param string $real_mime_type Реальный MIME-тип файла:
     *                               - Должен быть корректным MIME-типом для изображений.
     *
     * @return bool True, если MIME-тип поддерживается хотя бы одной библиотекой, иначе false.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @warning Метод зависит от доступности библиотек (Imagick, Gmagick) и встроенных функций PHP по работе с
     *          изображениями (GD). Если ни одна из библиотек недоступна, метод может некорректно работать.
     */
    public static function validate_mime_type(string $real_mime_type): bool;

    /**
     * Очищает строку от HTML-тегов и специальных символов.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет, что входные данные не являются пустыми (`null` или пустая строка). Если данные пусты, возвращает
     *    пустую строку (`''`).
     * 2. Преобразует входные данные в кодировку UTF-8.
     * 3. Удаляет все HTML-теги из строки.
     * 4. Экранирует специальные символы (например, `<`, `>`, `&`, `"`, `'`) для защиты от XSS-атак.
     * Метод используется для безопасной обработки пользовательского ввода.
     *
     * @param string $field Строка или данные, которые могут быть преобразованы в строку:
     *                      - Если входные данные пусты (`null` или пустая строка), метод вернёт пустую строку (`''`).
     *
     * @return string Очищенная строка или пустая строка (`''`), если входные данные пусты.
     *
     * @warning Метод не обрабатывает вложенные структуры данных (например, массивы).
     *          Убедитесь, что входные данные могут быть преобразованы в строку.
     */
    public static function clean_field(string $field): string;

    /**
     * Устанавливает языковые данные из файлов и передаёт их в дочерние классы.
     *
     * Этот метод загружает и обрабатывает файлы языковых данных, выполняя следующие шаги:
     * 1. Формирует пути к файлам языковых данных на основе текущего языка сессии или конфигурации.
     * 2. Проверяет существование и доступность файлов для чтения.
     * 3. Загружает данные из файлов, которые должны быть массивами с ключом `'lang'`.
     * 4. Проверяет корректность массивов (например, наличие обязательных ключей).
     * 5. Логирует изменения (если они есть).
     * 6. Обновляет языковые данные в текущем классе и передаёт их в дочерние классы (например, шаблоны и логику).
     *
     * @throws InvalidArgumentException Если массив языковых данных некорректен (например, отсутствует ключ `'lang'` или
     *                                  содержатся ошибки).
     * @throws RuntimeException         Если возникают проблемы с файлами языковых данных (например, файл отсутствует,
     *                                  недоступен для чтения или не содержит обязательный файл `main.php`).
     * @throws JsonException            При ошибках кодирования/декодирования JSON.
     * @throws Exception                При ошибках логирования.
     *
     * @note    Этот метод является точкой входа для установки языковых данных. Реализация должна обеспечивать загрузку
     *          данных из файлов, проверку их корректности и передачу в дочерние компоненты.
     *
     * @warning Если файлы языковых данных отсутствуют, содержат ошибки или недоступны для чтения, метод выбрасывает
     *          исключение.
     */
    public function set_lang(): void;

    /**
     * Установка объекта пользователя через сеттер.
     *
     * Этот метод позволяет установить объект пользователя, реализующий интерфейс `User_Interface`.
     * Метод выполняет следующие действия:
     * 1. Проверяет, что переданный объект является экземпляром класса, реализующего интерфейс `User_Interface`.
     * 2. Передаёт объект пользователя в связанные компоненты системы (`Work_Template` и `Work_CoreLogic`) для
     *    дальнейшего использования.
     *
     * @param User_Interface $user Объект пользователя:
     *                             - Должен быть экземпляром класса, реализующего интерфейс `User_Interface`.
     *
     * @throws InvalidArgumentException Если передан некорректный объект (не экземпляр интерфейса `User_Interface`).
     *
     * @note    Метод проверяет тип переданного объекта.
     *          Объект пользователя используется в связанных компонентах системы (например, для авторизации,
     *          управления правами доступа и т.д.).
     *
     * @warning Некорректный объект (не экземпляр интерфейса `User_Interface`) вызывает исключение.
     *
     * @uses \PhotoRigma\Classes\User_Interface Интерфейс, которому должен соответствовать объект пользователя.
     */
    public function set_user(User_Interface $user): void;

    /**
     * Проверяет входные данные из различных источников.
     *
     * Этот метод выполняет проверку данных из различных источников ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES) на
     * соответствие заданным условиям. Поддерживаются следующие типы проверок:
     * - Проверка наличия поля в источнике данных (параметр 'isset').
     * - Проверка, что значение поля не пустое (параметр 'empty').
     * - Проверка значения поля по регулярному выражению (параметр 'regexp').
     * - Проверка, что значение поля не равно нулю (параметр 'not_zero').
     * - Проверка размера файла для $_FILES (параметр 'max_size') и его MIME-типа.
     *
     * @param string $source_name Источник данных ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES):
     *                            - Должен быть одним из допустимых значений: '_GET', '_POST', '_SESSION', '_COOKIE',
     *                              '_FILES'.
     * @param string $field       Поле для проверки (имя ключа в массиве источника данных):
     *                            - Указывается имя ключа, которое необходимо проверить.
     * @param array  $options     Дополнительные параметры проверки:
     *                            - Ключ 'isset' (bool, опционально): Проверять наличие поля в источнике данных.
     *                            - Ключ 'empty' (bool, опционально): Проверять, что значение поля не пустое.
     *                            - Ключ 'regexp' (string|false, опционально): Регулярное выражение для проверки
     *                              значения поля.
     *                            - Ключ 'not_zero' (bool, опционально): Проверять, что значение поля не равно нулю.
     *                            - Ключ 'max_size' (int, опционально): Максимальный размер файла (в байтах) для
     *                              $_FILES.
     *
     * @return bool True, если данные прошли проверку, иначе False.
     *              Для $_FILES также учитывается корректность MIME-типа и размера файла.
     *
     * @throws RuntimeException Выбрасывается, если MIME-тип загруженного файла не поддерживается.
     * @throws Exception        Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Для источника данных `_SESSION` используется внутреннее свойство класса.
     *          Метод зависит от корректности данных в источниках ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES).
     *          Если источник данных повреждён или содержит некорректные значения, результат может быть
     *          непредсказуемым.
     *
     * @warning Убедитесь, что переданные параметры проверки ($options) корректны и соответствуют требованиям.
     */
    public function check_input(string $source_name, string $field, array $options = []): bool;

    /**
     * Проверяет URL на наличие вредоносного кода.
     *
     * Этот метод выполняет следующие действия:
     * 1. Анализирует строку запроса из глобального массива `$_SERVER['QUERY_STRING']`.
     * 2. Проверяет строку запроса на наличие запрещённых паттернов, определённых в конфигурации.
     * 3. Логирует информацию о попытке взлома, если обнаружены запрещённые паттерны.
     *
     * @return bool True, если URL безопасен (не содержит запрещённых паттернов), иначе False.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод работает с глобальным массивом `$_SERVER['QUERY_STRING']`.
     *          Убедитесь, что этот массив доступен и содержит корректные данные.
     *
     * @warning Метод зависит от корректности данных в конфигурации правил проверки.
     *          Если правила некорректны, результат может быть непредсказуемым.
     */
    public function url_check(): bool;

    /**
     * Проверяет содержимое поля на соответствие регулярному выражению или другим условиям.
     *
     * Этот метод выполняет следующие проверки:
     * 1. Если задано регулярное выражение ($regexp):
     *    - Проверяет корректность регулярного выражения.
     *    - Проверяет соответствие значения поля этому выражению.
     * 2. Если флаг $not_zero установлен, проверяет, что значение поля не равно '0'.
     * 3. Проверяет, что значение поля не содержит запрещённых паттернов из конфигурации.
     *
     * @param string       $field    Значение поля для проверки:
     *                               - Указывается строковое значение, которое необходимо проверить.
     * @param string|false $regexp   Регулярное выражение (необязательно). Если задано, значение должно соответствовать
     *                               этому выражению. Если регулярное выражение некорректно, метод завершает выполнение
     *                               с ошибкой.
     * @param bool         $not_zero Флаг, указывающий, что значение не должно быть числом 0:
     *                               - Если флаг установлен, а значение равно '0', проверка завершается с ошибкой.
     *
     * @return bool True, если поле прошло все проверки, иначе False.
     *              Проверки включают соответствие регулярному выражению, отсутствие запрещённых паттернов
     *              и выполнение условия $not_zero (если оно задано).
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод использует конфигурацию для проверки на наличие запрещённых паттернов.
     *          Конфигурация должна содержать массив скомпилированных регулярных выражений.
     *
     * @warning Метод зависит от корректности данных в конфигурации правил проверки.
     *          Если правила некорректны, результат может быть непредсказуемым.
     *          Также важно убедиться, что регулярное выражение ($regexp) корректно перед использованием.
     */
    public function check_field(string $field, string|false $regexp = false, bool $not_zero = false): bool;

    /**
     * Генерирует математический CAPTCHA-вопрос и ответ.
     *
     * Этот метод выполняет следующие действия:
     * 1. Генерирует случайные числа в диапазоне от 1 до 9.
     * 2. Формирует математическое выражение, которое может включать сложение (`+`) или умножение (`x`) с
     *    использованием скобок.
     * 3. Вычисляет правильный ответ для сгенерированного выражения.
     * Метод используется для защиты от спам-ботов.
     *
     * @return array Массив с ключами 'question' и 'answer':
     *               - Ключ 'question' содержит строку математического выражения (например, "2 x (3 + 4)").
     *               - Ключ 'answer' содержит целочисленный результат вычисления (например, 14).
     *
     * @throws Random\RandomException Выбрасывается, если произошла ошибка при генерации случайных чисел.
     *
     * @note    Метод использует криптографически безопасную функцию для генерации случайных чисел.
     *          Если требуется замена на менее безопасную функцию, это должно быть явно указано в конфигурации.
     *
     * @warning Убедитесь, что PHP поддерживает криптографически безопасные функции генерации случайных чисел.
     */
    public function gen_captcha(): array;

    /**
     * Заменяет символы в email-адресах для защиты от парсинга ботами.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность формата email.
     * 2. Если email некорректен или пуст, возвращает пустую строку.
     * 3. Заменяет символы '@' и '.' на '[at]' и '[dot]' соответственно.
     * Метод предназначен для затруднения автоматического парсинга email-адресов ботами.
     *
     * @param string $email Email-адрес для обработки:
     *                      - Должен быть непустым и соответствовать формату email (например, "example@local.com").
     *                      - Если email некорректен или пуст, метод возвращает пустую строку.
     *
     * @return string Обработанный email-адрес, где символы '@' и '.' заменены на '[at]' и '[dot]'.
     *                Если входной email некорректен или пуст, возвращается пустая строка.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования.
     *
     * @note    Метод использует базовую проверку формата email.
     *          Если требуется более строгая валидация, следует учитывать дополнительные правила.
     *
     * @warning Убедитесь, что входной email соответствует формату перед вызовом метода.
     *          Если email некорректен или пуст, метод вернёт пустую строку.
     */
    public function filt_email(string $email): string;

    /**
     * Формирует информационную строку для категории или пользовательского альбома.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входных параметров:
     *    - `$cat_id` должен быть целым числом >= `0`.
     *    - `$user_flag` должен принимать значения `0` (категория) или `1` (пользовательский альбом).
     * 2. Получает данные о категории или пользовательском альбоме из базы данных.
     * 3. Подсчитывает количество фотографий, связанных с категорией или альбомом.
     * 4. Формирует результирующий массив с информацией о категории или альбоме, включая название, описание,
     *    количество фотографий, данные о последней и лучшей фотографии, а также ссылки на них.
     *
     * @param int $cat_id    Идентификатор категории или пользователя (если `$user_flag = 1`):
     *                       - Должен быть целым числом >= `0`.
     *                       Пример: `5` (для категории) или `123` (для пользовательского альбома).
     * @param int $user_flag Флаг, указывающий формировать ли информацию о категории (`0`) или пользовательском альбоме
     *                       (`1`):
     *                       - По умолчанию: `0`.
     *                       - Допустимые значения: `0` или `1`.
     *
     * @return array Информационная строка для категории или пользовательского альбома:
     *               - 'name'           (string): Название категории или альбома.
     *               - 'description'    (string): Описание категории или альбома.
     *               - 'count_photo'    (int):    Количество фотографий.
     *               - 'last_photo'     (string): Форматированное название последней фотографии.
     *               - 'top_photo'      (string): Форматированное название лучшей фотографии.
     *               - 'url_cat'        (string): Ссылка на категорию или альбом.
     *               - 'url_last_photo' (string): Ссылка на последнюю фотографию.
     *               - 'url_top_photo'  (string): Ссылка на лучшую фотографию.
     *
     * @throws InvalidArgumentException Выбрасывается, если входные параметры имеют некорректный тип или значение.
     * @throws PDOException             Выбрасывается, если возникают ошибки при получении данных из базы данных.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Используются константы:
     *          - TBL_CATEGORY: Таблица для хранения данных о категориях (`category`).
     *          - TBL_USERS:    Таблица для хранения данных о пользователях (`users`).
     *          - TBL_PHOTO:    Таблица для хранения данных о фотографиях (`photo`).
     *
     * @warning Убедитесь, что:
     *          - Входные параметры `$cat_id` и `$user_flag` корректны.
     *          - База данных содержит необходимые данные для выполнения запросов.
     *          - Пользователь имеет права на просмотр фотографий (если это требуется).
     */
    public function category(int $cat_id = 0, int $user_flag = 0): array;

    /**
     * Удаляет изображение с указанным идентификатором, а также все упоминания об этом изображении.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входного параметра `photo_id`.
     * 2. Получает данные об изображении из базы данных.
     * 3. Удаляет файлы изображений (полноразмерные и эскизы) с диска.
     * 4. Удаляет запись об изображении из базы данных.
     * 5. Логирует ошибки, если они возникают.
     *
     * @param int $photo_id Идентификатор удаляемого изображения:
     *                      - Должен быть положительным целым числом.
     *                      Пример: `42`.
     *
     * @return bool Возвращает:
     *              - `true`, если удаление успешно.
     *              - `false`, если произошла ошибка.
     *
     * @throws InvalidArgumentException Выбрасывается, если параметр `photo_id` имеет некорректный тип или значение.
     * @throws RuntimeException         Выбрасывается, если возникает ошибка при выполнении запросов к базе данных или
     *                                  удалении файлов.
     * @throws Exception                Выбрасывается при записи ошибок в лог.
     *
     * @note    Метод автоматически удаляет связанные записи в базе данных благодаря использованию внешних ключей.
     *
     * @warning Убедитесь, что:
     *          - Скрипт имеет необходимые права на запись и чтение для удаления файлов.
     *          - Удаление файлов и записей из базы данных необратимо. Передайте корректный идентификатор изображения.
     */
    public function del_photo(int $photo_id): bool;

    /**
     * Получает данные о новостях в зависимости от типа запроса.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входных параметров `$news_id_or_limit` и `$act`.
     * 2. Выполняет запрос к базе данных для получения данных о новостях:
     *    - Для `$act = 'id'`: Возвращает новость по её ID.
     *    - Для `$act = 'last'`: Возвращает список последних новостей с сортировкой по дате редактирования.
     * 3. Возвращает массив с данными о новостях или пустой массив, если новости не найдены.
     *
     * @param int    $news_id_or_limit Количество новостей или ID новости (в зависимости от параметра `$act`):
     *                                 - Должен быть положительным целым числом.
     *                                 Пример: `5` (для ID новости) или `10` (для количества новостей).
     * @param string $act              Тип запроса:
     *                                 - `'id'`: Получение новости по её ID.
     *                                 - `'last'`: Получение списка последних новостей.
     *
     * @return array Массив с данными о новостях. Если новостей нет, возвращается пустой массив.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный `$act` или `$news_id_or_limit`.
     * @throws RuntimeException         Выбрасывается, если произошла ошибка при выполнении запроса к базе данных.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Метод автоматически возвращает пустой массив, если новости не найдены.
     *
     * @warning Убедитесь, что:
     *          - Передаются допустимые значения для `$news_id_or_limit` и `$act`.
     *          - База данных содержит необходимые данные для выполнения запросов.
     */
    public function news(int $news_id_or_limit, string $act): array;

    /**
     * Загружает доступные языки из директории `/language/`.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование и доступность директории `/language/`.
     * 2. Перебирает поддиректории в `/language/` и загружает данные о доступных языках.
     * 3. Для каждого языка проверяет наличие корректного файла конфигурации с названием языка.
     * 4. Возвращает массив с данными о доступных языках или выбрасывает исключение, если языки не найдены.
     *
     * @return array Массив с данными о доступных языках. Каждый элемент массива содержит:
     *               - `value`: Имя директории языка (строка).
     *               - `name`: Название языка (строка).
     *
     * @throws RuntimeException Выбрасывается, если:
     *                           - Директория `/language/` недоступна или не существует.
     *                           - Ни один язык не найден в указанной директории.
     * @throws Exception         Выбрасывается при записи ошибок в лог.
     *
     * @note    Метод автоматически возвращает пустой массив, если языки не найдены.
     *
     * @warning Убедитесь, что:
     *          - Директория `/language/` содержит корректные поддиректории с файлами конфигурации.
     *          - Файлы конфигурации содержат корректное название языка.
     *          Если директория `/language/` пуста или содержит недоступные поддиректории, метод выбрасывает исключение.
     */
    public function get_languages(): array;

    /**
     * Загружает доступные темы из директории `/themes/`.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование и доступность директории `/themes/`.
     * 2. Перебирает поддиректории в `/themes/` и загружает имена доступных тем.
     * 3. Возвращает массив с именами доступных тем или выбрасывает исключение, если темы не найдены.
     *
     * @return array Массив с именами доступных тем (строки).
     *
     * @throws RuntimeException Выбрасывается, если:
     *                           - Директория `/themes/` не существует или недоступна для чтения.
     *                           - Ни одна тема не найдена в указанной директории.
     * @throws Exception         Выбрасывается при записи ошибок в лог.
     *
     * @note    Метод автоматически возвращает пустой массив, если темы не найдены.
     *
     * @warning Убедитесь, что:
     *          - Директория `/themes/` существует и содержит корректные поддиректории.
     *          - Поддиректории находятся внутри директории `/themes/`.
     *          Если директория `/themes/` пуста или содержит недоступные поддиректории, метод выбрасывает исключение.
     */
    public function get_themes(): array;

    /**
     * Генерирует блок данных для вывода изображений различных типов.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входных параметров `$type` и `$id_photo`.
     * 2. Проверяет права пользователя на просмотр изображений.
     * 3. Формирует данные для вывода изображения в зависимости от типа:
     *    - 'top':  Лучшее изображение (по рейтингу).
     *    - 'last': Последнее загруженное изображение.
     *    - 'cat':  Изображение из конкретной категории по `$id_photo`.
     *    - 'rand': Любое случайное изображение.
     * 4. Возвращает массив данных для вывода изображения или данные по умолчанию, если изображение недоступно.
     *
     * @param string $type     Тип изображения:
     *                         - 'top':  Лучшее изображение (по рейтингу).
     *                         - 'last': Последнее загруженное изображение.
     *                         - 'cat':  Изображение из конкретной категории (требует указания `$id_photo`).
     *                         - 'rand': Любое случайное изображение.
     *                         По умолчанию: 'top'.
     *                         Допустимые значения: 'top', 'last', 'cat', 'rand'.
     * @param int    $id_photo Идентификатор фото. Используется только при `$type == 'cat'`.
     *                         Должен быть целым числом >= `0`.
     *                         По умолчанию: `0`.
     *
     * @return array Массив данных для вывода изображения:
     *               - 'name_block'           (string):      Название блока изображения (например, "Лучшее фото").
     *               - 'url'                  (string):      URL для просмотра полного изображения.
     *               - 'thumbnail_url'        (string):      URL для миниатюры изображения.
     *               - 'name'                 (string):      Название изображения.
     *               - 'description'          (string):      Описание изображения.
     *               - 'category_name'        (string):      Название категории.
     *               - 'category_description' (string):      Описание категории.
     *               - 'rate'                 (string):      Рейтинг изображения (например, "Рейтинг: 5/10").
     *               - 'url_user'             (string|null): URL профиля пользователя, добавившего изображение.
     *               - 'real_name'            (string):      Реальное имя пользователя.
     *               - 'category_url'         (string):      URL категории или пользовательского альбома.
     *               - 'width'                (int):         Ширина изображения после масштабирования.
     *               - 'height'               (int):         Высота изображения после масштабирования.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан недопустимый `$type` или `$id_photo < 0`.
     * @throws RuntimeException         Выбрасывается, если файл изображения недоступен или не существует.
     * @throws Exception                Выбрасывается при записи ошибок в лог.
     *
     * @note    Если изображение недоступно, метод возвращает данные по умолчанию.
     *
     * @warning Убедитесь, что:
     *          - Пользователь имеет право на просмотр изображений.
     *          - Передаются допустимые значения для `$type` и `$id_photo`.
     */
    public function create_photo(string $type = 'top', int $id_photo = 0): array;

    /**
     * Добавляет новую оценку в таблицу и возвращает среднюю оценку фотографии.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входных параметров `$table`, `$photo_id`, `$user_id` и `$rate_value`.
     * 2. Вставляет новую оценку в указанную таблицу.
     * 3. Пересчитывает среднюю оценку для фотографии автоматически через триггеры и функции в СУБД.
     * 4. Возвращает среднюю оценку для указанной фотографии или `0`, если оценок нет.
     *
     * @param string $table      Имя таблицы для вставки оценки:
     *                           - `'rate_user'`: Таблица с оценками фотографий от пользователей.
     *                           - `'rate_moder'`: Таблица с оценками фотографий от модераторов.
     * @param int    $photo_id   ID фотографии:
     *                           - Должен быть положительным целым числом.
     * @param int    $user_id    ID пользователя:
     *                           - Должен быть положительным целым числом.
     * @param int    $rate_value Значение оценки:
     *                           - Должен быть целым числом в диапазоне допустимых значений (например, 1–5).
     *
     * @return float Возвращает число с плавающей точкой, представляющее среднюю оценку.
     *               Если оценок нет, возвращается `0`.
     *
     * @throws InvalidArgumentException Выбрасывается, если переданы некорректные параметры.
     * @throws RuntimeException         Выбрасывается, если не удалось добавить оценку.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Метод автоматически пересчитывает среднюю оценку через триггеры и функции в СУБД.
     *
     * @warning Убедитесь, что:
     *          - Параметр `$table` соответствует одной из допустимых таблиц (`'rate_user'` или `'rate_moder'`).
     *          - В СУБД настроены триггеры и функции для перерасчета средней оценки.
     */
    public function process_rating(string $table, int $photo_id, int $user_id, int $rate_value): float;

    /**
     * Ищет файл действия по указанному имени.
     *
     * Метод обязан:
     * - Принимать имя действия как параметр (или NULL)
     * - Определять корректное имя действия и соответствующий файл
     * - Возвращать массив с именем действия и полным путём к файлу
     * - Выбрасывать RuntimeException, если файл действия не найден
     * - Обеспечивать совместимость с веб-запросами и CLI
     *
     * @param string|null $action Имя действия из внешнего источника
     *                            Может быть NULL → тогда используется действие по умолчанию
     *
     * @return array [
     *               'action_name' => string,
     *               'full_path'   => string
     *              ]
     *              Должен вернуть пару: имя действия + путь к файлу
     *
     * @throws RuntimeException Если файл действия не найден ни в одной директории
     * @throws Exception        При ошибках проверки входных данных
     *
     * @note    Реализация должна использовать стандартные средства проверки безопасности
     *          Порядок поиска файла определяется реализацией
     *
     * @warning Не передавайте недопустимые или небезопасные значения $action — это может привести к ошибкам
     *          Реализация обязана обеспечить защиту от инъекций и проверку доступности файлов
     */
    public function find_action_file(?string $action): array;

    /**
     * Формирует массив данных для меню в зависимости от типа и активного пункта.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность входных параметров:
     *    - Тип меню должен быть равен одной из констант: SHORT_MENU или LONG_MENU.
     *    - Активный пункт меню должен быть строкой.
     * 2. Определяет тип меню:
     *    - SHORT_MENU: Краткое горизонтальное меню.
     *    - LONG_MENU: Полное вертикальное меню.
     * 3. Получает данные меню из базы данных:
     *    - Условие выборки зависит от типа меню.
     *    - Данные фильтруются на основе прав доступа текущего пользователя.
     * 4. Для каждого пункта меню проверяются права доступа:
     *    - Если пункт видим, он добавляется в результат.
     *    - URL формируется на основе активного пункта меню.
     *    - Название пункта локализуется с использованием языковых строк.
     * Метод предназначен для создания данных меню.
     *
     * @param string $action Активный пункт меню:
     *                       - Указывается строка, соответствующая активному пункту меню (например, 'home', 'profile').
     * @param int    $menu   Тип меню:
     *                       - SHORT_MENU (0): Краткое горизонтальное меню.
     *                       - LONG_MENU (1): Полное вертикальное меню.
     *                       Другие значения недопустимы и приведут к выбросу исключения InvalidArgumentException.
     *
     * @return array Массив с данными для меню.
     *               Каждый элемент массива содержит:
     *               - Ключ 'url': URL пункта меню (null, если пункт активен).
     *               - Ключ 'name': Название пункта меню (локализованное или дефолтное значение).
     *               Если меню пустое, возвращается пустой массив.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный $menu или $action.
     * @throws RuntimeException         Выбрасывается, если произошла ошибка при выполнении запроса к базе данных.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Данные для меню берутся из таблицы базы данных.
     *          Константы SHORT_MENU и LONG_MENU определяют тип меню:
     *          - SHORT_MENU: Краткое горизонтальное меню.
     *          - LONG_MENU: Полное вертикальное меню.
     *
     * @warning Убедитесь, что передаваемые параметры корректны, так как это может привести к ошибкам.
     *          Также убедитесь, что права доступа пользователя настроены правильно.
     */
    public function create_menu(string $action, int $menu): array;

    /**
     * Формирует данные для блока пользователя.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет статус авторизации пользователя:
     *    - Если пользователь не авторизован, формируется блок со ссылками на вход, восстановление пароля и регистрацию.
     *    - Если пользователь авторизован, формируется блок с приветствием, группой и аватаром.
     * 2. Для авторизованных пользователей проверяется существование аватара:
     *    - Если аватар недоступен или имеет недопустимый формат, используется дефолтный аватар.
     * 3. Возвращает массив данных для блока пользователя, который используется для отображения в шаблоне.
     *
     * @return array Массив с данными для блока пользователя:
     *               - Для неавторизованных пользователей:
     *                 - 'NAME_BLOCK': Название блока (локализованное).
     *                 - 'CSRF_TOKEN': CSRF-токен для защиты формы.
     *                 - 'L_LOGIN', 'L_PASSWORD', 'L_ENTER', 'L_FORGOT_PASSWORD', 'L_REGISTRATION': Локализованные
     *                    строки.
     *                 - 'U_LOGIN', 'U_FORGOT_PASSWORD', 'U_REGISTRATION': URL для входа, восстановления пароля и
     *                    регистрации.
     *               - Для авторизованных пользователей:
     *                 - 'NAME_BLOCK': Название блока (локализованное).
     *                 - 'L_HI_USER': Приветствие с именем пользователя (локализованное).
     *                 - 'L_GROUP': Группа пользователя (локализованная строка).
     *                 - 'U_AVATAR': URL аватара (или дефолтного аватара, если файл недоступен или некорректен).
     *
     * @throws RuntimeException       Выбрасывается, если объект пользователя не установлен или данные некорректны.
     * @throws Random\RandomException Выбрасывается при ошибке генерации CSRF-токена.
     * @throws Exception              Выбрасывается при ошибках проверки MIME-типа файла или логирования.
     *
     * @note    Статус авторизации проверяется через внутренние данные пользователя.
     *          Дефолтный аватар определяется конфигурацией системы.
     *
     * @warning Убедитесь, что объект пользователя корректно установлен перед вызовом метода.
     *          Также убедитесь, что конфигурация аватаров настроена правильно.
     */
    public function template_user(): array;

    /**
     * Возвращает массив данных для отображения статистики сайта в шаблоне.
     *
     * Метод является частью контракта и должен быть реализован в классе.
     * Он определяет обязательное поведение:
     * - Получение общей статистики сайта
     * - Поддержка локализации подписей
     * - Формирование чётко заданной структуры данных
     * - Совместимость с любыми СУБД
     *
     * Реализация обязана обеспечивать:
     * - Вывод данных в строго заданной структуре ассоциативного массива
     * - Корректную фильтрацию пользователей:
     *   - Только активные
     *   - Только подтверждённые
     *   - Не удалённые
     * - Отображение онлайн-пользователей с выделением заблокированных
     *
     * @return array Ассоциативный массив данных для вывода статистики:
     *               - NAME_BLOCK:        Название блока статистики (локализованное).
     *               - L_STAT_REGIST:     Подпись для количества зарегистрированных пользователей.
     *               - D_STAT_REGIST:     Количество зарегистрированных пользователей.
     *               - L_STAT_PHOTO:      Подпись для количества фотографий.
     *               - D_STAT_PHOTO:      Количество фотографий.
     *               - L_STAT_CATEGORY:   Подпись для количества категорий.
     *               - D_STAT_CATEGORY:   Количество категорий (включая пользовательские альбомы).
     *               - L_STAT_USER_ADMIN: Подпись для количества администраторов.
     *               - D_STAT_USER_ADMIN: Количество администраторов.
     *               - L_STAT_USER_MODER: Подпись для количества модераторов.
     *               - D_STAT_USER_MODER: Количество модераторов.
     *               - L_STAT_RATE_USER:  Подпись для количества пользовательских оценок.
     *               - D_STAT_RATE_USER:  Количество пользовательских оценок.
     *               - L_STAT_RATE_MODER: Подпись для количества модераторских оценок.
     *               - D_STAT_RATE_MODER: Количество модераторских оценок.
     *               - L_STAT_ONLINE:     Подпись для онлайн-пользователей.
     *               - D_STAT_ONLINE:     Список онлайн-пользователей (HTML-ссылки) или сообщение об отсутствии
     *                                    онлайн-пользователей. Пользователи в бане дополнительно выделяются:
     *                                    - Иконкой `<i class="ban icon"></i>`
     *                                    - Перечёркнутым именем `<s>...</s>`.
     *
     * @throws RuntimeException Выбрасывается при ошибке получения данных.
     * @throws Exception        При критических ошибках выполнения.
     *
     * @note    Реализация должна обеспечивать:
     *          - Локализацию всех подписей
     *          - Чистый вывод данных
     *          - Защиту от инъекций
     *          - Совместимость с различными СУБД
     *
     * @warning Нарушение контракта может привести к некорректной работе шаблона и отображения данных.
     *          Убедитесь, что структура возвращаемого массива соответствует заданному формату.
     */
    public function template_stat(): array;

    /**
     * Формирует список пользователей, загрузивших наибольшее количество изображений.
     *
     * Метод является частью контракта и должен быть реализован в классе.
     * Он обязан:
     * - Возвращать список пользователей по количеству загруженных фотографий
     * - Учитывать только активированных пользователей, с подтверждённой почтой и не удалённых
     * - Помечать заблокированных пользователей булевым полем `banned`
     * - Добавлять запись "пустого" пользователя, если данных нет
     * - Ограничивать вывод заданным количеством записей (`$best_user`)
     * - Формировать данные в строго заданной структуре ассоциативного массива
     *
     * @param int $best_user Количество лучших пользователей для вывода:
     *                       - Должно быть положительным целым числом.
     *                       Пример: 5.
     *                       Если передано недопустимое значение, выбрасывается исключение InvalidArgumentException.
     *
     * @return array Массив данных для вывода в шаблон:
     *               - NAME_BLOCK:   Название блока (локализованное).
     *               - L_USER_NAME:  Подпись для имени пользователя (локализованная строка).
     *               - L_USER_PHOTO: Подпись для количества фотографий (локализованная строка).
     *               - user_url:     Ссылка на профиль пользователя (null, если данных нет).
     *               - user_name:    Имя пользователя ('---', если данных нет).
     *               - user_photo:   Количество загруженных фотографий ('-', если данных нет).
     *               - banned:       Булево значение, указывающее, находится ли пользователь в бане.
     *
     * @throws InvalidArgumentException Выбрасывается, если параметр `$best_user` не является положительным целым числом.
     * @throws Exception                При критических ошибках выполнения.
     *
     * @note    Если запрос к базе данных не возвращает данных, добавляется запись "пустого" пользователя:
     *          - user_url: null.
     *          - user_name: '---'.
     *          - user_photo: '-'.
     *          - banned: false
     *
     * @warning Нарушение контракта может привести к некорректной работе шаблона и отображения данных.
     *          Убедитесь, что структура возвращаемого массива соответствует заданному формату.
     */
    public function template_best_user(int $best_user = 1): array;

    /**
     * Вычисляет размеры для вывода эскиза изображения.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование файла.
     * 2. Получает реальные размеры изображения.
     * 3. Вычисляет ширину и высоту эскиза на основе реальных размеров изображения и конфигурационных параметров:
     *    - `temp_photo_w`: Целевая ширина эскиза (в пикселях).
     *    - `temp_photo_h`: Целевая высота эскиза (в пикселях).
     * 4. Если изображение меньше целевого размера, возвращаются оригинальные размеры.
     * 5. В противном случае размеры масштабируются пропорционально.
     *
     * @param string $path_image Путь к файлу изображения:
     *                           - Путь должен быть абсолютным.
     *                           - Файл должен существовать и быть доступным для чтения.
     *
     * @return array Массив с шириной и высотой эскиза:
     *               - Ключ `'width'` (int): Ширина эскиза (целое число ≥ 0).
     *               - Ключ `'height'` (int): Высота эскиза (целое число ≥ 0).
     *               Размеры могут совпадать с оригинальными размерами изображения,
     *               если оно меньше целевого размера.
     *
     * @throws RuntimeException Выбрасывается в следующих случаях:
     *                           - Если файл не существует.
     *                           - Если не удалось получить размеры изображения.
     *
     * @warning Метод зависит от корректности данных в конфигурации (`temp_photo_w` и `temp_photo_h`).
     *          Если эти параметры некорректны, результат может быть непредсказуемым.
     */
    public function size_image(string $path_image): array;

    /**
     * Изменяет размер изображения.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность путей к исходному изображению и файлу эскиза.
     * 2. Проверяет существование и доступность исходного изображения для чтения.
     * 3. Проверяет доступность директории для сохранения эскиза для записи.
     * 4. Получает размеры исходного изображения и проверяет их на соответствие максимальным значениям.
     * 5. Рассчитывает размеры эскиза на основе конфигурации (`temp_photo_w`, `temp_photo_h`).
     * 6. Если файл эскиза уже существует и его размеры совпадают с расчётными, метод завершает работу.
     * 7. Определяет MIME-тип исходного изображения.
     * 8. Выбирает библиотеку для обработки изображения в следующем порядке приоритета:
     *    - GraphicsMagick (если доступен),
     *    - ImageMagick (если доступен),
     *    - GD (если предыдущие библиотеки недоступны или вызвали ошибку).
     *
     * @param string $full_path      Путь к исходному изображению:
     *                               - Путь должен быть абсолютным.
     *                               - Файл должен существовать и быть доступным для чтения.
     * @param string $thumbnail_path Путь для сохранения эскиза:
     *                               - Путь должен быть абсолютным.
     *                               - Директория должна быть доступна для записи.
     *
     * @return bool True, если операция выполнена успешно, иначе False.
     *
     * @throws InvalidArgumentException Выбрасывается, если пути к файлам некорректны или имеют недопустимый формат.
     * @throws RuntimeException         Выбрасывается, если возникли ошибки при проверке файлов, директорий или
     *                                  размеров изображения.
     * @throws Exception                Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод использует следующие константы для ограничения размеров исходного изображения:
     *          - `MAX_IMAGE_WIDTH`: Максимальная ширина исходного изображения (в пикселях). Значение: 5000.
     *          - `MAX_IMAGE_HEIGHT`: Максимальная высота исходного изображения (в пикселях). Значение: 5000.
     *
     * @warning Метод зависит от корректности данных в конфигурации (`temp_photo_w`, `temp_photo_h`).
     *          Если эти параметры некорректны, результат может быть непредсказуемым.
     *          Убедитесь, что пути к файлам и директориям корректны перед вызовом метода.
     */
    public function image_resize(string $full_path, string $thumbnail_path): bool;

    /**
     * Возвращает данные для отсутствующего изображения.
     *
     * Этот метод формирует массив данных, который используется для представления информации об отсутствующем
     * изображении. Это может быть полезно, например, если изображение не найдено или недоступно. Метод
     * использует константы приложения для формирования URL-адресов и путей.
     *
     * @return array Массив данных об изображении или его отсутствии:
     *               - 'url'                  (string): URL полноразмерного изображения.
     *               - 'thumbnail_url'        (string): URL эскиза изображения.
     *               - 'name'                 (string): Название изображения. Значение по умолчанию: `'No photo'`.
     *               - 'description'          (string): Описание изображения. Значение по умолчанию: `'No photo
     *                                                  available'`.
     *               - 'category_name'        (string): Название категории. Значение по умолчанию: `'No category'`.
     *               - 'category_description' (string): Описание категории. Значение по умолчанию: `'No category
     *                                                  available'`.
     *               - 'rate'                 (string): Рейтинг изображения. Значение по умолчанию: `'Rate: 0/0'`.
     *               - 'url_user'             (string): URL пользователя. Значение по умолчанию: пустая строка (`''`).
     *               - 'real_name'            (string): Имя пользователя. Значение по умолчанию: `'No user'`.
     *               - 'full_path'            (string): Полный путь к изображению. Формируется на основе конфигурации.
     *               - 'thumbnail_path'       (string): Полный путь к эскизу. Формируется на основе конфигурации.
     *               - 'file'                 (string): Имя файла. Значение по умолчанию: `'no_foto.png'`.
     *
     * @warning Метод зависит от корректности данных в константах. Если эти параметры некорректны, результат может
     *          быть непредсказуемым.
     */
    public function no_photo(): array;

    /**
     * Выводит изображение через HTTP.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование и доступность файла:
     *    - Если файл не существует или недоступен для чтения, отправляется HTTP-статус `404 Not Found`.
     * 2. Определяет MIME-тип файла:
     *    - Если MIME-тип не соответствует изображению, отправляется HTTP-статус `500 Internal Server Error`.
     * 3. Проверяет размер файла:
     *    - Если размер превышает 10 МБ или неизвестен, отправляется HTTP-статус `413 Payload Too Large`.
     * 4. Устанавливает заголовки для вывода изображения:
     *    - `Content-Type`: MIME-тип файла.
     *    - `Content-Disposition`: Имя файла для заголовка.
     *    - `Content-Length`: Размер файла.
     *    - Дополнительные заголовки безопасности.
     * 5. Отправляет содержимое файла через HTTP.
     * 6. Завершает выполнение скрипта после отправки заголовков и содержимого файла.
     *
     * @param string $full_path Полный путь к файлу:
     *                          - Путь должен быть абсолютным.
     *                          - Файл должен существовать и быть доступным для чтения.
     * @param string $name_file Имя файла для заголовка `Content-Disposition`:
     *                          - Имя должно быть корректным (например, без запрещённых символов).
     *
     * @return void Метод ничего не возвращает. Завершает выполнение скрипта после отправки заголовков и содержимого
     *              файла.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод завершает выполнение скрипта (`exit`), отправляя заголовки и содержимое файла.
     *          Дополнительные заголовки безопасности:
     *          - `X-Content-Type-Options: nosniff`
     *          - `X-Frame-Options: DENY`
     *          - `X-XSS-Protection: 1; mode=block`
     *          - `Referrer-Policy: no-referrer`
     *          - `Content-Security-Policy: default-src 'self'; img-src 'self' data:;`
     *
     * @warning Метод завершает выполнение скрипта (`exit`), отправляя заголовки и содержимое файла.
     *          Убедитесь, что файл существует и доступен для чтения перед вызовом метода.
     */
    #[NoReturn] public function image_attach(string $full_path, string $name_file): void;

    /**
     * Корректировка расширения файла в соответствии с его MIME-типом.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет путь к файлу на корректность.
     * 2. Определяет реальный MIME-тип файла.
     * 3. Проверяет соответствие MIME-типа поддерживаемым форматам:
     *    - 'image/jpeg' -> 'jpg'
     *    - 'image/png' -> 'png'
     *    - 'image/gif' -> 'gif'
     *    - 'image/webp' -> 'webp'
     *    - 'image/tiff' -> 'tiff'
     *    - 'image/svg+xml' -> 'svg'
     *    - 'image/bmp' -> 'bmp'
     *    - 'image/x-icon' -> 'ico'
     *    - 'image/avif' -> 'avif'
     *    - 'image/heic' -> 'heic'
     *    - 'image/vnd.adobe.photoshop' -> 'psd'
     *    - 'image/x-canon-cr2' -> 'cr2'
     *    - 'image/x-nikon-nef' -> 'nef'
     *    - 'image/x-xbitmap' -> 'xbm'
     *    - 'image/x-portable-anymap' -> 'pnm'
     *    - 'image/x-pcx' -> 'pcx'
     * 4. Если расширение отсутствует или некорректное, оно добавляется или исправляется.
     *
     * @param string $full_path Полный путь к файлу:
     *                          - Путь должен быть абсолютным.
     *                          - Файл должен существовать и быть доступным для чтения.
     *
     * @return string Полный путь к файлу с правильным расширением:
     *                - Если расширение было изменено или добавлено, возвращается новый путь.
     *                - Если расширение уже корректное, возвращается исходный путь.
     *
     * @throws InvalidArgumentException Выбрасывается, если путь к файлу имеет недопустимый формат.
     * @throws RuntimeException         Выбрасывается, если:
     *                                  - MIME-тип файла не поддерживается.
     *                                  - Файл недоступен для чтения.
     * @throws Exception               Выбрасывается при возникновении ошибок логирования информации.
     *
     * @warning Метод завершает выполнение с ошибкой, если MIME-тип файла не поддерживается.
     *          Убедитесь, что файл существует и доступен для чтения перед вызовом метода.
     */
    public function fix_file_extension(string $full_path): string;

    /**
     * Удаляет директорию и её содержимое, предварительно проверяя права доступа.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет существование указанной директории.
     * 2. Проверяет права доступа к директории (должна быть доступна для записи).
     * 3. Рекурсивно удаляет все файлы и поддиректории внутри директории.
     * 4. Удаляет саму директорию.
     *
     * @param string $path Путь к директории:
     *                     - Должен быть строкой, указывающей на существующую директорию.
     *                     - Директория должна быть доступна для записи.
     *
     * @return bool Возвращает `true`, если директория успешно удалена.
     *
     * @throws RuntimeException Выбрасывается в следующих случаях:
     *                           - Если директория не существует.
     *                           - Если директория недоступна для записи.
     *                           - Если не удалось удалить файл или поддиректорию внутри директории.
     *                           - Если не удалось удалить саму директорию.
     *
     * @note    Метод рекурсивно удаляет все файлы и поддиректории внутри директории.
     *
     * @warning Используйте этот метод с осторожностью, так как удаление директории необратимо.
     *          Убедитесь, что переданная директория действительно должна быть удалена.
     */
    public function remove_directory(string $path): bool;

    /**
     * Создаёт директории для категории.
     *
     * Этот метод выполняет следующие действия:
     * 1. Формирует пути для директорий галереи и миниатюр на основе конфигурации.
     * 2. Проверяет права доступа к родительским директориям.
     * 3. Рекурсивно создаёт директории для галереи и миниатюр.
     *
     * @param string $directory_name Имя директории:
     *                               - Должен быть строкой, содержащей только допустимые символы для имён директорий.
     *                               - Не должен содержать запрещённых символов (например, `\/:*?"<>|`).
     *
     * @return bool Возвращает `true`, если директории успешно созданы.
     *
     * @throws RuntimeException Выбрасывается в следующих случаях:
     *                           - Если родительская директория недоступна для записи.
     *                           - Если не удалось создать директории.
     *
     * @warning Используйте этот метод с осторожностью, так как он создаёт директории.
     */
    public function create_directory(string $directory_name): bool;
}
