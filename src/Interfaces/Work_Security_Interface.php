<?php

/**
 * Интерфейс для работы с безопасностью.
 *
 * Этот файл содержит интерфейс `Work_Security_Interface`, который определяет методы для обеспечения безопасности
 * приложения. Классы, реализующие этот интерфейс, предоставляют функционал для защиты от распространённых угроз,
 * таких как SQL-инъекции, XSS-атаки, спам-боты и другие:
 * - Проверка URL на наличие вредоносного кода.
 * - Проверка входных данных из различных источников ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES).
 * - Проверка содержимого полей на соответствие регулярным выражениям или другим условиям.
 * - Генерация математических CAPTCHA-вопросов для защиты от спам-ботов.
 * - Фильтрация email-адресов для защиты от парсинга ботами.
 *
 * @author    Dark Dayver
 * @version   0.5.0
 * @since     2025-05-29
 * @namespace PhotoRigma\\Interfaces
 * @package   PhotoRigma
 *
 * @section   WorkSecurityInterface_Main_Functions Основные функции
 *            - Проверка URL на наличие вредоносного кода.
 *            - Проверка входных данных из различных источников ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES).
 *            - Проверка содержимого полей на соответствие регулярным выражениям или другим условиям.
 *            - Генерация математических CAPTCHA-вопросов для защиты от спам-ботов.
 *            - Фильтрация email-адресов для защиты от парсинга ботами.
 *
 * @note      Этот файл является частью системы PhotoRigma и играет ключевую роль в обеспечении безопасности
 *            приложения. Реализованы меры для предотвращения атак, таких как XSS, SQL-инъекции и спам-боты. Все
 *            методы данного интерфейса рекомендуется вызывать через класс `Work`.
 *
 * @copyright Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license   MIT License {@link https://opensource.org/licenses/MIT}
 *            Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *            сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *            предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *            - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use Random;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    /** @noinspection ForgottenDebugOutputInspection */
    error_log(
        date('H:i:s') . ' [ERROR] | ' . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . ' | ' . __FILE__ . ' | Попытка прямого вызова файла'
    );
    die('HACK!');
}

/**
 * Интерфейс для работы с безопасностью.
 *
 * Этот интерфейс определяет методы, которые должны быть реализованы классами, отвечающими за безопасность приложения.
 * Все методы вызываются через класс `Work`. Интерфейс охватывает такие задачи, как:
 * - Проверка URL на наличие вредоносного кода (`url_check`).
 * - Проверка входных данных из различных источников (`check_input`).
 * - Проверка содержимого полей на соответствие регулярным выражениям или другим условиям (`check_field`).
 * - Генерация математических CAPTCHA-вопросов для защиты от спам-ботов (`gen_captcha`).
 * - Фильтрация email-адресов для защиты от парсинга ботами (`filt_email`).
 * Методы интерфейса предназначены для обеспечения безопасности приложения и защиты от распространённых угроз, таких
 * как SQL-инъекции, XSS-атаки, спам-боты и другие.
 *
 * @note    Все методы данного интерфейса рекомендуется вызывать через класс `Work`, так как их поведение может быть
 *          непредсказуемым при прямом вызове.
 *
 * @warning Некорректная реализация методов может привести к уязвимостям в системе, таким как доступ к данным через
 *          межсайтовый скриптинг (XSS) или SQL-инъекции.
 */
interface Work_Security_Interface
{
    /**
     * Проверяет URL на наличие вредоносного кода.
     *
     * Этот метод выполняет следующие действия:
     * 1. Анализирует строку запроса из глобального массива `$_SERVER['QUERY_STRING']`.
     * 2. Проверяет строку запроса на наличие запрещённых паттернов, определённых в конфигурации.
     * 3. Логирует информацию о попытке взлома, если обнаружены запрещённые паттерны.
     *
     * @return bool True, если URL безопасен (не содержит запрещённых паттернов), иначе False.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод работает с глобальным массивом `$_SERVER['QUERY_STRING']`.
     *          Убедитесь, что этот массив доступен и содержит корректные данные.
     *
     * @warning Метод зависит от корректности данных в конфигурации правил проверки.
     *          Если правила некорректны, результат может быть непредсказуемым.
     */
    public function url_check(): bool;

    /**
     * Проверяет входные данные из различных источников.
     *
     * Этот метод выполняет проверку данных из различных источников ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES) на
     * соответствие заданным условиям. Поддерживаются следующие типы проверок:
     * - Проверка наличия поля в источнике данных (параметр 'isset').
     * - Проверка, что значение поля не пустое (параметр 'empty').
     * - Проверка значения поля по регулярному выражению (параметр 'regexp').
     * - Проверка, что значение поля не равно нулю (параметр 'not_zero').
     * - Проверка размера файла для $_FILES (параметр 'max_size') и его MIME-типа.
     *
     * @param string $source_name Источник данных ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES):
     *                            - Должен быть одним из допустимых значений: '_GET', '_POST', '_SESSION', '_COOKIE',
     *                              '_FILES'.
     * @param string $field       Поле для проверки (имя ключа в массиве источника данных):
     *                            - Указывается имя ключа, которое необходимо проверить.
     * @param array  $options     Дополнительные параметры проверки:
     *                            - Ключ 'isset' (bool, опционально): Проверять наличие поля в источнике данных.
     *                            - Ключ 'empty' (bool, опционально): Проверять, что значение поля не пустое.
     *                            - Ключ 'regexp' (string|false, опционально): Регулярное выражение для проверки
     *                              значения поля.
     *                            - Ключ 'not_zero' (bool, опционально): Проверять, что значение поля не равно нулю.
     *                            - Ключ 'max_size' (int, опционально): Максимальный размер файла (в байтах) для
     *                              $_FILES.
     *
     * @return bool True, если данные прошли проверку, иначе False.
     *              Для $_FILES также учитывается корректность MIME-типа и размера файла.
     *
     * @throws RuntimeException Выбрасывается, если MIME-тип загруженного файла не поддерживается.
     * @throws Exception        Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Для источника данных `_SESSION` используется внутреннее свойство класса.
     *          Метод зависит от корректности данных в источниках ($_GET, $_POST, $_SESSION, $_COOKIE, $_FILES).
     *          Если источник данных повреждён или содержит некорректные значения, результат может быть
     *          непредсказуемым.
     *
     * @warning Убедитесь, что переданные параметры проверки ($options) корректны и соответствуют требованиям.
     */
    public function check_input(string $source_name, string $field, array $options = []): bool;

    /**
     * Проверяет содержимое поля на соответствие регулярному выражению или другим условиям.
     *
     * Этот метод выполняет следующие проверки:
     * 1. Если задано регулярное выражение ($regexp):
     *    - Проверяет корректность регулярного выражения.
     *    - Проверяет соответствие значения поля этому выражению.
     * 2. Если флаг $not_zero установлен, проверяет, что значение поля не равно '0'.
     * 3. Проверяет, что значение поля не содержит запрещённых паттернов из конфигурации.
     *
     * @param string       $field    Значение поля для проверки:
     *                               - Указывается строковое значение, которое необходимо проверить.
     * @param string|false $regexp   Регулярное выражение (необязательно). Если задано, значение должно соответствовать
     *                               этому выражению. Если регулярное выражение некорректно, метод завершает выполнение
     *                               с ошибкой.
     * @param bool         $not_zero Флаг, указывающий, что значение не должно быть числом 0:
     *                               - Если флаг установлен, а значение равно '0', проверка завершается с ошибкой.
     *
     * @return bool True, если поле прошло все проверки, иначе False.
     *              Проверки включают соответствие регулярному выражению, отсутствие запрещённых паттернов
     *              и выполнение условия $not_zero (если оно задано).
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования информации.
     *
     * @note    Метод использует конфигурацию для проверки на наличие запрещённых паттернов.
     *          Конфигурация должна содержать массив скомпилированных регулярных выражений.
     *
     * @warning Метод зависит от корректности данных в конфигурации правил проверки.
     *          Если правила некорректны, результат может быть непредсказуемым.
     *          Также важно убедиться, что регулярное выражение ($regexp) корректно перед использованием.
     */
    public function check_field(string $field, string|false $regexp = false, bool $not_zero = false): bool;

    /**
     * Генерирует математический CAPTCHA-вопрос и ответ.
     *
     * Этот метод выполняет следующие действия:
     * 1. Генерирует случайные числа в диапазоне от 1 до 9.
     * 2. Формирует математическое выражение, которое может включать сложение (`+`) или умножение (`x`) с
     *    использованием скобок.
     * 3. Вычисляет правильный ответ для сгенерированного выражения.
     * Метод используется для защиты от спам-ботов.
     *
     * @return array Массив с ключами 'question' и 'answer':
     *               - Ключ 'question' содержит строку математического выражения (например, "2 x (3 + 4)").
     *               - Ключ 'answer' содержит целочисленный результат вычисления (например, 14).
     *
     * @throws Random\RandomException Выбрасывается, если произошла ошибка при генерации случайных чисел.
     *
     * @note    Метод использует криптографически безопасную функцию для генерации случайных чисел.
     *          Если требуется замена на менее безопасную функцию, это должно быть явно указано в конфигурации.
     *
     * @warning Убедитесь, что PHP поддерживает криптографически безопасные функции генерации случайных чисел.
     */
    public function gen_captcha(): array;

    /**
     * Заменяет символы в email-адресах для защиты от парсинга ботами.
     *
     * Этот метод выполняет следующие действия:
     * 1. Проверяет корректность формата email.
     * 2. Если email некорректен или пуст, возвращает пустую строку.
     * 3. Заменяет символы '@' и '.' на '[at]' и '[dot]' соответственно.
     * Метод предназначен для затруднения автоматического парсинга email-адресов ботами.
     *
     * @param string $email Email-адрес для обработки:
     *                      - Должен быть непустым и соответствовать формату email (например, "example@local.com").
     *                      - Если email некорректен или пуст, метод возвращает пустую строку.
     *
     * @return string Обработанный email-адрес, где символы '@' и '.' заменены на '[at]' и '[dot]'.
     *                Если входной email некорректен или пуст, возвращается пустая строка.
     *
     * @throws Exception Выбрасывается при возникновении ошибок логирования.
     *
     * @note    Метод использует базовую проверку формата email.
     *          Если требуется более строгая валидация, следует учитывать дополнительные правила.
     *
     * @warning Убедитесь, что входной email соответствует формату перед вызовом метода.
     *          Если email некорректен или пуст, метод вернёт пустую строку.
     */
    public function filt_email(string $email): string;
}
