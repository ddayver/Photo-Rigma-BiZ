<?php

/**
 * @file        include/work_corelogic.php
 * @brief       Файл содержит класс Work_CoreLogic, который отвечает за выполнение базовой логики приложения.
 *
 * @author      Dark Dayver
 * @version     0.4.0
 * @date        2025-02-13
 * @namespace   PhotoRigma\\Classes
 *
 * @details     Этот файл содержит класс `Work_CoreLogic`, который реализует интерфейс `Work_CoreLogic_Interface`.
 *              Класс предоставляет методы для выполнения ключевых операций приложения, таких как:
 *              - Работа с категориями и альбомами (метод `category`).
 *              - Управление изображениями (методы `del_photo`, `create_photo`).
 *              - Получение данных о новостях, языках и темах (методы `news`, `get_languages`, `get_themes`).
 *              Все методы зависят от конфигурации приложения и данных, полученных из базы данных.
 *
 * @see         PhotoRigma::Classes::Work_CoreLogic_Interface Интерфейс, который реализует данный класс.
 * @see         PhotoRigma::Classes::Database Класс для работы с базой данных.
 * @see         PhotoRigma::Classes::Work_Helper::clean_field() Метод для очистки данных.
 * @see         index.php Файл, который подключает work_corelogic.php.
 *
 * @note        Этот файл является частью системы PhotoRigma и играет ключевую роль в выполнении базовой логики приложения.
 *
 * @copyright   Copyright (c) 2025 Dark Dayver. Все права защищены.
 * @license     MIT License (https://opensource.org/licenses/MIT)
 *              Разрешается использовать, копировать, изменять, объединять, публиковать, распространять, сублицензировать
 *              и/или продавать копии программного обеспечения, а также разрешать лицам, которым предоставляется данное
 *              программное обеспечение, делать это при соблюдении следующих условий:
 *              - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые части
 *                программного обеспечения.
 */

namespace PhotoRigma\Classes;

// Предотвращение прямого вызова файла
use DirectoryIterator;
use Exception;
use InvalidArgumentException;
use PDOException;
use RuntimeException;

use function PhotoRigma\Include\log_in_file;

if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . " [ERROR] | " . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . " | " . __FILE__ . " | Попытка прямого вызова файла"
    );
    die("HACK!");
}

/**
 * @interface Work_CoreLogic_Interface
 * @brief Интерфейс, определяющий контракт для классов, реализующих базовую логику приложения.
 *
 * @details Интерфейс Work_CoreLogic_Interface предоставляет набор методов для выполнения ключевых операций:
 *          - Формирование информационных строк для категорий и пользовательских альбомов.
 *          - Удаление изображений и связанных данных.
 *          - Получение данных о новостях, языках и темах.
 *          - Генерация блоков вывода изображений для различных типов запросов.
 *          Этот интерфейс определяет контракт, который должны реализовать классы, отвечающие за базовую логику приложения.
 *
 * @callergraph
 * @callgraph
 *
 * @see PhotoRigma::Classes::Work_CoreLogic Реализация интерфейса.
 * @see PhotoRigma::Classes::Database Класс для работы с базой данных.
 * @see PhotoRigma::Include::log_in_file() Внешняя функция для логирования ошибок.
 *
 * Пример класса, реализующего интерфейс:
 * @code
 * class Work_CoreLogic implements \PhotoRigma\Classes\Work_CoreLogic_Interface {
 *     // Реализация методов интерфейса
 * }
 * @endcode
 */
interface Work_CoreLogic_Interface
{
    /**
     * @brief Формирует информационную строку для категории или пользовательского альбома.
     *
     * @details Метод является частью контракта, который должны реализовать классы, использующие интерфейс.
     *          Основная логика включает следующие шаги:
     *          1. Получение данных о категории или пользовательском альбоме из базы данных.
     *          2. Подсчет количества фотографий, связанных с категорией или альбомом.
     *          3. Получение данных о последней и лучшей фотографии (если разрешено отображение фотографий).
     *          4. Для корневой категории (`$cat_id = 0`) подсчет количества уникальных пользователей, загрузивших фотографии.
     *          5. Формирование результирующего массива с информацией о категории или альбоме, включая название, описание,
     *             количество фотографий, данные о последней и лучшей фотографии, а также ссылки на них.
     *
     *          Этот метод должен быть реализован в классах, использующих интерфейс, и может быть вызван через публичный метод `category()`.
     *
     * @callgraph
     *
     * @param int $cat_id Идентификатор категории или пользователя (если `$user_flag = 1`). По умолчанию: `0`.
     *                    Должен быть целым числом >= `0`.
     * @param int $user_flag Флаг, указывающий формировать ли информацию о категории (`0`) или пользовательском альбоме (`1`).
     *                       По умолчанию: `0`. Допустимые значения: `0` или `1`.
     *
     * @return array Информационная строка для категории или пользовательского альбома:
     *               - 'name' (string): Название категории или альбома.
     *               - 'description' (string): Описание категории или альбома.
     *               - 'count_photo' (int): Количество фотографий.
     *               - 'last_photo' (string): Название последней фотографии.
     *               - 'top_photo' (string): Название лучшей фотографии.
     *               - 'url_cat' (string): Ссылка на категорию или альбом.
     *               - 'url_last_photo' (string): Ссылка на последнюю фотографию.
     *               - 'url_top_photo' (string): Ссылка на лучшую фотографию.
     *
     * @throws InvalidArgumentException Если входные параметры имеют некорректный тип или значение.
     * @throws Exception Если возникают ошибки при выполнении операций.
     *
     * @note Используются константы:
     *       - TBL_CATEGORY: Таблица для хранения данных о категориях.
     *       - TBL_USERS: Таблица для хранения данных о пользователях.
     *       - TBL_PHOTO: Таблица для хранения данных о фотографиях.
     *
     *       Конфигурационные ключи:
     *       - site_url: URL сайта, используемый для формирования ссылок на категории и фотографии.
     *
     * Пример вызова метода:
     * @code
     * // Получение данных о категории с ID = 5
     * $object = new \PhotoRigma\Classes\Work_CoreLogic();
     * $category_data = $object->category(5, 0);
     * print_r($category_data);
     *
     * // Получение данных о пользовательском альбоме с ID = 123
     * $user_album_data = $object->category(123, 1);
     * print_r($user_album_data);
     * @endcode
     * @see PhotoRigma::Classes::Work::clean_field() Метод для очистки данных.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::category() Публичный метод-редирект для вызова этой логики.
     */
    public function category(int $cat_id = 0, int $user_flag = 0): array;

    /**
     * @brief Удаляет изображение с указанным идентификатором, а также все упоминания об этом изображении в таблицах сайта.
     *
     * @details Метод выполняет удаление изображения с указанным идентификатором, включая следующие шаги:
     * 1. Удаляет файлы из каталогов полноразмерных изображений и эскизов, используя пути, заданные в конфигурации (`$this->config`).
     *    Перед удалением проверяется существование файлов.
     * 2. Удаляет запись об изображении из таблицы `TBL_PHOTO`.
     * 3. Удаляет связанные записи из таблиц `TBL_RATE_USER` и `TBL_RATE_MODER`.
     * 4. Логирует ошибки, возникающие при удалении файлов или выполнении запросов к базе данных, с помощью функции `log_in_file()`.
     * Этот метод содержит основную логику, вызываемую через публичный метод del_photo().
     *
     * @callgraph
     *
     * @param int $photo_id Идентификатор удаляемого изображения (обязательное поле).
     *                      Должен быть положительным целым числом.
     *
     * @return bool True, если удаление успешно, иначе False.
     *
     * @throws InvalidArgumentException Если параметр $photo_id имеет некорректный тип или значение.
     *      Пример сообщения:
     *          Неверное значение параметра $photo_id | Ожидалось положительное целое число
     * @throws RuntimeException Если возникает ошибка при выполнении запросов к базе данных или удалении файлов.
     *      Пример сообщения:
     *          Не удалось найти изображение | Переменная $photo_id = [значение]
     *
     * @warning Метод чувствителен к правам доступа при удалении файлов. Убедитесь, что скрипт имеет необходимые права на запись и чтение.
     * @warning Удаление файлов и записей из базы данных необратимо. Убедитесь, что передан корректный идентификатор изображения.
     *
     * Пример вызова метода:
     * @code
     * // Удаление изображения с ID = 42
     * $coreLogic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $result = $coreLogic->del_photo(42);
     * if ($result) {
     *     echo "Изображение успешно удалено.";
     * } else {
     *     echo "Не удалось удалить изображение.";
     * }
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::del_photo()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Include::log_in_file()
     *      Функция для логирования ошибок.
     *
     * @note Используются константы:
     *       - TBL_PHOTO: Таблица для хранения данных об изображениях.
     *       - TBL_RATE_USER: Таблица для хранения пользовательских оценок изображений.
     *       - TBL_RATE_MODER: Таблица для хранения оценок модераторов.
     *       Конфигурационные ключи:
     *       - site_dir: Базовый путь к директории сайта.
     *       - thumbnail_folder: Путь к каталогу эскизов.
     *       - gallery_folder: Путь к каталогу полноразмерных изображений.
     *
     */
    public function del_photo(int $photo_id): bool;

    /**
     * @brief Получает данные о новостях в зависимости от типа запроса.
     *
     * @details Метод выполняет запросы к базе данных для получения данных о новостях, включая следующие шаги:
     * 1. Проверяет входные параметры $news_id_or_limit и $act на корректность.
     * 2. Формирует параметры запроса через match():
     *    - Для $act = 'id': Получает новость по её ID.
     *    - Для $act = 'last': Получает список новостей с сортировкой по дате последнего редактирования.
     * 3. Выполняет запрос к таблице TBL_NEWS с использованием параметров.
     * 4. Возвращает массив с данными о новостях или пустой массив, если новости не найдены.
     * Этот метод содержит основную логику, вызываемую через публичный метод news().
     *
     * @callgraph
     *
     * @param int $news_id_or_limit Количество новостей или ID новости (в зависимости от параметра $act).
     *                                 Должен быть положительным целым числом.
     * @param string $act Тип запроса:
     *                                 - 'id': Получение новости по её ID.
     *                                 - 'last': Получение списка новостей с сортировкой по дате последнего редактирования.
     *
     * @return array Массив с данными о новостях. Если новостей нет, возвращается пустой массив.
     *
     * @throws InvalidArgumentException Если передан некорректный $act или $news_id_or_limit.
     *      Пример сообщения:
     *          Некорректный ID новости | Переменная $news_id_or_limit = [значение]
     * @throws RuntimeException         Если произошла ошибка при выполнении запроса к базе данных.
     *      Пример сообщения:
     *          Не удалось получить данные из базы данных | Тип запроса: '$act'
     *
     * @note Используются константы:
     *       - TBL_NEWS: Таблица для хранения данных о новостях.
     *
     * @warning Метод чувствителен к корректности входных параметров $news_id_or_limit и $act.
     *          Убедитесь, что передаются допустимые значения.
     * @warning Если новости не найдены, метод возвращает пустой массив.
     *
     * Пример вызова метода:
     * @code
     * // Получение новости с ID = 5
     * $coreLogic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $news_by_id = $coreLogic->news(5, 'id');
     * print_r($news_by_id);
     *
     * // Получение 10 последних новостей
     * $news_list = $coreLogic->news(10, 'last');
     * print_r($news_list);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::news()
     *      Публичный метод-редирект для вызова этой логики.
     *
     */
    public function news(int $news_id_or_limit, string $act): array;

    /**
     * @brief Загружает доступные языки из директории /language/.
     *
     * @details Метод выполняет загрузку доступных языков, включая следующие шаги:
     * 1. Нормализует путь к директории `/language/` и проверяет её существование.
     * 2. Перебирает все поддиректории в `/language/` и проверяет наличие файла `main.php`.
     * 3. Для каждой поддиректории:
     *    - Проверяет доступность файла `main.php`.
     *    - Безопасно подключает файл и проверяет наличие переменной `$lang_name`.
     *    - Если переменная `$lang_name` определена и корректна, добавляет язык в список доступных.
     * 4. Возвращает массив с данными о доступных языках или выбрасывает исключение, если языки не найдены.
     * Основная логика метода вызывается через публичный метод get_languages().
     *
     * @callgraph
     *
     * @return array Массив с данными о доступных языках. Каждый элемент массива содержит:
     *               - `value`: Имя директории языка (строка).
     *               - `name`: Название языка из файла `main.php` (строка).
     *
     * @throws RuntimeException Если:
     *                           - Директория `/language/` недоступна или не существует.
     *                           - Ни один язык не найден в указанной директории.
     *
     * @note Используются следующие параметры из свойства $this->config:
     *       - site_dir: Базовый путь к директории сайта, содержащей поддиректорию `/language/`.
     *
     * @warning Метод чувствителен к структуре директории `/language/` и содержимому файла `main.php`.
     *          Убедитесь, что файл `main.php` содержит корректную переменную `$lang_name`.
     * @warning Если директория `/language/` недоступна или пуста, метод выбрасывает исключение.
     *
     * Пример вызова метода:
     * @code
     * // Получение списка доступных языков
     * $coreLogic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $languages = $coreLogic->get_languages();
     * foreach ($languages as $language) {
     *     echo "Язык: " . $language['name'] . " (ID: " . $language['value'] . ")\n";
     * }
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::get_languages()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Include::log_in_file()
     *      Функция для логирования ошибок.
     *
     */
    public function get_languages(): array;

    /**
     * @brief Загружает доступные темы из директории /themes/.
     *
     * @details Метод выполняет загрузку доступных тем, включая следующие шаги:
     * 1. Нормализует путь к директории `/themes/` и проверяет её существование.
     * 2. Перебирает все поддиректории в `/themes/`.
     * 3. Для каждой поддиректории:
     *    - Проверяет доступность директории.
     *    - Проверяет, что директория находится внутри разрешенной директории `/themes/`.
     *    - Добавляет имя поддиректории в список доступных тем.
     * 4. Возвращает массив с именами доступных тем или выбрасывает исключение, если темы не найдены.
     * Основная логика метода вызывается через публичный метод get_themes().
     *
     * @callgraph
     *
     * @return array Массив строк с именами доступных тем. Если темы не найдены, возвращается пустой массив.
     *
     * @throws RuntimeException Если:
     *                           - Директория `/themes/` не существует или недоступна для чтения.
     *                           - Ни одна тема не найдена в указанной директории.
     *
     * @note Используются следующие параметры из свойства $this->config:
     *       - site_dir: Базовый путь к директории сайта, содержащей поддиректорию `/themes/`.
     *
     * @warning Метод чувствителен к структуре директории `/themes/`.
     *          Убедитесь, что директория существует и содержит хотя бы одну поддиректорию.
     * @warning Если директория `/themes/` недоступна или пуста, метод выбрасывает исключение.
     *
     * Пример вызова метода:
     * @code
     * // Получение списка доступных тем
     * $coreLogic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $themes = $coreLogic->get_themes();
     * foreach ($themes as $theme) {
     *     echo "Доступная тема: $theme\n";
     * }
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::get_themes()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Include::log_in_file()
     *      Функция для логирования ошибок.
     *
     */
    public function get_themes(): array;

    /**
     * @brief Генерирует блок данных для вывода изображений различных типов.
     *
     * @details Метод выполняет следующие шаги:
     *          1. Проверяет права пользователя на просмотр изображений.
     *          2. Формирует SQL-запрос для получения данных изображения и пользователя из базы данных:
     *             - Для типа `'top'`: Выбирает лучшее изображение с учетом рейтинга.
     *             - Для типа `'last'`: Выбирает последнее загруженное изображение.
     *             - Для типа `'cat'`: Выбирает изображение из конкретной категории по `$id_photo`.
     *             - Для типа `'rand'`: Выбирает любое случайное изображение.
     *          3. Проверяет существование файла изображения и его доступность.
     *          4. Вычисляет размеры изображения через метод `size_image()`.
     *          5. Возвращает массив данных для вывода изображения или массив по-умолчанию в случае ошибки.
     *
     *          Этот метод является частью контракта, который должны реализовать классы, использующие интерфейс.
     *
     * @callgraph
     *
     * @param string $type Тип изображения:
     *                     - `'top'`: Лучшее изображение (по рейтингу).
     *                     - `'last'`: Последнее загруженное изображение.
     *                     - `'cat'`: Изображение из конкретной категории (требует указания `$id_photo`).
     *                     - `'rand'`: Любое случайное изображение.
     * @param int $id_photo Идентификатор фото. Используется только при `$type == 'cat'`. Должен быть >= `0`.
     *
     * @return array Массив данных для вывода изображения:
     *               - `'name_block'`         (string): Название блока изображения (например, "Лучшее фото").
     *               - `'url'`                (string): URL для просмотра полного изображения.
     *               - `'thumbnail_url'`      (string): URL для миниатюры изображения.
     *               - `'name'`               (string): Название изображения.
     *               - `'description'`        (string): Описание изображения.
     *               - `'category_name'`      (string): Название категории.
     *               - `'category_description'` (string): Описание категории.
     *               - `'rate'`               (string): Рейтинг изображения (например, "Рейтинг: 5/10").
     *               - `'url_user'`           (string|null): URL профиля пользователя, добавившего изображение.
     *               - `'real_name'`          (string): Реальное имя пользователя.
     *               - `'category_url'`       (string): URL категории или пользовательского альбома.
     *               - `'width'`              (int): Ширина изображения после масштабирования.
     *               - `'height'`             (int): Высота изображения после масштабирования.
     *
     * @throws InvalidArgumentException Если передан недопустимый `$type` или `$id_photo < 0`.
     *                                  Пример сообщения: "Некорректный идентификатор фотографии | Значение: {$id_photo}".
     * @throws PDOException            Если произошла ошибка при выборке данных из базы данных.
     *                                  Пример сообщения: "Ошибка базы данных | Не удалось получить данные категории с ID: {$photo_data['category']}".
     * @throws RuntimeException         Если файл изображения недоступен или не существует.
     *
     * @note Используются следующие константы:
     *       - TBL_PHOTO: Таблица для хранения данных об изображениях.
     *       - TBL_USERS: Таблица для хранения данных о пользователях.
     *       - TBL_CATEGORY: Таблица для хранения данных о категориях.
     *
     * @warning Метод чувствителен к правам доступа пользователя.
     *          Убедитесь, что пользователь имеет право на просмотр изображений.
     * @warning Если файл изображения недоступен или не существует, метод возвращает данные по умолчанию.
     * @warning Проверка пути к файлу изображения гарантирует, что доступ возможен только к файлам внутри директории галлереи.
     *
     * Пример вызова метода:
     * @code
     * // Получение данных для вывода лучшего изображения
     * $coreLogic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $top_photo = $coreLogic->create_photo('top', 0);
     * print_r($top_photo);
     *
     * // Получение данных для вывода изображения из категории с ID = 5
     * $category_photo = $coreLogic->create_photo('cat', 5);
     * print_r($category_photo);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::create_photo() Метод, реализующий основную логику.
     * @see PhotoRigma::Classes::Work::size_image() Метод, используемый для вычисления размеров изображения.
     * @see PhotoRigma::Include::log_in_file() Функция для логирования ошибок.
     * @see PhotoRigma::Classes::Work::clean_field() Метод для очистки данных.
     *
     */
    public function create_photo(string $type = 'top', int $id_photo = 0): array;

    /**
     * @brief Обрабатывает добавление новой оценки и пересчитывает среднюю оценку.
     *
     * @details Этот метод является частью контракта, который должны реализовать классы, использующие интерфейс.
     *          Метод должен выполнять следующие действия:
     *          - Вставлять новую оценку в указанную таблицу через `$this->db->insert()`.
     *          - Проверять успешность вставки по значению `get_last_insert_id()`.
     *          - Пересчитывать среднюю оценку на основе всех оценок для фотографии.
     *          Реализация должна учитывать возможность вызова через "фасад" в родительском классе
     *          `PhotoRigma::Classes::Work::process_rating()`.
     *
     * @callgraph
     *
     * @param string $table Имя таблицы для вставки оценки.
     *                      Должен быть строкой, соответствующей существующей таблице в базе данных.
     * @param int $photo_id ID фотографии.
     *                      Должен быть положительным целым числом.
     * @param int $user_id ID пользователя.
     *                     Должен быть положительным целым числом.
     * @param int $rate_value Значение оценки.
     *                        Должен быть целым числом в диапазоне допустимых значений (например, 1–5).
     *
     * @return float Возвращает число с плавающей точкой, представляющее среднюю оценку.
     *               Если оценок нет, возвращается `0`.
     *
     * @throws RuntimeException Выбрасывается исключение, если не удалось добавить оценку.
     *                           Причина: `get_last_insert_id()` возвращает `0`, что указывает на неудачную вставку.
     *
     * @note Метод использует базу данных для вставки и выборки данных.
     *
     * @warning Убедитесь, что таблица существует и данные корректны перед вызовом метода.
     *
     * Пример вызова метода:
     * @code
     * $object = new \PhotoRigma\Classes\Work_CoreLogic();
     * $averageRate = $object->process_rating('ratings', 123, 456, 5);
     * echo "Средняя оценка: {$averageRate}";
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::process_rating() Защищённый метод, реализующий основную логику.
     *
     */
    public function process_rating(string $table, int $photo_id, int $user_id, int $rate_value): float;
}

/**
 * @class Work_CoreLogic
 * @brief Класс, реализующий интерфейс Work_CoreLogic_Interface для выполнения базовой логики приложения.
 *
 * @details Класс Work_CoreLogic предоставляет реализацию всех методов, определенных в интерфейсе Work_CoreLogic_Interface.
 *          Он отвечает за выполнение следующих задач:
 *          - Формирование информационных строк для категорий и пользовательских альбомов.
 *          - Удаление изображений и связанных данных.
 *          - Получение данных о новостях, языках и темах.
 *          - Генерация блоков вывода изображений для различных типов запросов.
 *
 * @implements Work_CoreLogic_Interface Интерфейс, который реализует данный класс.
 *
 * @callergraph
 * @callgraph
 *
 * @see PhotoRigma::Classes::Work_CoreLogic_Interface Интерфейс, который реализует данный класс.
 * @see PhotoRigma::Classes::Database Класс для работы с базой данных.
 * @see PhotoRigma::Include::log_in_file() Внешняя функция для логирования ошибок.
 * @see PhotoRigma::Classes::Work Родительский класс, от которого наследуется текущий класс.
 *
 * Пример использования класса:
 * @code
 * // Инициализация объекта Work_CoreLogic
 * $db = new \PhotoRigma\Classes\Database();
 * $config = ['site_dir' => '/path/to/site', 'gallery_folder' => '/images'];
 * $work = new \PhotoRigma\Classes\Work();
 *
 * $core_logic = new \PhotoRigma\Classes\Work_CoreLogic($db, $config, $work);
 *
 * // Пример вызова метода create_photo
 * $top_photo = $core_logic->create_photo('top', 0);
 * print_r($top_photo);
 * @endcode
 */
class Work_CoreLogic implements Work_CoreLogic_Interface
{
    private array $config; ///< Конфигурация приложения.
    private ?array $lang = null; ///< Языковые данные (могут быть null при инициализации).
    private Database_Interface $db; ///< Объект для работы с базой данных (обязательный).
    private Work $work; ///< Основной объект приложения (обязательный).
    private ?User $user = null; ///< Объект пользователя (может быть null при инициализации).

    /**
     * @brief Конструктор класса.
     *
     * @details Инициализирует зависимости: конфигурацию, базу данных и объект класса Work.
     *          Этот класс является дочерним для PhotoRigma::Classes::Work.
     *          Все параметры обязательны для корректной работы класса.
     *
     * @callergraph
     * @callgraph
     *
     * @param array $config Конфигурация приложения.
     *                      Должен быть массивом. Если передан некорректный тип, выбрасывается исключение.
     * @param Database_Interface $db Объект для работы с базой данных.
     * @param Work $work Основной объект приложения.
     *
     * @throws InvalidArgumentException Если параметр $config не является массивом.
     *
     * @note Важно: все зависимости должны быть корректно инициализированы перед использованием класса.
     * @warning Не передавайте в конструктор некорректные или пустые зависимости, так как это может привести к ошибкам.
     *
     * Пример использования конструктора:
     * @code
     * $config = ['temp_photo_w' => 800];
     * $db = new Database();
     * $work = new Work();
     * $corelogic = new \PhotoRigma\Classes\Work_CoreLogic($config, $db, $work);
     * @endcode
     * @see PhotoRigma::Classes::Work Родительский класс, через который передаются зависимости.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config Свойство, содержащее конфигурацию приложения.
     * @see PhotoRigma::Classes::Work_CoreLogic::$db Свойство, содержащее объект для работы с базой данных.
     * @see PhotoRigma::Classes::Work_CoreLogic::$work Свойство, содержащее основной объект приложения.
     *
     */
    public function __construct(Database_Interface $db, array $config, Work $work)
    {
        $this->config = $config;
        $this->db = $db;
        $this->work = $work;
    }

    /**
     * @brief Получает значение приватного свойства.
     *
     * @details Метод позволяет получить доступ к приватному свойству `$config`.
     * Если запрашиваемое свойство не существует, выбрасывается исключение.
     * Доступ разрешён только к свойству `$config`.
     *
     * @callergraph
     * @callgraph
     *
     * @param string $name Имя свойства:
     *                     - Допустимое значение: 'config'.
     *                     - Если указано другое имя, выбрасывается исключение.
     *
     * @return array Значение свойства `$config`.
     *
     * @throws InvalidArgumentException Если запрашиваемое свойство не существует.
     *
     * @note Этот метод предназначен только для доступа к свойству `$config`.
     * @warning Не используйте этот метод для доступа к другим свойствам, так как это вызовет исключение.
     *
     * Пример использования метода:
     * @code
     * $corelogic = new \PhotoRigma\Classes\Work_CoreLogic(['temp_photo_w' => 800], $db, $work);
     * echo $corelogic->config['temp_photo_w']; // Выведет: 800
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::$config Свойство, к которому обращается метод.
     *
     */
    public function &__get(string $name): array
    {
        if ($name === 'config') {
            $result = &$this->config;
            return $result;
        }
        throw new InvalidArgumentException(
            __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Свойство не существует | Получено: '$name'"
        );
    }

    /**
     * @brief Устанавливает значение приватного свойства.
     *
     * @details Метод позволяет изменить значение приватного свойства `$config`.
     * Если переданное имя свойства не соответствует `$config`, выбрасывается исключение.
     *
     * @callergraph
     * @callgraph
     *
     * @param string $name Имя свойства:
     *                     - Допустимое значение: 'config'.
     *                     - Если указано другое имя, выбрасывается исключение.
     * @param array $value Новое значение свойства:
     *                     - Должен быть массивом.
     *
     * @throws InvalidArgumentException Если переданное имя свойства не соответствует `$config`.
     *
     * @note Этот метод предназначен только для изменения свойства `$config`.
     * @warning Не используйте этот метод для изменения других свойств, так как это вызовет исключение.
     *
     * Пример использования метода:
     * @code
     * $corelogic = new \PhotoRigma\Classes\Work_CoreLogic([], $db, $work);
     * $corelogic->config = ['temp_photo_w' => 1024];
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::$config Свойство, которое изменяет метод.
     *
     */
    public function __set(string $name, array $value): void
    {
        if ($name === 'config') {
            $this->config = $value;
        } else {
            throw new InvalidArgumentException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Свойство не может быть установлено | Получено: '$name'"
            );
        }
    }

    public function __isset(string $name): bool
    {
        return isset($this->$name);
    }

    /**
     * @brief Установка языковых данных через сеттер.
     *
     * @details Метод позволяет установить массив языковых данных.
     *          Если передан некорректный тип данных или `null`, выбрасывается исключение.
     *
     * @callergraph
     * @callgraph
     *
     * @param array $lang Языковые данные:
     *                    - Должен быть массивом.
     *                    - Каждый ключ должен быть строкой, а значение — допустимым для языковых данных.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Если передан некорректный тип данных или `null`.
     *
     * @note Убедитесь, что передаваемые языковые данные корректны и соответствуют ожидаемому формату.
     * @warning Не передавайте пустые или некорректные данные, так как это может привести к ошибкам.
     *
     * Пример использования метода:
     * @code
     * $corelogic = new \PhotoRigma\Classes\Work_CoreLogic($config, $db, $work);
     * $corelogic->set_lang(['key' => 'value']);
     * @endcode
     * @see PhotoRigma::Classes::Work::set_lang() Метод в родительском классе Work, который вызывает этот метод.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::$lang Свойство, которое изменяет метод.
     */
    public function set_lang(array $lang): void
    {
        $this->lang = $lang;
    }

    /**
     * @brief Установка данных пользователя через сеттер.
     *
     * @details Метод позволяет установить объект пользователя.
     *          Если передан некорректный тип данных или `null`, выбрасывается исключение.
     *
     * @callergraph
     * @callgraph
     *
     * @param User $user Объект пользователя:
     *                   - Должен быть экземпляром класса User.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Если передан некорректный тип данных или `null`.
     *
     * @note Убедитесь, что передаваемый объект пользователя является экземпляром класса User.
     * @warning Не передавайте null или некорректные объекты, так как это может привести к ошибкам.
     *
     * Пример использования метода:
     * @code
     * $corelogic = new \PhotoRigma\Classes\Work_CoreLogic($config, $db, $work);
     * $user = new \PhotoRigma\Classes\User();
     * $corelogic->set_user($user);
     * @endcode
     * @see PhotoRigma::Classes::Work::set_user() Метод в родительском классе Work, который вызывает этот метод.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::$user Свойство, которое изменяет метод.
     */
    public function set_user(User $user): void
    {
        $this->user = $user;
    }

    /**
     * @brief Формирует информационную строку для категории или пользовательского альбома.
     *
     * @details Метод является редиректом, вызывающим защищённый метод `_category_internal()`.
     *          Защищённый метод выполняет запросы к базе данных для получения информации о категории
     *          или пользовательском альбоме, включая подсчёт фотографий, получение данных о последней
     *          и лучшей фотографии, а также формирование результирующего массива с информацией о категории
     *          или альбоме.
     *
     * @callergraph
     * @callgraph
     *
     * @param int $cat_id Идентификатор категории или пользователя (если `$user_flag = 1`). По умолчанию: `0`.
     *                    Должен быть целым числом >= `0`.
     * @param int $user_flag Флаг, указывающий формировать ли информацию о категории (`0`) или пользовательском альбоме (`1`).
     *                       По умолчанию: `0`. Допустимые значения: `0` или `1`.
     *
     * @return array Информация о категории или пользовательском альбоме:
     *               - 'name' (string): Название категории или альбома.
     *               - 'description' (string): Описание категории или альбома.
     *               - 'count_photo' (int): Количество фотографий.
     *               - 'last_photo' (string): Название последней фотографии.
     *               - 'top_photo' (string): Название лучшей фотографии.
     *               - 'url_cat' (string): Ссылка на категорию или альбом.
     *               - 'url_last_photo' (string): Ссылка на последнюю фотографию.
     *               - 'url_top_photo' (string): Ссылка на лучшую фотографию.
     *
     * @throws InvalidArgumentException Если входные параметры имеют некорректный тип или значение.
     * @throws PDOException Если возникают ошибки при получении данных из базы данных.
     *
     * @note Используются константы:
     *       - TBL_CATEGORY: Таблица для хранения данных о категориях.
     *       - TBL_USERS: Таблица для хранения данных о пользователях.
     *       - TBL_PHOTO: Таблица для хранения данных о фотографиях.
     *
     *       Конфигурационные ключи:
     *       - site_url: URL сайта, используемый для формирования ссылок на категории и фотографии.
     *
     * Пример вызова метода:
     * @code
     * // Получение данных о категории с ID = 5
     * $object = new \PhotoRigma\Classes\Work();
     * $category_data = $object->category(5, 0);
     * print_r($category_data);
     *
     * // Получение данных о пользовательском альбоме с ID = 123
     * $user_album_data = $object->category(123, 1);
     * print_r($user_album_data);
     * @endcode
     * @see PhotoRigma::Classes::Work::_category_internal() Защищённый метод, реализующий основную логику.
     * @see PhotoRigma::Classes::Work::$db Свойство, содержащее объект для работы с базой данных.
     * @see PhotoRigma::Classes::Work::$lang Свойство, содержащее языковые строки.
     * @see PhotoRigma::Classes::Work::$user Свойство, содержащее данные текущего пользователя.
     * @see PhotoRigma::Classes::Work::clean_field() Метод для очистки данных.
     * @see PhotoRigma::Classes::Work::category() Метод из другого класса, используемый как редирект.
     *
     */
    public function category(int $cat_id = 0, int $user_flag = 0): array
    {
        return $this->_category_internal($cat_id, $user_flag);
    }

    /**
     * @brief Формирует информационную строку для категории или пользовательского альбома.
     *
     * @details Метод выполняет запросы к базе данных для получения информации о категории или пользовательском альбоме.
     *          Процесс включает следующие шаги:
     *          1. Получение данных о категории из таблицы `TBL_CATEGORY` или данных пользователя из таблицы `TBL_USERS`
     *             (если `$user_flag = 1`).
     *          2. Подсчет количества фотографий в таблице `TBL_PHOTO` с использованием JOIN-запросов.
     *          3. Получение данных о последней и лучшей фотографии (если разрешено отображение фотографий).
     *          4. Для корневой категории (`$cat_id = 0`) подсчет количества уникальных пользователей, загрузивших фотографии.
     *          5. Формирование результирующего массива с информацией о категории или альбоме, включая название, описание,
     *             количество фотографий, данные о последней и лучшей фотографии, а также ссылки на них.
     *
     *          Этот метод является защищенным и вызывается через публичный метод `category()`.
     *
     * @callergraph
     * @callgraph
     *
     * @param int $cat_id Идентификатор категории или пользователя (если `$user_flag = 1`). По умолчанию: `0`.
     *                          Должен быть целым числом >= `0`.
     * @param int $user_flag Флаг, указывающий формировать ли информацию о категории (`0`) или пользовательском альбоме (`1`).
     *                          По умолчанию: `0`. Допустимые значения: `0` или `1`.
     *
     * @return array Информационная строка для категории или пользовательского альбома:
     *               - 'name'           (string): Название категории или альбома.
     *               - 'description'    (string): Описание категории или альбома.
     *               - 'count_photo'    (int):    Количество фотографий.
     *               - 'last_photo'     (string): Форматированное название последней фотографии (например, "Название (Описание)").
     *               - 'top_photo'      (string): Форматированное название лучшей фотографии (например, "Название (Описание)").
     *               - 'url_cat'        (string): Ссылка на категорию или альбом.
     *               - 'url_last_photo' (string): Ссылка на последнюю фотографию.
     *               - 'url_top_photo'  (string): Ссылка на лучшую фотографию.
     *
     * @throws InvalidArgumentException Если входные параметры имеют некорректный тип или значение.
     * @throws PDOException            Если возникают ошибки при получении данных из базы данных.
     *
     * @note Используются константы:
     *       - TBL_CATEGORY: Таблица для хранения данных о категориях.
     *       - TBL_USERS:    Таблица для хранения данных о пользователях.
     *       - TBL_PHOTO:    Таблица для хранения данных о фотографиях.
     *
     *       Конфигурационные ключи:
     *       - site_url: URL сайта, используемый для формирования ссылок на категории и фотографии.
     *
     * Пример вызова метода внутри класса или наследника:
     * @code
     * // Получение данных о категории с ID = 5
     * $category_data = $this->_category_internal(5, 0);
     * print_r($category_data);
     *
     * // Получение данных о пользовательском альбоме с ID = 123
     * $user_album_data = $this->_category_internal(123, 1);
     * print_r($user_album_data);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::category()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Classes::Work_CoreLogic::$db
     *      Свойство, содержащее объект для работы с базой данных.
     * @see PhotoRigma::Classes::Work_CoreLogic::$lang
     *      Свойство, содержащее языковые строки.
     * @see PhotoRigma::Classes::Work_CoreLogic::$user
     *      Свойство, содержащее данные текущего пользователя.
     * @see PhotoRigma::Classes::Work::clean_field()
     *      Метод для очистки данных.
     *
     */
    protected function _category_internal(int $cat_id = 0, int $user_flag = 0): array
    {
        // Проверка аргументов
        if ($cat_id < 0 || $user_flag < 0) {
            throw new InvalidArgumentException(
                __FILE__ . ':' . __LINE__ . ' (' . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ') | Неверный аргумент | ' . 'cat_id и user_flag должны быть 0 или положительным целым числом'
            );
        }

        $photo_info = [];

        // Получение данных категории
        if ($user_flag === 1) {
            // Получение категории с id = 0
            $this->db->select(
                ['`id`', '`name`'],
                TBL_CATEGORY,
                ['where' => '`id` = :id', 'params' => [':id' => 0]]
            );
            $category_data = $this->db->res_row();
            if (!$category_data) {
                throw new PDOException(
                    __FILE__ . ':' . __LINE__ . ' (' . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ') | Ошибка базы данных | ' . 'Не удалось получить данные категории'
                );
            }

            // Получение данных пользователя
            $this->db->select(
                '`real_name`',
                TBL_USERS,
                ['where' => '`id` = :id', 'params' => [':id' => $cat_id]]
            );
            $user_data = $this->db->res_row();
            if (!$user_data) {
                throw new PDOException(
                    __FILE__ . ':' . __LINE__ . ' (' . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ') | Ошибка базы данных | ' . 'Не удалось получить данные пользователя с ID: ' . $cat_id
                );
            }

            // Обновление данных категории с учетом данных пользователя
            $category_data['description'] = $category_data['name'] . ' ' . $user_data['real_name'];
            $category_data['name'] = $user_data['real_name'];
        } else {
            // Получение категории по id
            $this->db->select(
                ['`id`', '`name`', '`description`'],
                TBL_CATEGORY,
                ['where' => '`id` = :id', 'params' => [':id' => $cat_id]]
            );
            $category_data = $this->db->res_row();
            if (!$category_data) {
                throw new PDOException(
                    __FILE__ . ':' . __LINE__ . ' (' . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ') | Ошибка базы данных | ' . 'Не удалось получить данные категории'
                );
            }
        }

        // Экранирование текстовых данных
        $category_data['name'] = Work::clean_field($category_data['name']);
        $category_data['description'] = Work::clean_field($category_data['description']);

        // Получение данных о фотографиях
        $select = [
            'COUNT(DISTINCT p.id) AS num_photo',
            'p1.id AS latest_photo_id',
            'p1.name AS latest_photo_name',
            'p1.description AS latest_photo_description',
            'p2.id AS top_rated_photo_id',
            'p2.name AS top_rated_photo_name',
            'p2.description AS top_rated_photo_description',
        ];

        $from_tbl = TBL_PHOTO . ' p';
        $join = [
            [
                'table' => TBL_PHOTO . ' p1',
                'type' => 'LEFT',
                'on' => 'p.category = p1.category AND p1.date_upload = (SELECT MAX(date_upload) FROM ' . TBL_PHOTO . ' WHERE category = p.category)',
            ],
            [
                'table' => TBL_PHOTO . ' p2',
                'type' => 'LEFT',
                'on' => 'p.category = p2.category AND p2.rate_user = (SELECT MAX(rate_user) FROM ' . TBL_PHOTO . ' WHERE category = p.category AND rate_user != 0)',
            ],
        ];

        $options = [
            'where' => ['p.category = :category'],
            'params' => [':category' => $category_data['id']],
        ];

        if ($user_flag === 1) {
            $options['where'] = 'p.category = :category AND p.user_upload = :user_upload';
            $options['params'][':user_upload'] = $cat_id;
        }

        $this->db->join($select, $from_tbl, $join, $options);
        $photo_data = $this->db->res_row();
        if (!$photo_data) {
            throw new PDOException(
                __FILE__ . ':' . __LINE__ . ' (' . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ') | Ошибка базы данных | ' . 'Не удалось получить данные фотографий для категории с ID: ' . $category_data['id']
            );
        }

        $latest_photo_data = false;
        $top_rated_photo_data = false;
        $photo_info['count'] = $photo_data['num_photo'];

        if ($photo_data['latest_photo_id']) {
            $latest_photo_data = [
                'id' => $photo_data['latest_photo_id'],
                'name' => Work::clean_field($photo_data['latest_photo_name']),
                'description' => Work::clean_field($photo_data['latest_photo_description']),
            ];
        }

        if ($photo_data['top_rated_photo_id']) {
            $top_rated_photo_data = [
                'id' => $photo_data['top_rated_photo_id'],
                'name' => Work::clean_field($photo_data['top_rated_photo_name']),
                'description' => Work::clean_field($photo_data['top_rated_photo_description']),
            ];
        }

        // Инициализация информации о фотографиях
        $photo_info['last_name'] = $this->lang['main']['no_foto'];
        $photo_info['last_url'] = sprintf('%s?action=photo&amp;id=%d', $this->config['site_url'], 0);
        $photo_info['top_name'] = $this->lang['main']['no_foto'];
        $photo_info['top_url'] = sprintf('%s?action=photo&amp;id=%d', $this->config['site_url'], 0);

        // Обновление информации о фотографиях, если пользователь имеет права на просмотр
        if ($this->user->user['pic_view']) {
            if ($latest_photo_data) {
                $photo_info['last_name'] = Work::clean_field($latest_photo_data['name']) . ' (' . Work::clean_field(
                    $latest_photo_data['description']
                ) . ')';
                $photo_info['last_url'] = sprintf(
                    '%s?action=photo&amp;id=%d',
                    $this->config['site_url'],
                    $latest_photo_data['id']
                );
            }

            if ($top_rated_photo_data) {
                $photo_info['top_name'] = Work::clean_field($top_rated_photo_data['name']) . ' (' . Work::clean_field(
                    $top_rated_photo_data['description']
                ) . ')';
                $photo_info['top_url'] = sprintf(
                    '%s?action=photo&amp;id=%d',
                    $this->config['site_url'],
                    $top_rated_photo_data['id']
                );
            }
        }

        // Обработка категорий с id = 0
        if ($cat_id === 0) {
            $this->db->select(
                'COUNT(DISTINCT `user_upload`) AS `num_user_upload`',
                TBL_PHOTO,
                ['where' => '`category` = :category', 'params' => [':category' => 0]]
            );
            $user_upload_count_data = $this->db->res_row();
            if ($user_upload_count_data['num_user_upload'] > 0) {
                $category_data['id'] = 'user';
                $category_data['name'] .= ' (' . $this->lang['category']['count_user_category'] . ': ' . $user_upload_count_data['num_user_upload'] . ')';
            } else {
                $category_data['name'] .= '<br />(' . $this->lang['category']['no_user_category'] . ')';
            }
        }

        // Обновление id категории для пользовательских альбомов
        if ($user_flag === 1) {
            $category_data['id'] = 'user&amp;id=' . $cat_id;
        }

        // Формирование итоговой информации о категории
        return [
            'name' => $category_data['name'],
            'description' => $category_data['description'],
            'count_photo' => $photo_info['count'],
            'last_photo' => $photo_info['last_name'],
            'top_photo' => $photo_info['top_name'],
            'url_cat' => sprintf('%s?action=category&amp;cat=%s', $this->config['site_url'], $category_data['id']),
            'url_last_photo' => $photo_info['last_url'],
            'url_top_photo' => $photo_info['top_url'],
            'user_upload_count_data' => $user_upload_count_data['num_user_upload'],
        ];
    }

    /**
     * @brief Удаляет изображение с указанным идентификатором, а также все упоминания об этом изображении в таблицах сайта.
     *
     * @details Метод является редиректом на защищённый метод _del_photo_internal(), где реализована основная логика.
     *          Удаляет файлы из каталогов полноразмерных изображений и эскизов, а также записи из таблиц базы данных.
     *
     * @callergraph
     * @callgraph
     *
     * @param int $photo_id Идентификатор удаляемого изображения (обязательное поле).
     *                      Должен быть положительным целым числом.
     *
     * @return bool True, если удаление успешно, иначе False.
     *
     * @throws InvalidArgumentException Если параметр $photo_id имеет некорректный тип или значение.
     *      Пример сообщения:
     *          Неверное значение параметра $photo_id | Ожидалось положительное целое число
     * @throws RuntimeException|Exception Если возникает ошибка при выполнении запросов к базе данных или удалении файлов.
     *      Пример сообщения:
     *          Не удалось найти изображение | Переменная $photo_id = [значение]
     *
     * @warning Метод чувствителен к правам доступа при удалении файлов. Убедитесь, что скрипт имеет необходимые права на запись и чтение.
     * @warning Удаление файлов и записей из базы данных необратимо. Убедитесь, что передан корректный идентификатор изображения.
     *
     * @note Используются константы:
     *       - TBL_PHOTO: Таблица для хранения данных об изображениях.
     *       - TBL_RATE_USER: Таблица для хранения пользовательских оценок изображений.
     *       - TBL_RATE_MODER: Таблица для хранения оценок модераторов.
     *       Конфигурационные ключи:
     *       - site_dir: Базовый путь к директории сайта.
     *       - thumbnail_folder: Путь к каталогу эскизов.
     *       - gallery_folder: Путь к каталогу полноразмерных изображений.
     *
     * Пример использования метода:
     * @code
     * // Удаление изображения с ID = 42
     * $core_logic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $result = $core_logic->del_photo(42);
     * if ($result) {
     *     echo "Изображение успешно удалено.";
     * } else {
     *     echo "Не удалось удалить изображение.";
     * }
     * @endcode
     * @see PhotoRigma::Classes::Work::del_photo() Метод из родительского класса.
     * @see PhotoRigma::Classes::Work_CoreLogic::_del_photo_internal() Защищённый метод, реализующий основную логику.
     * @see PhotoRigma::Classes::Work_CoreLogic::$db Свойство, содержащее объект для работы с базой данных.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config Свойство, содержащее конфигурацию приложения.
     * @see PhotoRigma::Classes::Database::join() Метод, используемый для объединения данных из нескольких таблиц.
     * @see PhotoRigma::Classes::Database::delete() Метод, используемый для удаления записей из таблиц базы данных.
     * @see PhotoRigma::Classes::Database::aff_rows Свойство, содержащее количество затронутых строк после выполнения запроса.
     * @see PhotoRigma::Include::log_in_file() Функция для логирования ошибок.
     *
     */
    public function del_photo(int $photo_id): bool
    {
        return $this->_del_photo_internal($photo_id);
    }

    /**
     * @brief Удаляет изображение с указанным идентификатором, а также все упоминания об этом изображении в таблицах сайта.
     *
     * @details Метод выполняет удаление изображения с указанным идентификатором, включая следующие шаги:
     * 1. Удаляет файлы из каталогов полноразмерных изображений и эскизов, используя пути, заданные в конфигурации (`$this->config`).
     *    Перед удалением проверяется существование файлов.
     * 2. Удаляет запись об изображении из таблицы `TBL_PHOTO`.
     * 3. Удаляет связанные записи из таблиц `TBL_RATE_USER` и `TBL_RATE_MODER`.
     * 4. Логирует ошибки, возникающие при удалении файлов или выполнении запросов к базе данных, с помощью функции `log_in_file()`.
     * Этот метод содержит основную логику, вызываемую через публичный метод del_photo().
     *
     * @callergraph
     * @callgraph
     *
     * @param int $photo_id Идентификатор удаляемого изображения (обязательное поле).
     *                      Должен быть положительным целым числом.
     *
     * @return bool True, если удаление успешно, иначе False.
     *
     * @throws InvalidArgumentException Если параметр $photo_id имеет некорректный тип или значение.
     *      Пример сообщения:
     *          Неверное значение параметра $photo_id | Ожидалось положительное целое число
     * @throws RuntimeException|Exception Если возникает ошибка при выполнении запросов к базе данных или удалении файлов.
     *      Пример сообщения:
     *          Не удалось найти изображение | Переменная $photo_id = [значение]
     *
     * @note Используются константы:
     *       - TBL_PHOTO: Таблица для хранения данных об изображениях.
     *       - TBL_RATE_USER: Таблица для хранения пользовательских оценок изображений.
     *       - TBL_RATE_MODER: Таблица для хранения оценок модераторов.
     *       Конфигурационные ключи:
     *       - site_dir: Базовый путь к директории сайта.
     *       - thumbnail_folder: Путь к каталогу эскизов.
     *       - gallery_folder: Путь к каталогу полноразмерных изображений.
     *
     * @warning Метод чувствителен к правам доступа при удалении файлов. Убедитесь, что скрипт имеет необходимые права на запись и чтение.
     * @warning Удаление файлов и записей из базы данных необратимо. Убедитесь, что передан корректный идентификатор изображения.
     *
     * Пример вызова метода внутри класса или наследника:
     * @code
     * // Удаление изображения с ID = 42
     * $result = $this->_del_photo_internal(42);
     * if ($result) {
     *     echo "Изображение успешно удалено.";
     * } else {
     *     echo "Не удалось удалить изображение.";
     * }
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::del_photo()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Classes::Work_CoreLogic::$db
     *      Свойство, содержащее объект для работы с базой данных.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config
     *      Свойство, содержащее конфигурацию приложения.
     * @see PhotoRigma::Classes::Database::join()
     *      Метод, используемый для объединения данных из нескольких таблиц.
     * @see PhotoRigma::Classes::Database::delete()
     *      Метод, используемый для удаления записей из таблиц базы данных.
     * @see PhotoRigma::Classes::Database::aff_rows
     *      Свойство, содержащее количество затронутых строк после выполнения запроса.
     * @see PhotoRigma::Include::log_in_file()
     *      Функция для логирования ошибок.
     *
     */
    protected function _del_photo_internal(int $photo_id): bool
    {
        // Проверка входного параметра
        if ($photo_id <= 0) {
            throw new InvalidArgumentException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Неверное значение параметра \$photo_id | Ожидалось положительное целое число"
            );
        }
        // Получение данных об изображении и категории через JOIN
        $this->db->join(
            ['p.*', 'c.folder'], // Список полей для выборки
            TBL_PHOTO . ' p', // Основная таблица
            [
                [
                    'table' => TBL_CATEGORY . ' c', // Таблица для JOIN
                    'type' => 'LEFT', // Тип JOIN
                    'on' => 'p.category = c.id' // Условие JOIN
                ]
            ],
            [
                'where' => 'p.id = :photo_id', // Условие WHERE
                'params' => [':photo_id' => $photo_id] // Параметры для prepared statements
            ]
        );
        $temp_data = $this->db->res_row();
        if (!$temp_data) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Не удалось найти изображение | Переменная \$photo_id = $photo_id"
            );
        }
        // Определение путей к файлам
        $path_thumbnail = $this->config['site_dir'] . $this->config['thumbnail_folder'] . '/' . $temp_data['folder'] . '/' . $temp_data['file'];
        $path_photo = $this->config['site_dir'] . $this->config['gallery_folder'] . '/' . $temp_data['folder'] . '/' . $temp_data['file'];
        // Удаление записи об изображении из таблицы
        $this->db->delete(TBL_PHOTO, ['where' => '`id` = :photo_id', 'params' => [':photo_id' => $photo_id]]);
        $aff_rows = $this->db->get_affected_rows();
        if ($aff_rows !== 1) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Не удалось удалить запись об изображении | Переменная \$photo_id = $photo_id"
            );
        }
        // Удаление файлов
        if (is_file($path_thumbnail) && !unlink($path_thumbnail)) {
            log_in_file(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Не удалось удалить файл эскиза | Путь: $path_thumbnail"
            );
        }
        if (is_file($path_photo) && !unlink($path_photo)) {
            log_in_file(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Не удалось удалить файл изображения | Путь: $path_photo"
            );
        }
        // Удаление связанных записей из других таблиц
        $this->db->delete(TBL_RATE_USER, ['where' => '`id_foto` = :photo_id', 'params' => [':photo_id' => $photo_id]]);
        $this->db->delete(TBL_RATE_MODER, ['where' => '`id_foto` = :photo_id', 'params' => [':photo_id' => $photo_id]]);
        return true;
    }

    /**
     * @brief Получает данные о новостях в зависимости от типа запроса.
     *
     * @details Метод проверяет входные параметры, формирует запрос к базе данных и возвращает данные о новостях.
     *          Вся основная логика реализована в защищённом методе _news_internal().
     *          Редирект осуществляется только из класса Work.
     *
     * @callergraph
     * @callgraph
     *
     * @param int $news_id_or_limit Количество новостей или ID новости (в зависимости от параметра $act).
     *                                 Должен быть положительным целым числом.
     * @param string $act Тип запроса:
     *                                 - 'id': Получение новости по её ID.
     *                                 - 'last': Получение списка новостей с сортировкой по дате последнего редактирования.
     *
     * @return array Массив с данными о новостях. Если новостей нет, возвращается пустой массив.
     *
     * @throws InvalidArgumentException Если передан некорректный $act или $news_id_or_limit.
     *      Пример сообщения:
     *          Некорректный ID новости | Переменная $news_id_or_limit = [значение]
     * @throws RuntimeException         Если произошла ошибка при выполнении запроса к базе данных.
     *      Пример сообщения:
     *          Не удалось получить данные из базы данных | Тип запроса: '$act'
     *
     * @note Используются константы:
     *       - TBL_NEWS: Таблица для хранения данных о новостях.
     *
     * @warning Метод чувствителен к корректности входных параметров $news_id_or_limit и $act.
     *          Убедитесь, что передаются допустимые значения.
     * @warning Если новости не найдены, метод возвращает пустой массив.
     *
     * Пример использования метода:
     * @code
     * // Получение новости с ID = 5
     * $core_logic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $news_by_id = $core_logic->news(5, 'id');
     * print_r($news_by_id);
     *
     * // Получение 10 последних новостей
     * $news_list = $core_logic->news(10, 'last');
     * print_r($news_list);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::$db Свойство, содержащее объект для работы с базой данных.
     *
     * @see PhotoRigma::Classes::Work::news() Метод из родительского класса.
     * @see PhotoRigma::Classes::Work_CoreLogic::_news_internal() Защищённый метод, реализующий основную логику.
     */
    public function news(int $news_id_or_limit, string $act): array
    {
        return $this->_news_internal($news_id_or_limit, $act);
    }

    /**
     * @brief Получает данные о новостях в зависимости от типа запроса.
     *
     * @details Метод выполняет запросы к базе данных для получения данных о новостях, включая следующие шаги:
     * 1. Проверяет входные параметры $news_id_or_limit и $act на корректность.
     * 2. Формирует параметры запроса через match():
     *    - Для $act = 'id': Получает новость по её ID.
     *    - Для $act = 'last': Получает список новостей с сортировкой по дате последнего редактирования.
     * 3. Выполняет запрос к таблице TBL_NEWS с использованием параметров.
     * 4. Возвращает массив с данными о новостях или пустой массив, если новости не найдены.
     * Этот метод содержит основную логику, вызываемую через публичный метод news().
     *
     * @callergraph
     * @callgraph
     *
     * @param int $news_id_or_limit Количество новостей или ID новости (в зависимости от параметра $act).
     *                                 Должен быть положительным целым числом.
     * @param string $act Тип запроса:
     *                                 - 'id': Получение новости по её ID.
     *                                 - 'last': Получение списка новостей с сортировкой по дате последнего редактирования.
     *
     * @return array Массив с данными о новостях. Если новостей нет, возвращается пустой массив.
     *
     * @throws InvalidArgumentException Если передан некорректный $act или $news_id_or_limit.
     *      Пример сообщения:
     *          Некорректный ID новости | Переменная $news_id_or_limit = [значение]
     * @throws RuntimeException         Если произошла ошибка при выполнении запроса к базе данных.
     *      Пример сообщения:
     *          Не удалось получить данные из базы данных | Тип запроса: '$act'
     *
     * @note Используются константы:
     *       - TBL_NEWS: Таблица для хранения данных о новостях.
     *
     * @warning Метод чувствителен к корректности входных параметров $news_id_or_limit и $act.
     *          Убедитесь, что передаются допустимые значения.
     * @warning Если новости не найдены, метод возвращает пустой массив.
     *
     * Пример вызова метода внутри класса или наследника:
     * @code
     * // Получение новости с ID = 5
     * $news_by_id = $this->_news_internal(5, 'id');
     * print_r($news_by_id);
     *
     * // Получение 10 последних новостей
     * $news_list = $this->_news_internal(10, 'last');
     * print_r($news_list);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::$db
     *      Свойство, содержащее объект для работы с базой данных.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::news()
     *      Публичный метод-редирект для вызова этой логики.
     */
    protected function _news_internal(int $news_id_or_limit, string $act): array
    {
        // Проверка входных данных
        if ($act === 'id') {
            if (!filter_var($news_id_or_limit, FILTER_VALIDATE_INT)) {
                throw new InvalidArgumentException(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Некорректный ID новости | Переменная \$news_id_or_limit = $news_id_or_limit"
                );
            }
        } elseif ($act === 'last') {
            if ($news_id_or_limit <= 0 || !filter_var($news_id_or_limit, FILTER_VALIDATE_INT)) {
                throw new InvalidArgumentException(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Некорректное количество новостей | Переменная \$news_id_or_limit = $news_id_or_limit"
                );
            }
        } else {
            // Обработка некорректного типа запроса
            throw new InvalidArgumentException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Некорректный тип запроса | Переменная \$act = '$act'"
            );
        }
        // Формирование параметров запроса через match()
        $query_params = match ($act) {
            'id' => [
                // Формируем запрос для 'id'
                'table' => TBL_NEWS,
                'where' => '`id` = :id',
                'params' => [':id' => $news_id_or_limit],
            ],
            'last' => [
                // Формируем запрос для 'last'
                'table' => TBL_NEWS,
                'order_by' => ['data_last_edit' => 'DESC'],
                'limit' => $news_id_or_limit,
            ],
        };
        // Выполняем запрос по результатам match()
        $this->db->select(
            '*',
            $query_params['table'],
            array_filter([
                'where' => $query_params['where'] ?? null,
                'params' => $query_params['params'] ?? [],
                'order_by' => $query_params['order_by'] ?? null,
                'limit' => $query_params['limit'] ?? null,
            ])
        );
        // Получение результатов
        $news_results = $this->db->res_arr();
        //        if (!$news_results) {
        //            throw new \RuntimeException(
        //                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Не удалось получить данные из базы данных | Тип запроса: '$act'"
        //            );
        //        }
        // Возврат результата
        return $news_results ?: [];
    }

    /**
     * @brief Загружает доступные языки из директории /language/.
     *
     * @details Метод проверяет существование директории `/language/`, перебирает её поддиректории,
     *          проверяет наличие и корректность файла `main.php`, формирует список доступных языков.
     *          Вся основная логика реализована в защищённом методе _get_languages_internal().
     *
     * @callergraph
     * @callgraph
     *
     * @return array Массив с данными о доступных языках. Каждый элемент массива содержит:
     *               - `value`: Имя директории языка (строка).
     *               - `name`: Название языка из файла `main.php` (строка).
     *
     * @throws RuntimeException|Exception Если:
     *                           - Директория `/language/` недоступна или не существует.
     *                           - Ни один язык не найден в указанной директории.
     *
     * @note Используются следующие параметры из свойства $this->config:
     *       - site_dir: Базовый путь к директории сайта, содержащей поддиректорию `/language/`.
     *
     * @warning Метод чувствителен к структуре директории `/language/` и содержимому файла `main.php`.
     *          Убедитесь, что файл `main.php` содержит корректную переменную `$lang_name`.
     * @warning Если директория `/language/` недоступна или пуста, метод выбрасывает исключение.
     *
     * Пример использования метода:
     * @code
     * // Получение списка доступных языков
     * $core_logic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $languages = $core_logic->get_languages();
     * foreach ($languages as $language) {
     *     echo "Язык: " . $language['name'] . " (ID: " . $language['value'] . ")\n";
     * }
     * @endcode
     * @see PhotoRigma::Include::log_in_file() Функция для логирования ошибок.
     * @see PhotoRigma::Classes::Work::get_languages() Публичный метод-редирект из класса Work.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::_get_languages_internal() Защищённый метод, реализующий основную логику.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config Свойство, содержащее конфигурацию приложения, включая путь к директории (`site_dir`).
     */
    public function get_languages(): array
    {
        return $this->_get_languages_internal();
    }

    /**
     * @brief Загружает доступные языки из директории /language/.
     *
     * @details Метод выполняет загрузку доступных языков, включая следующие шаги:
     * 1. Нормализует путь к директории `/language/` и проверяет её существование.
     * 2. Перебирает все поддиректории в `/language/` и проверяет наличие файла `main.php`.
     * 3. Для каждой поддиректории:
     *    - Проверяет доступность файла `main.php`.
     *    - Безопасно подключает файл и проверяет наличие переменной `$lang_name`.
     *    - Если переменная `$lang_name` определена и корректна, добавляет язык в список доступных.
     * 4. Возвращает массив с данными о доступных языках или выбрасывает исключение, если языки не найдены.
     * Этот метод является защищенным и предназначен для использования внутри класса или его наследников.
     * Основная логика метода вызывается через публичный метод get_languages().
     *
     * @callergraph
     * @callgraph
     *
     * @return array Массив с данными о доступных языках. Каждый элемент массива содержит:
     *               - `value`: Имя директории языка (строка).
     *               - `name`: Название языка из файла `main.php` (строка).
     *
     * @throws RuntimeException|Exception Если:
     *                           - Директория `/language/` недоступна или не существует.
     *                           - Ни один язык не найден в указанной директории.
     *
     * @note Используются следующие параметры из свойства $this->config:
     *       - site_dir: Базовый путь к директории сайта, содержащей поддиректорию `/language/`.
     *
     * @warning Метод чувствителен к структуре директории `/language/` и содержимому файла `main.php`.
     *          Убедитесь, что файл `main.php` содержит корректную переменную `$lang_name`.
     * @warning Если директория `/language/` недоступна или пуста, метод выбрасывает исключение.
     *
     * Пример вызова метода внутри класса или наследника:
     * @code
     * // Получение списка доступных языков
     * $languages = $this->_get_languages_internal();
     * foreach ($languages as $language) {
     *     echo "Язык: " . $language['name'] . " (ID: " . $language['value'] . ")\n";
     * }
     * @endcode
     * @see PhotoRigma::Include::log_in_file()
     *      Функция для логирования ошибок.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::get_languages()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config
     *      Свойство, содержащее конфигурацию приложения, включая путь к директории (`site_dir`).
     */
    protected function _get_languages_internal(): array
    {
        $list_languages = [];
        // Нормализуем путь к site_dir и проверяем его существование
        $site_dir = realpath(rtrim($this->config['site_dir'], '/'));
        $language_dir = $site_dir . '/language/';
        if (!is_dir($language_dir) || !is_readable($language_dir)) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Директория языков недоступна или не существует | Путь: $language_dir"
            );
        }
        // Проверяем, что директория не пуста
        $iterator = new DirectoryIterator($language_dir);
        $has_subdirs = false;
        foreach ($iterator as $file) {
            if (!$file->isDot() && $file->isDir()) {
                $has_subdirs = true;
                break;
            }
        }
        if (!$has_subdirs) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Директория языков пуста | Путь: $language_dir"
            );
        }
        // Перебираем поддиректории
        foreach ($iterator as $file) {
            if ($file->isDot() || !$file->isDir()) {
                continue;
            }
            $lang_subdir = $file->getPathname();
            // Проверяем, что директория существует и доступна для чтения
            if (!is_dir($lang_subdir) || !is_readable($lang_subdir)) {
                log_in_file(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Поддиректория языка недоступна для чтения | Директория: $lang_subdir"
                );
                continue;
            }
            // Формируем полный путь к main.php и нормализуем его
            $main_php_path = realpath($lang_subdir . '/main.php');
            if ($main_php_path === false || !is_file($main_php_path) || !is_readable($main_php_path)) {
                log_in_file(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Файл main.php отсутствует или недоступен | Директория: $lang_subdir"
                );
                continue;
            }
            // Проверяем, что файл находится внутри разрешенной директории
            if (strncmp($main_php_path, $language_dir, strlen($language_dir)) !== 0) {
                log_in_file(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Подозрительный путь к файлу main.php | Директория: $lang_subdir"
                );
                continue;
            }
            // Безопасное подключение файла
            $lang_data = include($main_php_path);
            $lang_name = $lang_data['lang_name'];
            unset($lang_data);
            if (!is_string($lang_name) || trim($lang_name) === '') {
                log_in_file(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Переменная \$lang_name не определена или некорректна | Файл: $main_php_path"
                );
                continue;
            }
            $list_languages[] = [
                'value' => $file->getFilename(),
                'name' => mb_trim($lang_name),
            ];
        }
        if (empty($list_languages)) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Ни один язык не найден | Путь: $language_dir"
            );
        }
        return $list_languages;
    }

    /**
     * @brief Загружает доступные темы из директории /themes/.
     *
     * @details Метод проверяет существование директории `/themes/`, перебирает её поддиректории,
     *          проверяет их доступность и добавляет имена поддиректорий в список доступных тем.
     *          Вся основная логика реализована в защищённом методе _get_themes_internal().
     *
     * @callergraph
     * @callgraph
     *
     * @return array Массив с именами доступных тем.
     *
     * @throws RuntimeException|Exception Если:
     *                           - Директория `/themes/` не существует или недоступна для чтения.
     *                           - Ни одна тема не найдена в указанной директории.
     *
     * @note Используются следующие параметры из свойства $this->config:
     *       - site_dir: Базовый путь к директории сайта, содержащей поддиректорию `/themes/`.
     *
     * @warning Метод чувствителен к структуре директории `/themes/`.
     *          Убедитесь, что директория существует и содержит хотя бы одну поддиректорию.
     * @warning Если директория `/themes/` недоступна или пуста, метод выбрасывает исключение.
     *
     * Пример использования метода:
     * @code
     * // Получение списка доступных тем
     * $core_logic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $themes = $core_logic->get_themes();
     * foreach ($themes as $theme) {
     *     echo "Доступная тема: $theme\n";
     * }
     * @endcode
     * @see PhotoRigma::Classes::Work::get_themes() Публичный метод-редирект из класса Work.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::_get_themes_internal() Защищённый метод, реализующий основную логику.
     * @see PhotoRigma::Include::log_in_file() Функция для логирования ошибок.
     */
    public function get_themes(): array
    {
        return $this->_get_themes_internal();
    }

    /**
     * @brief Загружает доступные темы из директории /themes/.
     *
     * @details Метод выполняет загрузку доступных тем, включая следующие шаги:
     * 1. Нормализует путь к директории `/themes/` и проверяет её существование.
     * 2. Перебирает все поддиректории в `/themes/`.
     * 3. Для каждой поддиректории:
     *    - Проверяет доступность директории.
     *    - Проверяет, что директория находится внутри разрешенной директории `/themes/`.
     *    - Добавляет имя поддиректории в список доступных тем.
     * 4. Возвращает массив с именами доступных тем или выбрасывает исключение, если темы не найдены.
     * Этот метод является защищенным и предназначен для использования внутри класса или его наследников.
     * Основная логика метода вызывается через публичный метод get_themes().
     *
     * @callergraph
     * @callgraph
     *
     * @return array Массив с именами доступных тем.
     *
     * @throws RuntimeException|Exception Если:
     *                           - Директория `/themes/` не существует или недоступна для чтения.
     *                           - Ни одна тема не найдена в указанной директории.
     *
     * @note Используются следующие параметры из свойства $this->config:
     *       - site_dir: Базовый путь к директории сайта, содержащей поддиректорию `/themes/`.
     *
     * @warning Метод чувствителен к структуре директории `/themes/`.
     *          Убедитесь, что директория существует и содержит хотя бы одну поддиректорию.
     * @warning Если директория `/themes/` недоступна или пуста, метод выбрасывает исключение.
     *
     * Пример вызова метода внутри класса или наследника:
     * @code
     * // Получение списка доступных тем
     * $themes = $this->_get_themes_internal();
     * foreach ($themes as $theme) {
     *     echo "Доступная тема: $theme\n";
     * }
     * @endcode
     * @see PhotoRigma::Include::log_in_file()
     *      Функция для логирования ошибок.
     *
     * @see PhotoRigma::Classes::Work_CoreLogic::get_themes()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config
     *      Свойство, содержащее конфигурацию приложения, включая путь к директории (`site_dir`).
     */
    protected function _get_themes_internal(): array
    {
        $list_themes = [];
        // Нормализуем путь к site_dir
        $site_dir = realpath(rtrim($this->config['site_dir'], '/'));
        $themes_dir = $site_dir . '/themes/';
        // Проверяем существование и доступность директории /themes/
        if (!is_dir($themes_dir) || !is_readable($themes_dir)) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Директория тем недоступна | Путь: $themes_dir"
            );
        }
        // Проверяем, что директория не пуста
        $iterator = new DirectoryIterator($themes_dir);
        $has_subdirs = false;
        foreach ($iterator as $file) {
            if (!$file->isDot() && $file->isDir()) {
                $has_subdirs = true;
                break;
            }
        }
        if (!$has_subdirs) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Директория тем пуста | Путь: $themes_dir"
            );
        }
        // Перебираем поддиректории
        foreach ($iterator as $file) {
            // Пропускаем точки (.) и файлы
            if ($file->isDot() || !$file->isDir()) {
                continue;
            }
            // Получаем нормализованный путь к поддиректории
            $theme_dir = $file->getRealPath();
            // Проверяем, что директория доступна для чтения
            if (!is_readable($theme_dir)) {
                log_in_file(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Поддиректория темы недоступна для чтения | Директория: $theme_dir"
                );
                continue;
            }
            // Проверяем, что директория находится внутри $themes_dir
            if (strncmp($theme_dir, $themes_dir, strlen($themes_dir)) !== 0) {
                log_in_file(
                    __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Подозрительная директория темы | Директория: $theme_dir"
                );
                continue;
            }
            // Добавляем имя папки в список тем
            $list_themes[] = $file->getFilename();
        }
        // Если ни одна тема не найдена, выбрасываем исключение
        if (empty($list_themes)) {
            throw new RuntimeException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Ни одна тема не найдена | Путь: $themes_dir"
            );
        }
        return $list_themes;
    }

    /**
     * @brief Генерирует блок данных для вывода изображений различных типов.
     *
     * @details Метод является редиректом, вызывающим защищённый метод `_create_photo_internal()`.
     *          Основная логика включает:
     *          1. Проверку прав пользователя на просмотр изображений (`$this->user->user['pic_view']`).
     *          2. Формирование SQL-запроса для получения данных изображения:
     *             - Для типа `'top'`: Выбирает лучшее изображение с учетом рейтинга.
     *             - Для типа `'last'`: Выбирает последнее загруженное изображение.
     *             - Для типа `'cat'`: Выбирает изображение из конкретной категории по `$id_photo`.
     *             - Для типа `'rand'`: Выбирает любое случайное изображение.
     *          3. Проверку существования файла изображения и его доступности.
     *          4. Вычисление размеров изображения через метод `size_image()`.
     *          5. Возврат массива данных для вывода изображения или вызов `generate_photo_data()` в случае ошибки.
     *
     *          Редирект осуществляется только из класса `Work`.
     *
     * @callergraph
     * @callgraph
     *
     * @param string $type Тип изображения:
     *                     - `'top'`: Лучшее изображение (по рейтингу).
     *                     - `'last'`: Последнее загруженное изображение.
     *                     - `'cat'`: Изображение из конкретной категории (требует указания `$id_photo`).
     *                     - `'rand'`: Любое случайное изображение.
     * @param int $id_photo Идентификатор фото. Используется только при `$type == 'cat'`. Должен быть >= `0`.
     *
     * @return array Массив данных для вывода изображения:
     *               - `'name_block'`         (string): Название блока изображения (например, "Лучшее фото").
     *               - `'url'`                (string): URL для просмотра полного изображения.
     *               - `'thumbnail_url'`      (string): URL для миниатюры изображения.
     *               - `'name'`               (string): Название изображения.
     *               - `'description'`        (string): Описание изображения.
     *               - `'category_name'`      (string): Название категории.
     *               - `'category_description'` (string): Описание категории.
     *               - `'rate'`               (string): Рейтинг изображения (например, "Рейтинг: 5/10").
     *               - `'url_user'`           (string|null): URL профиля пользователя, добавившего изображение.
     *               - `'real_name'`          (string): Реальное имя пользователя.
     *               - `'category_url'`       (string): URL категории или пользовательского альбома.
     *               - `'width'`              (int): Ширина изображения после масштабирования.
     *               - `'height'`             (int): Высота изображения после масштабирования.
     *
     * @throws InvalidArgumentException Если передан недопустимый `$type` или `$id_photo < 0`.
     *                                  Пример сообщения: "Некорректный идентификатор фотографии | Значение: {$id_photo}".
     * @throws PDOException            Если произошла ошибка при выборке данных из базы данных.
     *                                  Пример сообщения: "Ошибка базы данных | Не удалось получить данные категории с ID: {$photo_data['category']}".
     * @throws RuntimeException|Exception         Если файл изображения недоступен или не существует.
     *
     * @note Используются следующие параметры из свойства `$this->config`:
     *       - `site_dir`: Базовый путь к директории сайта.
     *       - `gallery_folder`: Путь к каталогу полноразмерных изображений.
     *       - `site_url`: URL сайта, используемый для формирования ссылок.
     *
     *       Используются следующие константы:
     *       - TBL_PHOTO: Таблица для хранения данных об изображениях.
     *       - TBL_USERS: Таблица для хранения данных о пользователях.
     *       - TBL_CATEGORY: Таблица для хранения данных о категориях.
     *
     * @warning Метод чувствителен к правам доступа пользователя (`$this->user->user['pic_view']`).
     *          Убедитесь, что пользователь имеет право на просмотр изображений.
     * @warning Если файл изображения недоступен или не существует, метод возвращает данные по умолчанию через `generate_photo_data()`.
     * @warning Проверка пути к файлу изображения гарантирует, что доступ возможен только к файлам внутри `$this->config['gallery_folder']`.
     *
     * Пример использования метода:
     * @code
     * // Получение данных для вывода лучшего изображения
     * $core_logic = new \PhotoRigma\Classes\Work_CoreLogic();
     * $top_photo = $core_logic->create_photo('top', 0);
     * print_r($top_photo);
     *
     * // Получение данных для вывода изображения из категории с ID = 5
     * $category_photo = $core_logic->create_photo('cat', 5);
     * print_r($category_photo);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::_create_photo_internal() Защищённый метод, реализующий основную логику.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config Свойство, содержащее конфигурацию приложения.
     * @see PhotoRigma::Classes::Work_CoreLogic::$user Свойство, содержащее данные текущего пользователя.
     * @see PhotoRigma::Classes::Work_CoreLogic::generate_photo_data() Приватный метод для формирования массива данных по умолчанию.
     * @see PhotoRigma::Classes::Work::size_image() Метод, используемый для вычисления размеров изображения.
     * @see PhotoRigma::Include::log_in_file() Функция для логирования ошибок.
     * @see PhotoRigma::Classes::Work::clean_field() Метод для очистки данных.
     * @see PhotoRigma::Classes::Work::create_photo() Публичный метод-редирект из класса `Work`.
     *
     */
    public function create_photo(string $type = 'top', int $id_photo = 0): array
    {
        return $this->_create_photo_internal($type, $id_photo);
    }

    /**
     * @brief Генерирует блок данных для вывода изображений различных типов.
     *
     * @details Метод выполняет следующие шаги:
     *          1. Проверяет права пользователя на просмотр изображений (`$this->user->user['pic_view']`).
     *          2. Формирует SQL-запрос для получения данных изображения и пользователя через JOIN:
     *             - Для типа `'top'`: Выбирает лучшее изображение с учетом рейтинга.
     *             - Для типа `'last'`: Выбирает последнее загруженное изображение.
     *             - Для типа `'cat'`: Выбирает изображение из конкретной категории по `$id_photo`.
     *             - Для типа `'rand'`: Выбирает любое случайное изображение.
     *          3. Проверяет существование файла изображения и его доступность.
     *          4. Вычисляет размеры изображения через метод `size_image()`.
     *          5. Возвращает массив данных для вывода изображения или вызывает `generate_photo_data()` в случае ошибки.
     *
     *          Этот метод является защищенным и предназначен для использования внутри класса или его наследников.
     *          Основная логика метода вызывается через публичный метод `create_photo()`.
     *
     * @callergraph
     * @callgraph
     *
     * @param string $type Тип изображения:
     *                     - `'top'`: Лучшее изображение (по рейтингу).
     *                     - `'last'`: Последнее загруженное изображение.
     *                     - `'cat'`: Изображение из конкретной категории (требует указания `$id_photo`).
     *                     - `'rand'`: Любое случайное изображение.
     * @param int $id_photo Идентификатор фото. Используется только при `$type == 'cat'`. Должен быть >= `0`.
     *
     * @return array Массив данных для вывода изображения:
     *               - `'name_block'`         (string): Название блока изображения (например, "Лучшее фото").
     *               - `'url'`                (string): URL для просмотра полного изображения.
     *               - `'thumbnail_url'`      (string): URL для миниатюры изображения.
     *               - `'name'`               (string): Название изображения.
     *               - `'description'`        (string): Описание изображения.
     *               - `'category_name'`      (string): Название категории.
     *               - `'category_description'` (string): Описание категории.
     *               - `'rate'`               (string): Рейтинг изображения (например, "Рейтинг: 5/10").
     *               - `'url_user'`           (string|null): URL профиля пользователя, добавившего изображение.
     *               - `'real_name'`          (string): Реальное имя пользователя.
     *               - `'category_url'`       (string): URL категории или пользовательского альбома.
     *               - `'width'`              (int): Ширина изображения после масштабирования.
     *               - `'height'`             (int): Высота изображения после масштабирования.
     *
     * @throws InvalidArgumentException Если передан недопустимый `$type` или `$id_photo < 0`.
     *                                  Пример сообщения: "Некорректный идентификатор фотографии | Значение: {$id_photo}".
     * @throws PDOException            Если произошла ошибка при выборке данных из базы данных.
     *                                  Пример сообщения: "Ошибка базы данных | Не удалось получить данные категории с ID: {$photo_data['category']}".
     * @throws RuntimeException|Exception         Если файл изображения недоступен или не существует.
     *
     * @note Используются следующие параметры из свойства `$this->config`:
     *       - `site_dir`: Базовый путь к директории сайта.
     *       - `gallery_folder`: Путь к каталогу полноразмерных изображений.
     *       - `site_url`: URL сайта, используемый для формирования ссылок.
     *
     *       Используются следующие константы:
     *       - TBL_PHOTO: Таблица для хранения данных об изображениях.
     *       - TBL_USERS: Таблица для хранения данных о пользователях.
     *       - TBL_CATEGORY: Таблица для хранения данных о категориях.
     *
     * @warning Метод чувствителен к правам доступа пользователя (`$this->user->user['pic_view']`).
     *          Убедитесь, что пользователь имеет право на просмотр изображений.
     * @warning Если файл изображения недоступен или не существует, метод возвращает данные по умолчанию через `generate_photo_data()`.
     * @warning Проверка пути к файлу изображения гарантирует, что доступ возможен только к файлам внутри `$this->config['gallery_folder']`.
     *
     * Пример вызова метода внутри класса или наследника:
     * @code
     * // Получение данных для вывода лучшего изображения
     * $top_photo = $this->_create_photo_internal('top', 0);
     * print_r($top_photo);
     *
     * // Получение данных для вывода изображения из категории с ID = 5
     * $category_photo = $this->_create_photo_internal('cat', 5);
     * print_r($category_photo);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::create_photo()
     *      Публичный метод-редирект для вызова этой логики.
     * @see PhotoRigma::Classes::Work_CoreLogic::$config
     *      Свойство, содержащее конфигурацию приложения.
     * @see PhotoRigma::Classes::Work_CoreLogic::$user
     *      Свойство, содержащее данные текущего пользователя.
     * @see PhotoRigma::Classes::Work_CoreLogic::generate_photo_data()
     *      Приватный метод для формирования массива данных по умолчанию.
     * @see PhotoRigma::Classes::Work::size_image()
     *      Метод, используемый для вычисления размеров изображения.
     * @see PhotoRigma::Include::log_in_file()
     *      Функция для логирования ошибок.
     * @see PhotoRigma::Classes::Work::clean_field()
     *      Метод для очистки данных.
     *
     */
    protected function _create_photo_internal(string $type = 'top', int $id_photo = 0): array
    {
        // Валидация входных данных $id_photo
        if ($id_photo < 0) {
            throw new InvalidArgumentException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Некорректный идентификатор фотографии | Значение: $id_photo"
            );
        }

        // Нормализация значения $type (гарантируем, что оно будет одним из допустимых)
        $type = match ($type) {
            'top', 'last', 'cat', 'rand' => $type,
            default => 'rand', // Если тип неизвестен, считаем, что это случайное фото
        };

        // Проверка прав доступа
        if ($this->user->user['pic_view']) {
            // Определение условий выборки
            $options = match ($type) {
                'top' => [
                    'where' => '`rate_user` != 0',
                    'order' => '`rate_user` DESC',
                    'limit' => 1,
                ],
                'last' => [
                    'order' => '`date_upload` DESC',
                    'limit' => 1,
                ],
                'cat' => [
                    'where' => '`id` = :id_photo',
                    'limit' => 1,
                    'params' => [':id_photo' => $id_photo],
                ],
                'rand' => [
                    'order' => 'rand()',
                    'limit' => 1,
                ],
            };

            // Выполнение запроса к базе данных
            $this->db->select(
                [
                    '`id`',
                    '`file`',
                    '`name`',
                    '`description`',
                    '`category`',
                    '`rate_user`',
                    '`rate_moder`',
                    '`user_upload`'
                ],
                TBL_PHOTO,
                $options
            );
            $photo_data = $this->db->res_row();

            // Если изображение не найдено, возвращаем данные по умолчанию
            if (!$photo_data) {
                $size = $this->work->size_image(
                    $this->config['site_dir'] . $this->config['gallery_folder'] . '/no_foto.png'
                );
                return $this->generate_photo_data(['width' => $size['width'], 'height' => $size['height']], $type);
            }
        } else {
            $size = $this->work->size_image(
                $this->config['site_dir'] . $this->config['gallery_folder'] . '/no_foto.png'
            );
            return $this->generate_photo_data(['width' => $size['width'], 'height' => $size['height']], $type);
        }

        // Получение данных категории
        $this->db->select(
            ['*'],
            TBL_CATEGORY,
            [
                'where' => '`id` = :category_id',
                'params' => [':category_id' => $photo_data['category']],
            ]
        );
        $category_data = $this->db->res_row();
        if (!$category_data) {
            throw new PDOException(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Ошибка базы данных | Не удалось получить данные категории с ID: {$photo_data['category']}"
            );
        }

        // Формирование пути к файлу изображения
        $image_path = $this->config['site_dir'] . $this->config['gallery_folder'] . '/' . ($category_data['folder'] ?? '') . '/' . $photo_data['file'];

        // Ограничение доступа к файлам через $image_path
        $base_dir = realpath($this->config['site_dir'] . $this->config['gallery_folder']);
        $resolved_path = realpath($image_path);
        if (!$resolved_path || !str_starts_with($resolved_path, $base_dir)) {
            log_in_file(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Попытка доступа к недопустимому пути | Путь: $image_path"
            );
            $image_path = $this->config['site_dir'] . $this->config['gallery_folder'] . '/no_foto.png';
        }

        // Проверка существования файла
        if (!file_exists($image_path) || !is_readable($image_path)) {
            log_in_file(
                __FILE__ . ":" . __LINE__ . " (" . (__METHOD__ ?: __FUNCTION__ ?: 'global') . ") | Файл не найден или недоступен | Путь: $image_path, Пользователь: " . ($this->user->user['id'] ?? 'неизвестный')
            );
            $image_path = $this->config['site_dir'] . $this->config['gallery_folder'] . '/no_foto.png';
        }

        // Вычисление размеров изображения
        $size = $this->work->size_image($image_path);

        // Получение данных пользователя
        $this->db->select(
            ['`real_name`'],
            TBL_USERS,
            [
                'where' => '`id` = :user_id',
                'params' => [':user_id' => $photo_data['user_upload']],
            ]
        );
        $user_data = $this->db->res_row();

        // Формирование массива данных для передачи в generate_photo_data
        $photo_data_for_generate = [
            'name_block' => $this->lang['main'][$type . '_foto'],
            'url' => sprintf('%s?action=photo&amp;id=%d', $this->config['site_url'], $photo_data['id']),
            'thumbnail_url' => sprintf(
                '%s?action=attach&amp;foto=%d&amp;thumbnail=1',
                $this->config['site_url'],
                $photo_data['id']
            ),
            'name' => Work::clean_field($photo_data['name']),
            'description' => Work::clean_field($photo_data['description']),
            'category_name' => Work::clean_field($category_data['name']),
            'category_description' => Work::clean_field($category_data['description']),
            'rate' => $this->lang['main']['rate'] . ': ' . $photo_data['rate_user'] . '/' . $photo_data['rate_moder'],
            'url_user' => $user_data ? sprintf(
                '%s?action=profile&amp;subact=profile&amp;uid=%d',
                $this->config['site_url'],
                $photo_data['user_upload']
            ) : '',
            'real_name' => $user_data ? Work::clean_field($user_data['real_name']) : $this->lang['main']['no_user_add'],
            'category_url' => sprintf(
                '%s?action=category&amp;cat=%d',
                $this->config['site_url'],
                $category_data['id']
            ),
            'width' => $size['width'],
            'height' => $size['height'],
        ];

        // Генерация данных изображения
        return $this->generate_photo_data($photo_data_for_generate, $type);
    }

    /**
     * @brief Генерирует массив данных для вывода изображения.
     *
     * @details Метод формирует массив данных для вывода изображения, используя значения по умолчанию
     *          или данные, переданные в параметре `$photo_data`. Если какое-либо значение отсутствует
     *          в `$photo_data`, используется соответствующее значение по умолчанию. Значения по умолчанию
     *          берутся из конфигурации приложения (`$this->config`) и языковых переменных (`$this->lang`).
     *          Этот метод является приватным и предназначен только для использования внутри класса.
     *
     * @callergraph
     * @callgraph
     *
     * @param array $photo_data Массив данных изображения, полученных из базы данных.
     *                          Может быть пустым, если требуется сгенерировать массив только со значениями по умолчанию.
     * @param string $type Тип изображения: `'top'`, `'last'`, `'cat'` или `'rand'`.
     *                     По умолчанию: `'top'`.
     *
     * @return array Массив данных для вывода изображения:
     *               - 'name_block'         (string): Название блока изображения.
     *               - 'url'                (string): URL для просмотра полного изображения.
     *               - 'thumbnail_url'      (string): URL для миниатюры изображения.
     *               - 'name'               (string): Название изображения.
     *               - 'description'        (string): Описание изображения.
     *               - 'category_name'      (string): Название категории.
     *               - 'category_description' (string): Описание категории.
     *               - 'rate'               (string): Рейтинг изображения (например, "Рейтинг: 0/0").
     *               - 'url_user'           (string|null): URL профиля пользователя, добавившего изображение.
     *               - 'real_name'          (string): Реальное имя пользователя.
     *               - 'category_url'       (string): URL категории.
     *               - 'width'              (int): Ширина изображения.
     *               - 'height'             (int): Высота изображения.
     *
     * @note Используются параметры конфигурации:
     *       - site_url: URL сайта, используемый для формирования ссылок на изображения и категории.
     *
     * @warning Метод зависит от конфигурации приложения (`$this->config`) и языковых переменных (`$this->lang`).
     *          Убедитесь, что эти свойства правильно инициализированы перед вызовом метода.
     *
     * Пример вызова метода внутри класса:
     * @code
     * // Пример генерации массива данных только со значениями по умолчанию
     * $default_photo = $this->generate_photo_data();
     * print_r($default_photo);
     *
     * // Пример с передачей данных
     * $photo_data = [
     *     'name' => 'Лучшее фото',
     *     'description' => 'Описание лучшего фото',
     * ];
     * $photo_block = $this->generate_photo_data($photo_data, 'top');
     * print_r($photo_block);
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::$config Свойство, содержащее конфигурацию приложения.
     * @see PhotoRigma::Classes::Work_CoreLogic::$lang Свойство, содержащее языковые переменные.
     * @see PhotoRigma::Classes::Work_CoreLogic::_create_photo_internal() Метод, вызывающий этот приватный метод.
     *
     */
    private function generate_photo_data(array $photo_data = [], string $type = 'top'): array
    {
        // Значения по умолчанию
        $default_data = [
            'name_block' => $this->lang['main'][$type . '_foto'],
            'url' => sprintf('%s?action=photo&amp;id=0', $this->config['site_url']),
            'thumbnail_url' => sprintf('%s?action=attach&amp;foto=0&amp;thumbnail=1', $this->config['site_url']),
            'name' => $this->lang['main']['no_foto'],
            'description' => $this->lang['main']['no_foto'],
            'category_name' => $this->lang['main']['no_category'],
            'category_description' => $this->lang['main']['no_category'],
            'rate' => $this->lang['main']['rate'] . ': ' . $this->lang['main']['no_foto'],
            'url_user' => '',
            'real_name' => $this->lang['main']['no_user_add'],
            'category_url' => $this->config['site_url'],
            'width' => 0,
            'height' => 0,
        ];

        // Обновление значений по умолчанию данными из $photo_data
        foreach ($default_data as $key => $value) {
            if (isset($photo_data[$key])) {
                $default_data[$key] = $photo_data[$key];
            }
        }

        return $default_data;
    }

    /**
     * @brief Обрабатывает добавление новой оценки и пересчитывает среднюю оценку через вызов защищённого метода.
     *
     * @details Этот публичный метод является редиректом, который вызывает защищённый метод
     * `_process_rating_internal()` для выполнения следующих действий:
     *          - Вставляет новую оценку в указанную таблицу через `$this->db->insert()`.
     *          - Проверяет успешность вставки по значению `get_last_insert_id()`.
     *          - Пересчитывает среднюю оценку на основе всех оценок для фотографии.
     *          Дополнительные проверки или преобразования данных перед вызовом защищённого метода отсутствуют.
     *          Метод предназначен для использования вне класса и вызывается через "фасад" в родительском классе
     *          `PhotoRigma::Classes::Work::process_rating()`.
     *
     * @callergraph
     * @callgraph
     *
     * @param string $table Имя таблицы для вставки оценки.
     *                      Должен быть строкой, соответствующей существующей таблице в базе данных.
     * @param int $photo_id ID фотографии.
     *                      Должен быть положительным целым числом.
     * @param int $user_id ID пользователя.
     *                     Должен быть положительным целым числом.
     * @param int $rate_value Значение оценки.
     *                        Должен быть целым числом в диапазоне допустимых значений (например, 1–5).
     *
     * @return float Возвращает число с плавающей точкой, представляющее среднюю оценку.
     *               Если оценок нет, возвращается `0`.
     *
     * @throws RuntimeException Выбрасывается исключение, если не удалось добавить оценку.
     *                           Причина: `get_last_insert_id()` возвращает `0`, что указывает на неудачную вставку.
     *
     * @note Метод использует базу данных для вставки и выборки данных.
     *
     * @warning Убедитесь, что таблица существует и данные корректны перед вызовом метода.
     *
     * Пример внешнего вызова метода:
     * @code
     * $object = new \PhotoRigma\Classes\Work_CoreLogic();
     * $averageRate = $object->process_rating('ratings', 123, 456, 5);
     * echo "Средняя оценка: {$averageRate}";
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::_process_rating_internal() Защищённый метод, реализующий основную логику.
     * @see PhotoRigma::Classes::Work::process_rating() Фасад в родительском классе, через который вызывается этот метод.
     *
     */
    public function process_rating(string $table, int $photo_id, int $user_id, int $rate_value): float
    {
        return $this->_process_rating_internal($table, $photo_id, $user_id, $rate_value);
    }

    /**
     * @brief Добавляет новую оценку в таблицу, проверяет успешность вставки и пересчитывает среднюю оценку.
     *
     * @details Этот защищенный метод выполняет следующие действия:
     *          - Вставляет новую оценку в указанную таблицу через `$this->db->insert()`.
     *          - Проверяет успешность вставки по значению `get_last_insert_id()`.
     *          - Пересчитывает среднюю оценку на основе всех оценок для фотографии.
     *          Метод вызывается через публичный метод-редирект `PhotoRigma::Classes::Work_CoreLogic::process_rating()`
     *          и предназначен для использования внутри класса или его наследников.
     *
     * @callergraph
     *
     * @param string $table Имя таблицы для вставки оценки.
     *                      Должен быть строкой, соответствующей существующей таблице в базе данных.
     * @param int $photo_id ID фотографии.
     *                      Должен быть положительным целым числом.
     * @param int $user_id ID пользователя.
     *                     Должен быть положительным целым числом.
     * @param int $rate_value Значение оценки.
     *                        Должен быть целым числом в диапазоне допустимых значений (например, 1–5).
     *
     * @return float Возвращает число с плавающей точкой, представляющее среднюю оценку.
     *               Если оценок нет, возвращается `0`.
     *
     * @throws RuntimeException Выбрасывается исключение, если не удалось добавить оценку.
     *                           Причина: `get_last_insert_id()` возвращает `0`, что указывает на неудачную вставку.
     *
     * @note Метод использует базу данных для вставки и выборки данных.
     *
     * @warning Убедитесь, что таблица существует и данные корректны перед вызовом метода.
     *
     * Пример вызова метода внутри класса или наследника:
     * @code
     * $averageRate = $this->_process_rating_internal('ratings', 123, 456, 5);
     * echo "Средняя оценка: {$averageRate}";
     * @endcode
     * @see PhotoRigma::Classes::Work_CoreLogic::process_rating() Публичный метод-редирект для вызова этой логики.
     *
     */
    protected function _process_rating_internal(string $table, int $photo_id, int $user_id, int $rate_value): float
    {
        // Вставка новой оценки
        $query_rate = [
            ':id_foto' => $photo_id,
            ':id_user' => $user_id,
            ':rate' => $rate_value
        ];
        $this->db->insert(
            ['`id_foto`' => ':id_foto', '`id_user`' => ':id_user', '`rate`' => ':rate'],
            $table,
            '',
            ['params' => $query_rate]
        );

        // Пересчет средней оценки
        $this->db->select('`rate`', $table, ['where' => '`id_foto` = :id_foto', 'params' => [':id_foto' => $photo_id]]);
        $rate = $this->db->res_arr();
        return $rate ? array_sum(array_column($rate, 'rate')) / count($rate) : 0;
    }
}
