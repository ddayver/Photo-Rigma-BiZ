<?php

/**
 * @file        include/Cache_Handler_Interface.php
 * @brief       Интерфейс для работы с системами кеширования.
 *
 * @author      Dark Dayver
 * @version     0.4.2
 * @date        2025-04-27
 * @namespace   PhotoRigma\\Interfaces
 *
 * @details     Этот файл содержит интерфейс `Cache_Handler_Interface`, который определяет контракт для работы с
 *              различными типами кеширования:
 *              - Файловое кеширование (`file`).
 *              - Redis.
 *              - Memcached.
 *              Интерфейс обеспечивает единообразие реализации различных систем кеширования и предоставляет методы для
 *              выполнения основных операций:
 *              - Проверка актуальности данных в кеше.
 *              - Запись данных в кеш.
 *              Все методы должны быть реализованы в классах, поддерживающих этот интерфейс.
 *
 * @section     CacheHandlerInterface_Main_Functions Основные функции
 *              - Проверка актуальности данных в кеше с использованием ключа и контрольного числа.
 *              - Запись данных в кеш с кодированием в формат JSON и Base64.
 *
 * @note        Этот файл является частью системы PhotoRigma и обеспечивает взаимодействие приложения с системами
 *              кеширования. Реализация интерфейса гарантирует унифицированный подход к работе с различными системами
 *              кеширования.
 *
 * @warning     Реализация методов интерфейса может отличаться от предыдущих версий. Убедитесь, что вы изучили новую
 *              документацию перед использованием.
 *
 * @copyright   Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license     MIT License (https://opensource.org/licenses/MIT)
 *              Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *              сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *              предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *              - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *                части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use JsonException;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . " [ERROR] | " . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . " | " . __FILE__ . " | Попытка прямого вызова файла"
    );
    die("HACK!");
}

/**
 * @interface Cache_Handler_Interface
 * @brief     Интерфейс для работы с системами кеширования.
 *
 * @details   Этот интерфейс определяет контракт для работы с различными типами кеширования:
 *            - Файловое кеширование (file).
 *            - Redis.
 *            - Memcached.
 *            Он предоставляет методы для выполнения основных операций с кешем:
 *            - Проверка актуальности данных.
 *            - Запись данных в кеш.
 *            Все методы должны быть реализованы в классах, поддерживающих этот интерфейс.
 *
 * @note      Интерфейс поддерживает только файловое кеширование, Redis и Memcached.
 *
 * @warning   Реализация методов интерфейса может отличаться от предыдущих версий. Убедитесь, что вы изучили новую
 *            документацию перед использованием.
 */
interface Cache_Handler_Interface
{
    /**
     * @brief   Проверяет актуальность данных в кеше.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает параметры для проверки актуальности данных: ключ кеша и контрольное число.
     *          2. В зависимости от типа кеширования проверяет данные:
     *             - Для файлового кеширования (`file`) используется файловый кеш.
     *             - Для Redis/Memcached используется хранилище.
     *          3. Возвращает массив данных, если кеш актуален, или `false`, если данные устарели или отсутствуют.
     *
     * @param string     $key      Ключ кеша. Используется для проверки актуальности данных.
     *                             Пример: `'user_settings'`.
     * @param int|string $checksum Контрольное число или хеш-строка для проверки актуальности данных.
     *                             Должно соответствовать сохранённому значению в кеше.
     *
     * @return array|false Массив данных, если кеш актуален, или `false`, если:
     *                     - Тип кеширования не поддерживается.
     *                     - Данные в кеше устарели или отсутствуют.
     *
     * @throws JsonException Выбрасывается при ошибках декодирования JSON:
     *                        Пример сообщения:
     *                            Ошибка декодирования JSON: [подробное описание ошибки]
     * @throws RuntimeException Выбрасывается при следующих условиях:
     *                           - Для Redis/Memcached:
     *                             - Если клиент хранилища не инициализирован или имеет неправильный тип.
     *                           Пример сообщения:
     *                               Клиент хранилища не инициализирован или имеет неправильный тип
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Неверные типы данных или некорректные значения могут привести к выбросу исключения.
     *          Убедитесь, что файлы кеша или хранилище правильно настроены и доступны для чтения.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $cacheHandler = new Cache_Handler();
     * $key = 'user_settings';
     * $checksum = 12345;
     * $data = $cacheHandler->is_valid($key, $checksum);
     *
     * if ($data !== false) {
     *     print_r($data); // Актуальные данные из кеша
     * } else {
     *     echo "Кеш устарел или отсутствует.";
     * }
     * @endcode
     */
    public function is_valid(string $key, int|string $checksum): array|false;

    /**
     * @brief   Записывает данные в кеш.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает параметры для записи данных: ключ кеша, контрольное число и данные.
     *          2. В зависимости от типа кеширования записывает данные:
     *             - Для файлового кеширования (`file`) используется файловый кеш.
     *             - Для Redis/Memcached используется хранилище.
     *          3. Возвращает `true`, если запись успешна, или `false`, если произошла ошибка.
     *
     * @param string     $key      Ключ кеша. Используется для записи данных.
     *                             Пример: `'user_settings'`.
     * @param int|string $checksum Контрольное число или хеш-строка для проверки актуальности данных.
     *                             Будет сохранено в кеше.
     * @param array      $data     Данные для записи. Будут закодированы в формат JSON и Base64.
     *                             Пример: `['theme' => 'dark', 'language' => 'en']`.
     *
     * @return bool True, если запись успешна, или `false`, если:
     *              - Тип кеширования не поддерживается.
     *              - Произошла ошибка при записи данных.
     *
     * @throws JsonException Выбрасывается при ошибках кодирования JSON:
     *                        Пример сообщения:
     *                            Ошибка кодирования JSON: [подробное описание ошибки]
     * @throws RuntimeException Выбрасывается при следующих условиях:
     *                           - Для файлового кеширования:
     *                             - Если директория для кеша не существует или недоступна для записи.
     *                             - Если файл кеша недоступен для записи.
     *                           - Для Redis/Memcached:
     *                             - Если клиент хранилища не инициализирован или имеет неправильный тип.
     *                           Пример сообщения:
     *                               Директория для кеша недоступна для записи | Путь: [путь]
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Неверные типы данных или некорректные значения могут привести к выбросу исключения.
     *          Убедитесь, что файлы кеша или хранилище правильно настроены и доступны для записи.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $cacheHandler = new Cache_Handler();
     * $key = 'user_settings';
     * $checksum = 12345;
     * $data = ['theme' => 'dark', 'language' => 'en'];
     *
     * if ($cacheHandler->update_cache($key, $checksum, $data)) {
     *     echo "Данные успешно записаны в кеш.";
     * } else {
     *     echo "Ошибка записи данных в кеш.";
     * }
     * @endcode
     */
    public function update_cache(string $key, int|string $checksum, array $data): bool;
}
