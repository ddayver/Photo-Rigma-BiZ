<?php

/**
 * @file        include/Work_Template_Interface.php
 * @brief       Интерфейс для формирования данных для шаблонов.
 *
 * @author      Dark Dayver
 * @version     0.4.2
 * @date        2025-04-27
 * @namespace   Photorigma\\Interfaces
 *
 * @details     Этот файл содержит интерфейс `Work_Template_Interface`, который определяет методы для формирования
 *              данных, необходимых для отображения различных блоков на странице, таких как меню, блок пользователя,
 *              статистика и список лучших пользователей. Все данные формируются на основе запросов к базе данных и
 *              конфигурации. Реализация методов зависит от глобальных переменных, таких как $_SESSION, для проверки
 *              статуса авторизации.
 *
 * @section     Основные функции
 *              - Формирование массива данных для меню.
 *              - Создание блока пользователя.
 *              - Генерация статистических данных.
 *              - Формирование списка лучших пользователей.
 *              - Установка языковых данных и объекта пользователя.
 *
 * @note        Этот файл является частью системы PhotoRigma и играет ключевую роль в формировании данных для шаблонов.
 *              Все методы данного интерфейса рекомендуется вызывать через класс `Work`.
 *
 * @copyright   Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license     MIT License (https://opensource.org/licenses/MIT)
 *              Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *              сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *              предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *              - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use InvalidArgumentException;
use Random;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . " [ERROR] | " . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . " | " . __FILE__ . " | Попытка прямого вызова файла"
    );
    die("HACK!");
}

/**
 * @interface Work_Template_Interface
 * @brief     Интерфейс для формирования данных для шаблонов.
 *
 * @details   Этот интерфейс определяет контракт для классов, формирующих данные для отображения различных блоков
 *            на странице, таких как меню, блок пользователя, статистика и список лучших пользователей. Реализующие
 *            классы должны обеспечивать выполнение всех методов согласно их описанию. Основные возможности:
 *            - Формирование массива данных для меню (`create_menu`).
 *            - Создание блока пользователя (`template_user`).
 *            - Генерация статистических данных (`template_stat`).
 *            - Формирование списка лучших пользователей (`template_best_user`).
 *            - Установка языковых данных (`set_lang`) и объекта пользователя (`set_user`).
 *            Методы интерфейса зависят от данных из базы данных и конфигурации. Реализующие классы должны обрабатывать
 *            возможные ошибки при работе с БД.
 *
 * @note      Все методы данного интерфейса рекомендуется вызывать через класс `Work`, так как их поведение может быть
 *            непредсказуемым при прямом вызове.
 *
 * @warning   Некорректная реализация методов может привести к ошибкам при формировании данных для шаблонов, особенно
 *            при работе с локализацией, правами доступа или базой данных.
 */
interface Work_Template_Interface
{
    /**
     * @brief   Формирует массив данных для меню в зависимости от типа и активного пункта.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет корректность входных параметров:
     *             - Тип меню должен быть равен одной из констант: SHORT_MENU или LONG_MENU.
     *             - Активный пункт меню должен быть строкой.
     *          2. Определяет тип меню:
     *             - SHORT_MENU: Краткое горизонтальное меню.
     *             - LONG_MENU: Полное вертикальное меню.
     *          3. Получает данные меню из базы данных:
     *             - Условие выборки зависит от типа меню.
     *             - Данные фильтруются на основе прав доступа текущего пользователя.
     *          4. Для каждого пункта меню проверяются права доступа:
     *             - Если пункт видим, он добавляется в результат.
     *             - URL формируется на основе активного пункта меню.
     *             - Название пункта локализуется с использованием языковых строк.
     *          Метод предназначен для создания данных меню.
     *
     * @param string $action Активный пункт меню:
     *                       - Указывается строка, соответствующая активному пункту меню (например, 'home', 'profile').
     * @param int    $menu   Тип меню:
     *                       - SHORT_MENU (0): Краткое горизонтальное меню.
     *                       - LONG_MENU (1): Полное вертикальное меню.
     *                       Другие значения недопустимы и приведут к выбросу исключения InvalidArgumentException.
     *
     * @return array Массив с данными для меню.
     *               Каждый элемент массива содержит:
     *               - Ключ 'url': URL пункта меню (null, если пункт активен).
     *               - Ключ 'name': Название пункта меню (локализованное или дефолтное значение).
     *               Если меню пустое, возвращается пустой массив.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный $menu или $action.
     * @throws RuntimeException         Выбрасывается, если произошла ошибка при выполнении запроса к базе данных.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Данные для меню берутся из таблицы базы данных.
     *          Константы SHORT_MENU и LONG_MENU определяют тип меню:
     *          - SHORT_MENU: Краткое горизонтальное меню.
     *          - LONG_MENU: Полное вертикальное меню.
     *
     * @warning Убедитесь, что передаваемые параметры корректны, так как это может привести к ошибкам.
     *          Также убедитесь, что права доступа пользователя настроены правильно.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $templateHelper = new Work_Template();
     *
     * // Создание горизонтального меню
     * $short_menu = $templateHelper->create_menu('home', SHORT_MENU);
     * print_r($short_menu);
     *
     * // Создание вертикального меню
     * $long_menu = $templateHelper->create_menu('profile', LONG_MENU);
     * print_r($long_menu);
     * @endcode
     */
    public function create_menu(string $action, int $menu): array;

    /**
     * @brief   Формирует данные для блока пользователя.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет статус авторизации пользователя:
     *             - Если пользователь не авторизован, формируется блок со ссылками на вход, восстановление пароля
     *               и регистрацию.
     *             - Если пользователь авторизован, формируется блок с приветствием, группой и аватаром.
     *          2. Для авторизованных пользователей проверяется существование аватара:
     *             - Если аватар недоступен или имеет недопустимый формат, используется дефолтный аватар.
     *          3. Возвращает массив данных для блока пользователя, который используется для отображения в шаблоне.
     *
     * @return array Массив с данными для блока пользователя:
     *               - Для неавторизованных пользователей:
     *                 - 'NAME_BLOCK': Название блока (локализованное).
     *                 - 'CSRF_TOKEN': CSRF-токен для защиты формы.
     *                 - 'L_LOGIN', 'L_PASSWORD', 'L_ENTER', 'L_FORGOT_PASSWORD', 'L_REGISTRATION': Локализованные
     *                 строки.
     *                 - 'U_LOGIN', 'U_FORGOT_PASSWORD', 'U_REGISTRATION': URL для входа, восстановления пароля и
     *                 регистрации.
     *               - Для авторизованных пользователей:
     *                 - 'NAME_BLOCK': Название блока (локализованное).
     *                 - 'L_HI_USER': Приветствие с именем пользователя (локализованное).
     *                 - 'L_GROUP': Группа пользователя (локализованная строка).
     *                 - 'U_AVATAR': URL аватара (или дефолтного аватара, если файл недоступен или некорректен).
     *
     * @throws RuntimeException Выбрасывается, если объект пользователя не установлен или данные некорректны.
     * @throws Random\RandomException Выбрасывается при ошибке генерации CSRF-токена.
     * @throws Exception Выбрасывается при ошибках проверки MIME-типа файла или логирования.
     *
     * @note    Статус авторизации проверяется через внутренние данные пользователя.
     *          Дефолтный аватар определяется конфигурацией системы.
     *
     * @warning Убедитесь, что объект пользователя корректно установлен перед вызовом метода.
     *          Также убедитесь, что конфигурация аватаров настроена правильно.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $templateHelper = new Work_Template();
     *
     * // Формирование данных для блока пользователя
     * $userData = $templateHelper->template_user();
     * print_r($userData);
     * @endcode
     */
    public function template_user(): array;

    /**
     * @brief   Генерирует массив статистических данных для шаблона.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Выполняет запросы к базе данных для получения статистической информации:
     *             - Количество пользователей, администраторов и модераторов.
     *             - Количество категорий (включая пользовательские альбомы).
     *             - Количество фотографий.
     *             - Количество пользовательских и модераторских оценок.
     *             - Список онлайн-пользователей.
     *          2. Возвращает ассоциативный массив с локализованными подписями и данными для вывода статистики.
     *
     * @return array Ассоциативный массив данных для вывода статистики:
     *               - 'NAME_BLOCK': Название блока статистики (локализованное).
     *               - 'L_STAT_REGIST': Подпись для количества зарегистрированных пользователей.
     *               - 'D_STAT_REGIST': Количество зарегистрированных пользователей.
     *               - 'L_STAT_PHOTO': Подпись для количества фотографий.
     *               - 'D_STAT_PHOTO': Количество фотографий.
     *               - 'L_STAT_CATEGORY': Подпись для количества категорий.
     *               - 'D_STAT_CATEGORY': Количество категорий (включая пользовательские альбомы).
     *               - 'L_STAT_USER_ADMIN': Подпись для количества администраторов.
     *               - 'D_STAT_USER_ADMIN': Количество администраторов.
     *               - 'L_STAT_USER_MODER': Подпись для количества модераторов.
     *               - 'D_STAT_USER_MODER': Количество модераторов.
     *               - 'L_STAT_RATE_USER': Подпись для количества пользовательских оценок.
     *               - 'D_STAT_RATE_USER': Количество пользовательских оценок.
     *               - 'L_STAT_RATE_MODER': Подпись для количества модераторских оценок.
     *               - 'D_STAT_RATE_MODER': Количество модераторских оценок.
     *               - 'L_STAT_ONLINE': Подпись для онлайн-пользователей.
     *               - 'D_STAT_ONLINE': Список онлайн-пользователей (HTML-ссылки) или сообщение об отсутствии
     *                 онлайн-пользователей.
     *
     * @throws RuntimeException Выбрасывается при ошибке выполнения запросов к базе данных.
     * @throws Exception        При выполнении запросов к базам данных.
     *
     * @note    Данные берутся из таблиц и представлений базы данных:
     *          - Пользователи, администраторы, модераторы.
     *          - Категории и фотографии.
     *          - Оценки пользователей и модераторов.
     *          - Онлайн-пользователи.
     *
     * @warning Убедитесь, что структура базы данных корректна. Ошибки в структуре таблиц могут привести
     *          к некорректной статистике.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $templateHelper = new Work_Template();
     *
     * // Генерация статистических данных
     * $statData = $templateHelper->template_stat();
     * print_r($statData);
     * @endcode
     */
    public function template_stat(): array;

    /**
     * @brief   Формирует список пользователей, загрузивших наибольшее количество изображений.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Выполняет запрос к базе данных для получения списка пользователей с наибольшим количеством
     *          загруженных фотографий.
     *          2. Ограничивает количество результатов параметром $best_user.
     *          3. Возвращает массив данных для вывода в шаблон, включая ссылки на профили пользователей и количество
     *             загруженных фотографий.
     *          Если данные отсутствуют, добавляется запись "пустого" пользователя.
     *
     * @param int $best_user Количество лучших пользователей для вывода:
     *                       - Должно быть положительным целым числом.
     *                       - Если передано недопустимое значение, выбрасывается исключение InvalidArgumentException.
     *
     * @return array Массив данных для вывода в шаблон:
     *               - 'NAME_BLOCK': Название блока (локализованное).
     *               - 'L_USER_NAME': Подпись для имени пользователя (локализованная строка).
     *               - 'L_USER_PHOTO': Подпись для количества фотографий (локализованная строка).
     *               - 'user_url': Ссылка на профиль пользователя (null, если данных нет).
     *               - 'user_name': Имя пользователя ('---', если данных нет).
     *               - 'user_photo': Количество загруженных фотографий ('-', если данных нет).
     *
     * @throws InvalidArgumentException Выбрасывается, если параметр $best_user не является положительным целым числом.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Если запрос к базе данных не возвращает данных, добавляется запись "пустого" пользователя:
     *          - 'user_url': null.
     *          - 'user_name': '---'.
     *          - 'user_photo': '-'.
     *
     * @warning Убедитесь, что таблицы базы данных содержат корректные данные. Ошибки в структуре таблиц могут привести
     *          к некорректному результату.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $templateHelper = new Work_Template();
     *
     * // Формирование списка лучших пользователей
     * $bestUsers = $templateHelper->template_best_user(3);
     * print_r($bestUsers);
     * @endcode
     */
    public function template_best_user(int $best_user = 1): array;

    /**
     * @brief   Устанавливает языковые данные.
     *
     * @details Этот метод позволяет задать массив языковых данных для использования в системе.
     *          После установки данные могут быть использованы для локализации интерфейса и других текстовых элементов.
     *
     * @param array $lang Языковые данные:
     *                    - Должен быть ассоциативным массивом.
     *                    - Каждый ключ должен быть строкой, представляющей собой уникальный идентификатор языковой
     *                    переменной.
     *                    - Каждое значение должно быть строкой или другим допустимым типом данных для языковых
     *                    значений.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный тип данных (не массив) или пустые
     *                                  данные.
     *
     * @note    Языковые данные используются для локализации интерфейса и других текстовых элементов системы.
     *
     * @warning Передавайте только корректные языковые данные. Пустой массив или некорректные значения могут привести к
     *          ошибкам при использовании.
     *
     * Пример использования:
     * @code
     * // Создание объекта и установка языковых данных
     * $templateHelper = new Work_Template();
     * $langData = [
     *     'welcome_message' => 'Добро пожаловать!',
     *     'error_message'   => 'Произошла ошибка.',
     * ];
     * $templateHelper->set_lang($langData);
     * @endcode
     */
    public function set_lang(array $lang): void;

    /**
     * @brief   Устанавливает объект пользователя.
     *
     * @details Этот метод позволяет задать объект пользователя, реализующий интерфейс `User_Interface`.
     *          После установки объект может быть использован для взаимодействия с другими компонентами системы.
     *
     * @param User_Interface $user Объект, реализующий интерфейс `User_Interface`:
     *                             - Должен быть экземпляром класса, реализующего интерфейс `User_Interface`.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный объект (не реализует интерфейс
     *                                  `User_Interface`).
     *
     * @note    Объект пользователя используется для взаимодействия с другими компонентами системы.
     *
     * @warning Некорректный объект (не реализует интерфейс `User_Interface`) вызывает исключение.
     *
     * Пример использования:
     * @code
     * // Создание объекта и установка объекта пользователя
     * $templateHelper = new Work_Template();
     * $user = new \PhotoRigma\Classes\User(); // Класс, реализующий User_Interface
     * $templateHelper->set_user($user);
     * @endcode
     * @see     User_Interface
     *          Интерфейс, которому должен соответствовать объект пользователя.
     */
    public function set_user(User_Interface $user): void;
}
