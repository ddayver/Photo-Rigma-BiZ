<?php

/**
 * @file        include/Database_Interface.php
 * @brief       Интерфейс для работы с базами данных через PDO.
 *
 * @author      Dark Dayver
 * @version     0.4.1-rc1
 * @date        2025-04-25
 * @namespace   Photorigma\\Interfaces
 *
 * @details     Этот файл содержит интерфейс `Database_Interface`, который определяет методы для работы с базами
 *              данных,
 *              поддерживающими SQL (MySQL/MariaDB и PostgreSQL). Интерфейс обеспечивает единообразие реализации
 *              различных СУБД и предоставляет контракт для выполнения основных операций:
 *              - Выполнение SQL-запросов (SELECT, JOIN, INSERT, UPDATE, DELETE, TRUNCATE).
 *              - Обработка результатов запросов.
 *              - Управление соединением с базой данных.
 *              - Обработка ошибок через централизованную систему логирования и обработки ошибок.
 *
 * @section     Основные функции
 *              - Выборка данных (`SELECT`, `JOIN`).
 *              - Вставка данных (`INSERT`, `REPLACE`, `INSERT IGNORE`).
 *              - Обновление данных (`UPDATE`).
 *              - Удаление данных (`DELETE`, `TRUNCATE`).
 *              - Получение метаданных запросов (количество затронутых строк, ID последней вставленной строки).
 *              - Форматирование даты для SQL-запросов.
 *              - Управление транзакциями (начало, подтверждение, откат).
 *
 * @note        Этот файл является частью системы PhotoRigma и обеспечивает взаимодействие приложения с базами данных.
 *
 * @copyright   Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license     MIT License (https://opensource.org/licenses/MIT)
 *              Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *              сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *              предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *              - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

// Предотвращение прямого вызова файла
use Exception;
use InvalidArgumentException;

if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . " [ERROR] | " . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . " | " . __FILE__ . " | Попытка прямого вызова файла"
    );
    die("HACK!");
}

/**
 * @interface Database_Interface
 * @brief     Интерфейс для работы с базами данных через PDO.
 *
 * @details   Этот интерфейс определяет контракт для работы с базами данных, поддерживающими SQL (MySQL/MariaDB и
 *            PostgreSQL). Он предоставляет методы для выполнения основных операций с базой данных:
 *            - Выборка данных (`SELECT`, `JOIN`).
 *            - Вставка данных (`INSERT`, `REPLACE`, `INSERT IGNORE`).
 *            - Обновление данных (`UPDATE`).
 *            - Удаление данных (`DELETE`, `TRUNCATE`).
 *            - Получение метаданных запросов (количество затронутых строк, ID последней вставленной строки).
 *            - Форматирование даты для SQL-запросов.
 *            - Управление транзакциями (начало, подтверждение, откат).
 *            Все методы используют подготовленные выражения для защиты от SQL-инъекций.
 *
 *            Интерфейс может быть реализован различными классами, включая стандартный класс `Database` или
 *            пользовательские реализации.
 *
 * @note      Интерфейс поддерживает только MySQL/MariaDB и PostgreSQL.
 *
 * @warning   Реализация методов интерфейса может отличаться от предыдущих версий. Убедитесь, что вы изучили новую
 *            документацию перед использованием.
 */
interface Database_Interface
{
    /**
     * @brief   Выполняет SQL-запрос на выборку данных из таблицы.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает параметры для формирования SQL-запроса: список полей, имя таблицы и дополнительные опции.
     *          2. Формирует SQL-запрос на основе переданных параметров.
     *          3. Выполняет запрос с использованием подготовленных выражений для защиты от SQL-инъекций.
     *          4. Возвращает результат выполнения запроса.
     *
     * @param string|array $select       Список полей для выборки:
     *                                   - Может быть строкой (например, "id") или массивом (например, ["id", "name"]).
     *                                   - Если массив, он преобразуется в строку с разделителем `,`.
     *                                   - Все элементы должны быть строками.
     * @param string       $from_tbl     Имя таблицы, из которой выбираются данные:
     *                                   - Должно быть строкой, содержащей только допустимые имена таблиц.
     *                                   - Строка не может быть пустой.
     * @param array        $options      Массив опций для формирования запроса:
     *                                   - where (string|array): Условие WHERE (например, "status = :status").
     *                                   - group (string): Группировка GROUP BY (например, "category_id").
     *                                   - order (string): Сортировка ORDER BY (например, "created_at DESC").
     *                                   - limit (int|string): Ограничение LIMIT (например, 10 или "0, 10").
     *                                   - params (array): Параметры для подготовленного выражения (например,
     *                                   [":status" => "active"]).
     *                                   - Использование параметров `params` обязательно для защиты от SQL-инъекций.
     *
     * @return bool Возвращает true, если запрос успешно выполнен (даже если результат пустой).
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если `$from_tbl` не является строкой.
     *                                  - Если `$options` не является массивом.
     *                                  - Если `$select` не является строкой или массивом.
     *                                  - Если элемент в `$select` не является строкой.
     * @throws Exception Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Неверные типы данных или некорректные значения могут привести к выбросу исключения.
     *          Использование параметров `params` для подготовленных выражений является обязательным для защиты от
     *          SQL-инъекций и обеспечения совместимости с различными СУБД.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $result = $db->select(
     *     ['id', 'name'],
     *     'users',
     *     [
     *         'where' => 'status = :status',
     *         'group' => 'category_id',
     *         'order' => 'created_at DESC',
     *         'limit' => 10,
     *         'params' => [':status' => 'active']
     *     ]
     * );
     *
     * // Ожидаемый результат
     * var_dump($result); // true
     * @endcode
     */
    public function select(string|array $select, string $from_tbl, array $options = []): bool;

    /**
     * @brief   Выполняет SQL-запрос с использованием JOIN для выборки данных из нескольких таблиц.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает параметры для формирования SQL-запроса: список полей, имя основной таблицы,
     *             массив JOIN-операций и дополнительные опции.
     *          2. Формирует SQL-запрос с использованием JOIN-операций на основе переданных параметров.
     *          3. Выполняет запрос с использованием подготовленных выражений для защиты от SQL-инъекций.
     *          4. Возвращает результат выполнения запроса.
     *
     * @param string|array $select         Список полей для выборки:
     *                                     - Может быть строкой (например, "id") или массивом (например, ["id",
     *                                     "name"]).
     *                                     - Если массив, он преобразуется в строку с разделителем `,`.
     *                                     - Все элементы должны быть строками.
     * @param string       $from_tbl       Имя основной таблицы, из которой начинается выборка:
     *                                     - Должно быть строкой, содержащей только допустимые имена таблиц.
     *                                     - Строка не может быть пустой.
     * @param array        $join           Массив описаний JOIN-операций:
     *                                     - Каждый элемент массива должен содержать ключи:
     *                                     - table (string): Имя таблицы для JOIN.
     *                                     - type (string, optional): Тип JOIN (например, INNER, LEFT, RIGHT). По
     *                                     умолчанию используется INNER.
     *                                     - on (string): Условие для JOIN. Должно быть строкой с допустимым условием
     *                                     сравнения полей.
     *                                     - Массив не может быть пустым.
     * @param array        $options        Массив опций для формирования запроса:
     *                                     - where (string|array): Условие WHERE (например, "status = :status").
     *                                     - group (string): Группировка GROUP BY (например, "category_id").
     *                                     - order (string): Сортировка ORDER BY (например, "created_at DESC").
     *                                     - limit (int|string): Ограничение LIMIT (например, 10 или "0, 10").
     *                                     - params (array): Параметры для подготовленного выражения (например,
     *                                     [":status" => "active"]).
     *                                     - Использование параметров `params` обязательно для защиты от SQL-инъекций.
     *
     * @return bool Возвращает true, если запрос успешно выполнен (даже если результат пустой).
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если `$from_tbl` не является строкой.
     *                                  - Если `$join` не является массивом или содержит некорректные данные.
     *                                  - Если `$select` не является строкой или массивом.
     *                                  - Если отсутствует имя таблицы (`table`) или условие (`on`) в описании JOIN.
     *                                  - Если `$options` не является массивом.
     * @throws Exception Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Неверные типы данных или некорректные значения могут привести к выбросу исключения.
     *          Использование параметров `params` для подготовленных выражений является обязательным для защиты от
     *          SQL-инъекций и обеспечения совместимости с различными СУБД.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $result = $db->join(
     *     ['users.id', 'users.name', 'orders.order_date'],
     *     'users',
     *     [
     *         ['type' => 'INNER', 'table' => 'orders', 'on' => 'users.id = orders.user_id'],
     *     ],
     *     [
     *         'where' => 'users.status = :status',
     *         'params' => [':status' => 1],
     *     ]
     * );
     *
     * // Ожидаемый результат
     * var_dump($result); // true
     * @endcode
     */
    public function join(string|array $select, string $from_tbl, array $join, array $options = []): bool;

    /**
     * @brief   Выполняет SQL-запрос на удаление данных из таблицы.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает параметры для формирования SQL-запроса: имя таблицы и массив опций.
     *          2. Проверяет наличие обязательного условия `where` в массиве `$options`. Без условия WHERE запрос не
     *          будет выполнен для предотвращения случайного удаления всех данных.
     *          3. Формирует SQL-запрос на удаление данных с использованием подготовленных выражений.
     *          4. Выполняет запрос с использованием параметров `params` для защиты от SQL-инъекций.
     *          5. Возвращает результат выполнения запроса.
     *
     * @param string $from_tbl          Имя таблицы, из которой необходимо удалить данные:
     *                                  - Должно быть строкой, содержащей только допустимые имена таблиц.
     *                                  - Строка не может быть пустой.
     * @param array  $options           Массив опций для формирования запроса:
     *                                  - where (string|array): Условие WHERE. Может быть строкой (например, "status =
     *                                  :status") или ассоциативным массивом (например, ["id" => 1, "status" =>
     *                                  "active"]). Обязательный параметр для безопасности. Без условия WHERE запрос не
     *                                  будет выполнен.
     *                                  - order (string): Сортировка ORDER BY (например, "created_at DESC").
     *                                  Может использоваться только вместе с `limit`.
     *                                  - limit (int|string): Ограничение LIMIT (например, 10 или "0, 10").
     *                                  Может использоваться только вместе с `order`.
     *                                  - params (array): Параметры для подготовленного выражения (например,
     *                                  [":id" => 1, ":status" => "active"]).
     *                                  Использование параметров `params` обязательно для защиты от SQL-инъекций.
     *
     * @return bool Возвращает true, если запрос успешно выполнен (даже если результат пустой).
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если `$from_tbl` не является строкой.
     *                                  - Если `$options` не является массивом.
     *                                  - Если отсутствует обязательное условие `where` в массиве `$options`.
     * @throws Exception Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Безопасность обеспечивается обязательным указанием условия `where`. Запрос без условия `where` не будет
     *          выполнен. Использование параметров `params` для подготовленных выражений является обязательным для
     *          защиты от SQL-инъекций и обеспечения совместимости с различными СУБД.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $result = $db->delete('users', [
     *     'where' => 'id = :id AND status = :status',
     *     'params' => [':id' => 1, ':status' => 'active'],
     * ]);
     *
     * // Ожидаемый результат
     * var_dump($result); // true
     * @endcode
     */
    public function delete(string $from_tbl, array $options = []): bool;

    /**
     * @brief   Выполняет SQL-запрос на очистку таблицы (TRUNCATE).
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает имя таблицы для очистки.
     *          2. Формирует SQL-запрос TRUNCATE TABLE для полной очистки таблицы.
     *          3. Выполняет запрос.
     *          4. Возвращает результат выполнения запроса.
     *
     * @param string $from_tbl Имя таблицы, которую необходимо очистить:
     *                         - Должно быть строкой, содержащей только допустимые имена таблиц.
     *                         - Строка не может быть пустой.
     *
     * @return bool Возвращает true, если запрос успешно выполнен (даже если результат пустой).
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если `$from_tbl` не является строкой.
     * @throws Exception Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Запрос TRUNCATE полностью очищает таблицу, удаляя все строки без возможности восстановления.
     *          Этот метод следует использовать с осторожностью, так как он не поддерживает откат операции через
     *          транзакции.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $result = $db->truncate('users');
     *
     * // Ожидаемый результат
     * var_dump($result); // true
     * @endcode
     */
    public function truncate(string $from_tbl): bool;

    /**
     * @brief   Выполняет SQL-запрос на обновление данных в таблице.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает данные для обновления, имя таблицы и массив опций.
     *          2. Проверяет наличие обязательного условия `where` в массиве `$options`. Без условия WHERE запрос не
     *          будет выполнен для предотвращения случайного обновления всех данных.
     *          3. Формирует SQL-запрос UPDATE с использованием подготовленных выражений.
     *          4. Выполняет запрос с использованием параметров `params` для защиты от SQL-инъекций.
     *          5. Возвращает результат выполнения запроса.
     *
     * @param array  $update       Ассоциативный массив данных для обновления:
     *                             - Ключи: имена полей.
     *                             - Значения: новые значения для полей. Для защиты от SQL-инъекций рекомендуется
     *                             использовать плейсхолдеры (например, `:name`).
     *                             Пример: ["name" => ":name", "status" => ":status"].
     * @param string $from_tbl     Имя таблицы, в которой необходимо обновить данные:
     *                             - Должно быть строкой, содержащей только допустимые имена таблиц.
     *                             - Строка не может быть пустой.
     * @param array  $options      Массив опций для формирования запроса:
     *                             - where (string|array): Условие WHERE. Может быть строкой (например, "id = :id") или
     *                             ассоциативным массивом (например, ["id" => ":id", "status" => ":status"]).
     *                             Обязательный параметр для безопасности. Без условия WHERE запрос не будет выполнен.
     *                             - order (string): Сортировка ORDER BY (например, "created_at DESC").
     *                             - limit (int|string): Ограничение LIMIT (например, 10 или "0, 10").
     *                             - params (array): Параметры для подготовленного выражения (например,
     *                             [":id" => 1, ":name" => "John Doe"]).
     *                             Использование параметров `params` обязательно для защиты от SQL-инъекций.
     *
     * @return bool Возвращает true, если запрос успешно выполнен (даже если результат пустой).
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если `$update` не является массивом.
     *                                  - Если `$from_tbl` не является строкой.
     *                                  - Если `$options` не является массивом.
     *                                  - Если отсутствует обязательное условие `where` в массиве `$options`.
     * @throws Exception Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Безопасность обеспечивается обязательным указанием условия `where`. Запрос без условия `where` не будет
     *          выполнен. Использование параметров `params` для подготовленных выражений является обязательным для
     *          защиты от SQL-инъекций и обеспечения совместимости с различными СУБД.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $result = $db->update(
     *     ['name' => ':name', 'status' => ':status'],
     *     'users',
     *     [
     *         'where' => 'id = :id',
     *         'params' => [':id' => 1, ':name' => 'John Doe', ':status' => 'active']
     *     ]
     * );
     *
     * // Ожидаемый результат
     * var_dump($result); // true
     * @endcode
     */
    public function update(array $update, string $from_tbl, array $options = []): bool;

    /**
     * @brief   Выполняет SQL-запрос на вставку данных в таблицу.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает данные для вставки, имя таблицы, тип запроса и массив опций.
     *          2. Проверяет, что массив `$insert` не пустой. Без данных для вставки запрос не будет выполнен.
     *          3. Определяет тип запроса на основе параметра `$type`:
     *             - `'ignore'`: Формирует запрос типа "INSERT IGNORE INTO".
     *             - `'replace'`: Формирует запрос типа "REPLACE INTO".
     *             - `'into'` или пустая строка (`''`): Формирует запрос типа "INSERT INTO" (по умолчанию).
     *          4. Формирует SQL-запрос INSERT с использованием подготовленных выражений.
     *          5. Выполняет запрос с использованием параметров `params` для защиты от SQL-инъекций.
     *          6. Возвращает результат выполнения запроса.
     *
     * @param array  $insert      Ассоциативный массив данных для вставки:
     *                            - Ключи: имена полей.
     *                            - Значения: новые значения для полей. Для защиты от SQL-инъекций рекомендуется
     *                            использовать плейсхолдеры (например, `:name`).
     *                            Пример: ["name" => ":name", "email" => ":email"].
     *                            Массив не может быть пустым.
     * @param string $to_tbl      Имя таблицы, в которую необходимо вставить данные:
     *                            - Должно быть строкой, содержащей только допустимые имена таблиц.
     *                            - Строка не может быть пустой.
     * @param string $type        Тип запроса (необязательно). Определяет тип SQL-запроса на вставку. Допустимые
     *                            значения:
     *                            - `'ignore'`: Формирует запрос типа "INSERT IGNORE INTO".
     *                            - `'replace'`: Формирует запрос типа "REPLACE INTO".
     *                            - `'into'` или пустая строка (`''`): Формирует запрос типа "INSERT INTO" (по
     *                            умолчанию).
     * @param array  $options     Массив опций для формирования запроса:
     *                            - params (array): Параметры для подготовленного выражения (например,
     *                            [":name" => "John Doe", ":email" => "john@example.com"]).
     *                            Использование параметров `params` обязательно для защиты от SQL-инъекций.
     *
     * @return bool Возвращает true, если запрос успешно выполнен (даже если результат пустой).
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если `$insert` не является массивом или является пустым массивом.
     *                                  - Если `$to_tbl` не является строкой.
     *                                  - Если `$type` содержит недопустимое значение (не '', 'ignore', 'replace',
     *                                  'into').
     *                                  - Если `$options` не является массивом.
     * @throws Exception Выбрасывается при ошибках выполнения запроса.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Безопасность обеспечивается обязательным указанием параметров `params` для подготовленных выражений.
     *          Игнорирование этого правила может привести к уязвимостям безопасности и неправильной работе с базой
     *          данных.
     *
     * Пример использования:
     * @code
     * // Вызов метода
     * $result = $db->insert(
     *     ['name' => ':name', 'email' => ':email'],
     *     'users',
     *     '',
     *     ['params' => [':name' => 'John Doe', ':email' => 'john@example.com']]
     * );
     *
     * // Ожидаемый результат
     * var_dump($result); // true
     * @endcode
     */
    public function insert(array $insert, string $to_tbl, string $type = '', array $options = []): bool;

    /**
     * @brief   Извлекает одну строку результата из подготовленного выражения.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что результат запроса доступен и корректен.
     *          2. Извлекает одну строку результата в виде ассоциативного массива.
     *          3. Возвращает ассоциативный массив с данными строки или `false`, если результатов больше нет.
     *
     * @return array|false Возвращает ассоциативный массив, содержащий данные одной строки результата, если они
     *                     доступны. Если результатов нет, возвращает `false`.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если результат запроса недоступен или имеет неверный тип.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Метод чувствителен к состоянию результата запроса. Убедитесь, что перед вызовом метода был выполнен
     *          запрос, который установил результат.
     *
     * Пример использования:
     * @code
     * // Предполагается, что запрос уже выполнен
     * $db->select(['id', 'name'], 'users', ['where' => 'status = :status', 'params' => [':status' => 1]]);
     * while ($row = $db->res_row()) {
     *     echo "ID: " . $row['id'] . ", Name: " . $row['name'] . "\n";
     * }
     * @endcode
     */
    public function res_row(): array|false;

    /**
     * @brief   Извлекает все строки результата из подготовленного выражения.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что результат запроса доступен и корректен.
     *          2. Извлекает все строки результата в виде массива ассоциативных массивов.
     *          3. Возвращает массив с данными всех строк или `false`, если результатов нет.
     *
     * @return array|false Возвращает массив ассоциативных массивов, содержащих данные всех строк результата, если они
     *                     доступны. Если результатов нет, возвращает `false`.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если результат запроса недоступен или имеет неверный тип.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Метод чувствителен к состоянию результата запроса. Убедитесь, что перед вызовом метода был выполнен
     *          запрос, который установил результат.
     *
     * Пример использования:
     * @code
     * // Предполагается, что запрос уже выполнен
     * $db->select(['id', 'name'], 'users', ['where' => 'status = :status', 'params' => [':status' => 1]]);
     * $results = $db->res_arr();
     * if ($results) {
     *     foreach ($results as $row) {
     *         echo "ID: " . $row['id'] . ", Name: " . $row['name'] . "\n";
     *     }
     * } else {
     *     echo "No results found.";
     * }
     * @endcode
     */
    public function res_arr(): array|false;

    /**
     * @brief   Возвращает количество строк, затронутых последним SQL-запросом.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что значение с количеством затронутых строк доступно и корректно.
     *          2. Возвращает количество строк, затронутых последним SQL-запросом.
     *
     * @return int Количество строк, затронутых последним SQL-запросом.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если значение с количеством затронутых строк недоступно или некорректно.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Метод чувствителен к состоянию значения с количеством затронутых строк. Убедитесь, что перед вызовом
     *          метода был выполнен запрос, который установил это значение.
     *
     * Пример использования:
     * @code
     * // Предполагается, что запрос уже выполнен
     * $db->delete('users', ['where' => 'status = :status', 'params' => [':status' => 0]]);
     *
     * // Получаем количество затронутых строк
     * echo "Affected rows: " . $db->get_affected_rows();
     * @endcode
     */
    public function get_affected_rows(): int;

    /**
     * @brief   Возвращает ID последней вставленной строки.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что значение с ID последней вставленной строки доступно и корректно.
     *          2. Возвращает ID последней вставленной строки.
     *
     * @return int ID последней вставленной строки.
     *
     * @throws InvalidArgumentException Выбрасывается при некорректных входных данных:
     *                                  - Если значение с ID последней вставленной строки недоступно или некорректно.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Метод чувствителен к состоянию значения с ID последней вставленной строки. Убедитесь, что перед вызовом
     *          метода был выполнен запрос, который установил это значение.
     *
     * Пример использования:
     * @code
     * // Предполагается, что запрос уже выполнен
     * $db->insert(['name' => 'John Doe', 'email' => 'john@example.com'], 'users');
     *
     * // Получаем ID последней вставленной строки
     * echo "Last insert ID: " . $db->get_last_insert_id();
     * @endcode
     */
    public function get_last_insert_id(): int;

    /**
     * @brief   Формирует SQL-выражение для форматирования даты с учётом специфики используемой СУБД.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Принимает название столбца с датой и формат даты.
     *          2. Формирует SQL-выражение для форматирования даты в зависимости от типа СУБД.
     *          3. Возвращает SQL-выражение для использования в запросах.
     *
     * @param string $column Название столбца с датой:
     *                       - Должен быть непустой строкой, содержащей имя столбца таблицы в БД.
     * @param string $format Формат даты (в стиле MySQL):
     *                       - На текущий момент метод принимает только формат MySQL, даже для PostgreSQL и SQLite.
     *
     * @return string SQL-выражение для форматирования даты.
     *
     * @throws InvalidArgumentException Выбрасывается, если тип СУБД не поддерживается.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что `$column` и `$format` содержат корректные значения перед вызовом метода.
     *
     * Пример использования:
     * @code
     * // Предполагается, что используется MySQL
     * $sqlExpression = $db->format_date('created_at', '%Y-%m-%d');
     * echo $sqlExpression; // DATE_FORMAT(created_at, '%Y-%m-%d')
     * @endcode
     */
    public function format_date(string $column, string $format): string;

    /**
     * @brief   Начинает транзакцию в базе данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Начинает транзакцию в базе данных.
     *          2. Записывает лог с указанием контекста начала транзакции (если контекст предоставлен).
     *
     * @param string $context Контекст транзакции (необязательный параметр):
     *                        - Используется для описания цели или места начала транзакции.
     *                        - По умолчанию: пустая строка.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws Exception Выбрасывается при ошибках начала транзакции.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что соединение с базой данных установлено перед вызовом метода.
     *
     * Пример использования:
     * @code
     * // Начало транзакции с указанием контекста
     * $db->begin_transaction('Сохранение данных пользователя');
     * // Лог: [DB] Транзакция начата | Контекст: Сохранение данных пользователя
     *
     * // Начало транзакции без указания контекста
     * $db->begin_transaction();
     * // Лог: [DB] Транзакция начата
     * @endcode
     */
    public function begin_transaction(string $context = ''): void;

    /**
     * @brief   Подтверждает транзакцию в базе данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Подтверждает транзакцию в базе данных.
     *          2. Записывает лог с указанием контекста подтверждения транзакции (если контекст предоставлен).
     *
     * @param string $context Контекст транзакции (необязательный параметр):
     *                        - Используется для описания цели или места подтверждения транзакции.
     *                        - По умолчанию: пустая строка.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws Exception Выбрасывается при ошибках подтверждения транзакции.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что транзакция была начата перед вызовом этого метода.
     *
     * Пример использования:
     * @code
     * // Подтверждение транзакции с указанием контекста
     * $db->commit_transaction('Сохранение данных пользователя');
     * // Лог: [DB] Транзакция подтверждена | Контекст: Сохранение данных пользователя
     *
     * // Подтверждение транзакции без указания контекста
     * $db->commit_transaction();
     * // Лог: [DB] Транзакция подтверждена
     * @endcode
     */
    public function commit_transaction(string $context = ''): void;

    /**
     * @brief   Отменяет транзакцию в базе данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Отменяет транзакцию в базе данных.
     *          2. Записывает лог с указанием контекста отмены транзакции (если контекст предоставлен).
     *
     * @param string $context Контекст транзакции (необязательный параметр):
     *                        - Используется для описания цели или места отмены транзакции.
     *                        - По умолчанию: пустая строка.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws Exception Выбрасывается при ошибках отмены транзакции.
     *
     * @note    Метод должен быть реализован в классе, реализующем интерфейс.
     *          Все параметры и возвращаемое значение должны соответствовать описанию.
     *
     * @warning Убедитесь, что транзакция была начата перед вызовом этого метода.
     *
     * Пример использования:
     * @code
     * // Отмена транзакции с указанием контекста
     * $db->rollback_transaction('Отмена сохранения данных пользователя');
     * // Лог: [DB] Транзакция отменена | Контекст: Отмена сохранения данных пользователя
     *
     * // Отмена транзакции без указания контекста
     * $db->rollback_transaction();
     * // Лог: [DB] Транзакция отменена
     * @endcode
     */
    public function rollback_transaction(string $context = ''): void;
}
