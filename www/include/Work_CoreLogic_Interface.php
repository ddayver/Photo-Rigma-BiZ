<?php

/**
 * @file        include/Work_CoreLogic_Interface.php
 * @brief       Интерфейс, определяющий контракт для классов, реализующих базовую логику приложения.
 *
 * @author      Dark Dayver
 * @version     0.4.1-rc1
 * @date        2025-04-25
 * @namespace   Photorigma\\Interfaces
 *
 * @details     Этот файл содержит интерфейс `Work_CoreLogic_Interface`, который определяет методы для выполнения
 *              ключевых операций приложения:
 *              - Установка языковых данных и объекта пользователя через сеттеры (`set_lang`, `set_user`).
 *              - Формирование информационных строк для категорий и пользовательских альбомов (`category`).
 *              - Удаление изображений и связанных данных (`del_photo`).
 *              - Получение данных о новостях, языках и темах (`news`, `get_languages`, `get_themes`).
 *              - Генерация блоков вывода изображений для различных типов запросов (`create_photo`).
 *              - Добавление оценок и расчёт средней оценки фотографии (`process_rating`).
 *              Все методы зависят от конфигурации приложения и данных, полученных из базы данных.
 *
 * @section     Основные функции
 *              - Установка языковых данных и объекта пользователя.
 *              - Работа с категориями и альбомами.
 *              - Управление изображениями (удаление, создание блоков вывода).
 *              - Получение данных о новостях, языках и темах.
 *              - Обработка оценок и расчёт средней оценки.
 *
 * @note        Этот файл является частью системы PhotoRigma и играет ключевую роль в выполнении базовой логики
 *              приложения.
 *
 * @copyright   Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license     MIT License (https://opensource.org/licenses/MIT)
 *              Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *              сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *              предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *              - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use InvalidArgumentException;
use PDOException;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . " [ERROR] | " . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . " | " . __FILE__ . " | Попытка прямого вызова файла"
    );
    die("HACK!");
}

/**
 * @interface Work_CoreLogic_Interface
 * @brief     Интерфейс, определяющий контракт для классов, реализующих базовую логику приложения.
 *
 * @details   Этот интерфейс предоставляет набор методов для выполнения ключевых операций приложения:
 *            - Установка языковых данных и объекта пользователя через сеттеры (`set_lang`, `set_user`).
 *            - Формирование информационных строк для категорий и пользовательских альбомов (`category`).
 *            - Удаление изображений и связанных данных (`del_photo`).
 *            - Получение данных о новостях, языках и темах (`news`, `get_languages`, `get_themes`).
 *            - Генерация блоков вывода изображений для различных типов запросов (`create_photo`).
 *            - Добавление оценок и расчёт средней оценки фотографии (`process_rating`).
 *            Реализация методов должна обеспечивать взаимодействие с базой данных и обработку ошибок.
 *
 * @note      Интерфейс опирается на директории `/language/` и `/themes/` для загрузки данных о языках и темах.
 *
 * @warning   Некорректная реализация методов может привести к ошибкам при работе с данными пользователя,
 *            категориями, изображениями и новостями.
 */
interface Work_CoreLogic_Interface
{
    /**
     * @brief   Установка языковых данных через сеттер.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что переданные данные являются массивом.
     *          2. Присваивает массив свойству текущего класса для дальнейшего использования.
     *
     * @param array $lang     Языковые данные:
     *                        - Должен быть ассоциативным массивом.
     *                        - Каждый ключ должен быть строкой, представляющей собой уникальный идентификатор языковой
     *                        переменной.
     *                        - Каждое значение должно быть строкой или другим допустимым типом данных для языковых
     *                        значений. Пример: [
     *                        'welcome_message' => 'Добро пожаловать!',
     *                        'error_message'   => 'Произошла ошибка.',
     *                        ].
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается, если:
     *                                  - Передан некорректный тип данных (не массив).
     *                                  - Передан пустой массив.
     *
     * @note    Метод проверяет тип переданных данных.
     *          Языковые данные используются для локализации интерфейса и других текстовых элементов системы.
     *
     * @warning Передавайте только корректные языковые данные. Пустой массив или некорректные значения могут привести к
     *          ошибкам при использовании.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Установка языковых данных
     * $langData = [
     *     'welcome_message' => 'Добро пожаловать!',
     *     'error_message'   => 'Произошла ошибка.',
     * ];
     * $corelogic->set_lang($langData);
     * @endcode
     */
    public function set_lang(array $lang): void;

    /**
     * @brief   Установка объекта, реализующего интерфейс User_Interface, через сеттер.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что переданный объект реализует интерфейс `User_Interface`.
     *          2. Присваивает объект свойству текущего класса для дальнейшего использования.
     *
     * @param User_Interface $user Объект, реализующий интерфейс `User_Interface`:
     *                             - Должен быть экземпляром класса, реализующего интерфейс `User_Interface`.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный объект (не реализует интерфейс
     *                                  `User_Interface`).
     *
     * @note    Метод проверяет тип переданного объекта.
     *          Объект пользователя используется для взаимодействия с другими компонентами системы.
     *
     * @warning Некорректный объект (не реализует интерфейс `User_Interface`) вызывает исключение.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Создание объекта пользователя
     * $user = new User(); // Класс, реализующий User_Interface
     *
     * // Установка объекта пользователя
     * $corelogic->set_user($user);
     * @endcode
     * @see     User_Interface
     *          Интерфейс, которому должен соответствовать объект пользователя.
     */
    public function set_user(User_Interface $user): void;

    /**
     * @brief   Формирует информационную строку для категории или пользовательского альбома.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет корректность входных параметров:
     *             - `$cat_id` должен быть целым числом >= `0`.
     *             - `$user_flag` должен принимать значения `0` (категория) или `1` (пользовательский альбом).
     *          2. Получает данные о категории или пользовательском альбоме из базы данных.
     *          3. Подсчитывает количество фотографий, связанных с категорией или альбомом.
     *          4. Формирует результирующий массив с информацией о категории или альбоме, включая название, описание,
     *             количество фотографий, данные о последней и лучшей фотографии, а также ссылки на них.
     *
     * @param int $cat_id    Идентификатор категории или пользователя (если `$user_flag = 1`):
     *                       - Должен быть целым числом >= `0`.
     *                       Пример: `5` (для категории) или `123` (для пользовательского альбома).
     * @param int $user_flag Флаг, указывающий формировать ли информацию о категории (`0`) или пользовательском альбоме
     *                       (`1`):
     *                       - По умолчанию: `0`.
     *                       - Допустимые значения: `0` или `1`.
     *
     * @return array Информационная строка для категории или пользовательского альбома:
     *               - 'name'           (string): Название категории или альбома.
     *               - 'description'    (string): Описание категории или альбома.
     *               - 'count_photo'    (int):    Количество фотографий.
     *               - 'last_photo'     (string): Форматированное название последней фотографии.
     *               - 'top_photo'      (string): Форматированное название лучшей фотографии.
     *               - 'url_cat'        (string): Ссылка на категорию или альбом.
     *               - 'url_last_photo' (string): Ссылка на последнюю фотографию.
     *               - 'url_top_photo'  (string): Ссылка на лучшую фотографию.
     *
     * @throws InvalidArgumentException Выбрасывается, если входные параметры имеют некорректный тип или значение.
     *                                  Пример сообщения:
     *                                      cat_id и user_flag должны быть 0 или положительным целым числом.
     * @throws PDOException            Выбрасывается, если возникают ошибки при получении данных из базы данных.
     *                                  Пример сообщения:
     *                                      Не удалось получить данные категории или пользователя.
     * @throws Exception               При выполнении запросов к базам данных.
     *
     * @note    Используются константы:
     *          - TBL_CATEGORY: Таблица для хранения данных о категориях (`category`).
     *          - TBL_USERS:    Таблица для хранения данных о пользователях (`users`).
     *          - TBL_PHOTO:    Таблица для хранения данных о фотографиях (`photo`).
     *
     * @warning Убедитесь, что:
     *          - Входные параметры `$cat_id` и `$user_flag` корректны.
     *          - База данных содержит необходимые данные для выполнения запросов.
     *          - Пользователь имеет права на просмотр фотографий (если это требуется).
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Получение данных о категории с ID = 5
     * $category_data = $corelogic->category(5, 0);
     * print_r($category_data);
     *
     * // Получение данных о пользовательском альбоме с ID = 123
     * $user_album_data = $corelogic->category(123, 1);
     * print_r($user_album_data);
     * @endcode
     */
    public function category(int $cat_id = 0, int $user_flag = 0): array;

    /**
     * @brief   Удаляет изображение с указанным идентификатором, а также все упоминания об этом изображении.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет корректность входного параметра `photo_id`.
     *          2. Получает данные об изображении из базы данных.
     *          3. Удаляет файлы изображений (полноразмерные и эскизы) с диска.
     *          4. Удаляет запись об изображении из базы данных.
     *          5. Логирует ошибки, если они возникают.
     *
     * @param int $photo_id Идентификатор удаляемого изображения:
     *                      - Должен быть положительным целым числом.
     *                      Пример: `42`.
     *
     * @return bool Возвращает:
     *              - `true`, если удаление успешно.
     *              - `false`, если произошла ошибка.
     *
     * @throws InvalidArgumentException Выбрасывается, если параметр `photo_id` имеет некорректный тип или значение.
     *                                  Пример сообщения:
     *                                      Неверное значение параметра photo_id | Ожидалось положительное целое число.
     * @throws RuntimeException         Выбрасывается, если возникает ошибка при выполнении запросов к базе данных или
     *                                  удалении файлов.
     *                                  Пример сообщения:
     *                                      Не удалось найти изображение | Переменная photo_id = [значение].
     * @throws Exception                Выбрасывается при записи ошибок в лог.
     *
     * @note    Метод автоматически удаляет связанные записи в базе данных благодаря использованию внешних ключей.
     *
     * @warning Убедитесь, что:
     *          - Скрипт имеет необходимые права на запись и чтение для удаления файлов.
     *          - Удаление файлов и записей из базы данных необратимо. Передайте корректный идентификатор изображения.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Удаление изображения с ID = 42
     * $result = $corelogic->del_photo(42);
     * if ($result) {
     *     echo "Изображение успешно удалено.";
     * } else {
     *     echo "Не удалось удалить изображение.";
     * }
     * @endcode
     */
    public function del_photo(int $photo_id): bool;

    /**
     * @brief   Получает данные о новостях в зависимости от типа запроса.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет корректность входных параметров `$news_id_or_limit` и `$act`.
     *          2. Выполняет запрос к базе данных для получения данных о новостях:
     *             - Для `$act = 'id'`: Возвращает новость по её ID.
     *             - Для `$act = 'last'`: Возвращает список последних новостей с сортировкой по дате редактирования.
     *          3. Возвращает массив с данными о новостях или пустой массив, если новости не найдены.
     *
     * @param int    $news_id_or_limit Количество новостей или ID новости (в зависимости от параметра `$act`):
     *                                 - Должен быть положительным целым числом.
     *                                 Пример: `5` (для ID новости) или `10` (для количества новостей).
     * @param string $act              Тип запроса:
     *                                 - `'id'`: Получение новости по её ID.
     *                                 - `'last'`: Получение списка последних новостей.
     *
     * @return array Массив с данными о новостях. Если новостей нет, возвращается пустой массив.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный `$act` или `$news_id_or_limit`.
     *                                  Пример сообщения:
     *                                      Некорректный ID новости | Переменная $news_id_or_limit = [значение].
     *                                  Пример сообщения:
     *                                      Некорректное количество новостей | Переменная $news_id_or_limit =
     *                                      [значение]. Пример сообщения: Некорректный тип запроса | Переменная $act =
     *                                      '$act'.
     * @throws RuntimeException         Выбрасывается, если произошла ошибка при выполнении запроса к базе данных.
     *                                  Пример сообщения:
     *                                      Не удалось получить данные из базы данных | Тип запроса: '$act'.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Метод автоматически возвращает пустой массив, если новости не найдены.
     *
     * @warning Убедитесь, что:
     *          - Передаются допустимые значения для `$news_id_or_limit` и `$act`.
     *          - База данных содержит необходимые данные для выполнения запросов.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Получение новости с ID = 5
     * $news_by_id = $corelogic->news(5, 'id');
     * print_r($news_by_id);
     *
     * // Получение 10 последних новостей
     * $news_list = $corelogic->news(10, 'last');
     * print_r($news_list);
     * @endcode
     */
    public function news(int $news_id_or_limit, string $act): array;

    /**
     * @brief   Загружает доступные языки из директории `/language/`.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет существование и доступность директории `/language/`.
     *          2. Перебирает поддиректории в `/language/` и загружает данные о доступных языках.
     *          3. Для каждого языка проверяет наличие корректного файла конфигурации с названием языка.
     *          4. Возвращает массив с данными о доступных языках или выбрасывает исключение, если языки не найдены.
     *
     * @return array Массив с данными о доступных языках. Каждый элемент массива содержит:
     *               - `value`: Имя директории языка (строка).
     *               - `name`: Название языка (строка).
     *
     * @throws RuntimeException Выбрасывается, если:
     *                           - Директория `/language/` недоступна или не существует.
     *                           - Ни один язык не найден в указанной директории.
     * @throws Exception         Выбрасывается при записи ошибок в лог.
     *
     * @note    Метод автоматически возвращает пустой массив, если языки не найдены.
     *
     * @warning Убедитесь, что:
     *          - Директория `/language/` содержит корректные поддиректории с файлами конфигурации.
     *          - Файлы конфигурации содержат корректное название языка.
     *          Если директория `/language/` пуста или содержит недоступные поддиректории, метод выбрасывает исключение.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Получение списка доступных языков
     * $languages = $corelogic->get_languages();
     * foreach ($languages as $language) {
     *     echo "Язык: " . $language['name'] . " (ID: " . $language['value'] . ")\n";
     * }
     * @endcode
     */
    public function get_languages(): array;

    /**
     * @brief   Загружает доступные темы из директории `/themes/`.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет существование и доступность директории `/themes/`.
     *          2. Перебирает поддиректории в `/themes/` и загружает имена доступных тем.
     *          3. Возвращает массив с именами доступных тем или выбрасывает исключение, если темы не найдены.
     *
     * @return array Массив с именами доступных тем (строки).
     *
     * @throws RuntimeException Выбрасывается, если:
     *                           - Директория `/themes/` не существует или недоступна для чтения.
     *                           - Ни одна тема не найдена в указанной директории.
     * @throws Exception         Выбрасывается при записи ошибок в лог.
     *
     * @note    Метод автоматически возвращает пустой массив, если темы не найдены.
     *
     * @warning Убедитесь, что:
     *          - Директория `/themes/` существует и содержит корректные поддиректории.
     *          - Поддиректории находятся внутри директории `/themes/`.
     *          Если директория `/themes/` пуста или содержит недоступные поддиректории, метод выбрасывает исключение.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Получение списка доступных тем
     * $themes = $corelogic->get_themes();
     * foreach ($themes as $theme) {
     *     echo "Доступная тема: $theme\n";
     * }
     * @endcode
     */
    public function get_themes(): array;

    /**
     * @brief   Генерирует блок данных для вывода изображений различных типов.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет корректность входных параметров `$type` и `$id_photo`.
     *          2. Проверяет права пользователя на просмотр изображений.
     *          3. Формирует данные для вывода изображения в зависимости от типа:
     *             - `'top'`: Лучшее изображение (по рейтингу).
     *             - `'last'`: Последнее загруженное изображение.
     *             - `'cat'`: Изображение из конкретной категории по `$id_photo`.
     *             - `'rand'`: Любое случайное изображение.
     *          4. Возвращает массив данных для вывода изображения или данные по умолчанию, если изображение недоступно.
     *
     * @param string $type     Тип изображения:
     *                         - `'top'`: Лучшее изображение (по рейтингу).
     *                         - `'last'`: Последнее загруженное изображение.
     *                         - `'cat'`: Изображение из конкретной категории (требует указания `$id_photo`).
     *                         - `'rand'`: Любое случайное изображение.
     *                         По умолчанию: `'top'`.
     *                         Допустимые значения: `'top'`, `'last'`, `'cat'`, `'rand'`.
     * @param int    $id_photo Идентификатор фото. Используется только при `$type == 'cat'`.
     *                         Должен быть целым числом >= `0`.
     *                         По умолчанию: `0`.
     *
     * @return array Массив данных для вывода изображения:
     *               - `'name_block'`         (string): Название блока изображения (например, "Лучшее фото").
     *               - `'url'`                (string): URL для просмотра полного изображения.
     *               - `'thumbnail_url'`      (string): URL для миниатюры изображения.
     *               - `'name'`               (string): Название изображения.
     *               - `'description'`        (string): Описание изображения.
     *               - `'category_name'`      (string): Название категории.
     *               - `'category_description'` (string): Описание категории.
     *               - `'rate'`               (string): Рейтинг изображения (например, "Рейтинг: 5/10").
     *               - `'url_user'`           (string|null): URL профиля пользователя, добавившего изображение.
     *               - `'real_name'`          (string): Реальное имя пользователя.
     *               - `'category_url'`       (string): URL категории или пользовательского альбома.
     *               - `'width'`              (int): Ширина изображения после масштабирования.
     *               - `'height'`             (int): Высота изображения после масштабирования.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан недопустимый `$type` или `$id_photo < 0`.
     *                                  Пример сообщения:
     *                                      Некорректный идентификатор фотографии | Значение: {$id_photo}.
     * @throws RuntimeException         Выбрасывается, если файл изображения недоступен или не существует.
     * @throws Exception                Выбрасывается при записи ошибок в лог.
     *
     * @note    Если изображение недоступно, метод возвращает данные по умолчанию.
     *
     * @warning Убедитесь, что:
     *          - Пользователь имеет право на просмотр изображений.
     *          - Передаются допустимые значения для `$type` и `$id_photo`.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Получение данных для вывода лучшего изображения
     * $top_photo = $corelogic->create_photo('top');
     * print_r($top_photo);
     *
     * // Получение данных для вывода изображения из категории с ID = 5
     * $category_photo = $corelogic->create_photo('cat', 5);
     * print_r($category_photo);
     * @endcode
     */
    public function create_photo(string $type = 'top', int $id_photo = 0): array;

    /**
     * @brief   Добавляет новую оценку в таблицу и возвращает среднюю оценку фотографии.
     *
     * @details Этот метод выполняет следующие действия:
     *          1. Проверяет корректность входных параметров `$table`, `$photo_id`, `$user_id` и `$rate_value`.
     *          2. Вставляет новую оценку в указанную таблицу.
     *          3. Пересчитывает среднюю оценку для фотографии автоматически через триггеры и функции в СУБД.
     *          4. Возвращает среднюю оценку для указанной фотографии или `0`, если оценок нет.
     *
     * @param string $table      Имя таблицы для вставки оценки:
     *                           - `'rate_user'`: Таблица с оценками фотографий от пользователей.
     *                           - `'rate_moder'`: Таблица с оценками фотографий от модераторов.
     * @param int    $photo_id   ID фотографии:
     *                           - Должен быть положительным целым числом.
     * @param int    $user_id    ID пользователя:
     *                           - Должен быть положительным целым числом.
     * @param int    $rate_value Значение оценки:
     *                           - Должен быть целым числом в диапазоне допустимых значений (например, 1–5).
     *
     * @return float Возвращает число с плавающей точкой, представляющее среднюю оценку.
     *               Если оценок нет, возвращается `0`.
     *
     * @throws InvalidArgumentException Выбрасывается, если переданы некорректные параметры.
     *                                  Пример сообщения:
     *                                      Некорректное значение параметра table | Ожидалось 'rate_user' или
     *                                      'rate_moder'.
     * @throws RuntimeException         Выбрасывается, если не удалось добавить оценку.
     *                                  Пример сообщения:
     *                                      Не удалось добавить оценку для фотографии с ID: {$photo_id}.
     * @throws Exception                При выполнении запросов к базам данных.
     *
     * @note    Метод автоматически пересчитывает среднюю оценку через триггеры и функции в СУБД.
     *
     * @warning Убедитесь, что:
     *          - Параметр `$table` соответствует одной из допустимых таблиц (`'rate_user'` или `'rate_moder'`).
     *          - В СУБД настроены триггеры и функции для перерасчета средней оценки.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $corelogic = new CoreLogic();
     *
     * // Добавление оценки и получение средней оценки
     * $averageRate = $corelogic->process_rating('rate_user', 123, 456, 5);
     * echo "Средняя оценка: {$averageRate}";
     * @endcode
     */
    public function process_rating(string $table, int $photo_id, int $user_id, int $rate_value): float;
}
