<?php

/**
 * @file        include/User_Interface.php
 * @brief       Интерфейс для управления пользователями, включая регистрацию, аутентификацию, управление профилем и
 *              хранение текущих настроек пользователя.
 *
 * @author      Dark Dayver
 * @version     0.4.1-rc1
 * @date        2025-04-25
 * @namespace   Photorigma\\Interfaces
 *
 * @details     Этот файл содержит интерфейс `User_Interface`, который определяет методы для работы с пользователями:
 *              - Управление данными текущего пользователя (добавление, обновление, удаление).
 *              - Работа с группами пользователей (добавление, обновление, удаление).
 *              - Генерация CSRF-токенов для защиты форм.
 *              - Обработка прав доступа пользователей и групп.
 *              - Проверка данных для входа в систему.
 *              Все ошибки, возникающие при работе с пользователями, обрабатываются через исключения.
 *
 * @section     Основные функции
 *              - Установка объекта, реализующего интерфейс `Work_Interface` (`set_work`).
 *              - Управление свойствами пользователя и сессии (`set_property_key`, `unset_property_key`).
 *              - Генерация CSRF-токена для защиты от межсайтовой подделки запросов (`csrf_token`).
 *              - Преобразование прав пользователя в строку JSON и обратно (`encode_user_rights`,
 *              `process_user_rights`).
 *              - Добавление нового пользователя в базу данных (`add_new_user`).
 *              - Обновление данных пользователя, включая пароль, email, имя и аватар (`update_user_data`).
 *              - Обновление прав пользователя или группы через Админку (`update_user_rights`).
 *              - Удаление пользователя из системы (`delete_user`).
 *              - Добавление новой группы в систему (`add_new_group`).
 *              - Обновление данных группы (`update_group_data`).
 *              - Удаление группы из системы (`delete_group`).
 *              - Проверка данных пользователя для входа в систему (`login_user`).
 *
 * @note        Этот файл является частью системы PhotoRigma и играет ключевую роль в организации работы приложения.
 *
 * @todo        Закончить реализацию и документирование интерфейса.
 *
 * @copyright   Copyright (c) 2008-2025 Dark Dayver. Все права защищены.
 * @license     MIT License (https://opensource.org/licenses/MIT)
 *              Разрешается использовать, копировать, изменять, объединять, публиковать, распространять,
 *              сублицензировать и/или продавать копии программного обеспечения, а также разрешать лицам, которым
 *              предоставляется данное программное обеспечение, делать это при соблюдении следующих условий:
 *              - Уведомление об авторских правах и условия лицензии должны быть включены во все копии или значимые
 *              части программного обеспечения.
 */

namespace PhotoRigma\Interfaces;

use Exception;
use InvalidArgumentException;
use JsonException;
use PDOException;
use Random;
use RuntimeException;

// Предотвращение прямого вызова файла
if (!defined('IN_GALLERY') || IN_GALLERY !== true) {
    error_log(
        date('H:i:s') . " [ERROR] | " . (filter_input(
            INPUT_SERVER,
            'REMOTE_ADDR',
            FILTER_VALIDATE_IP
        ) ?: 'UNKNOWN_IP') . " | " . __FILE__ . " | Попытка прямого вызова файла"
    );
    die("HACK!");
}

/**
 * @interface User_Interface
 * @brief     Интерфейс для работы с пользователями и группами.
 *
 * @details   Этот интерфейс определяет контракт для классов, реализующих методы добавления, обновления, удаления
 *            пользователей и групп, а также входа пользователя в систему. Реализация методов должна обеспечивать
 *            взаимодействие с базой данных и обработку ошибок.
 *            Основные возможности:
 *            - Установка объекта, реализующего интерфейс `Work_Interface` (`set_work`).
 *            - Управление свойствами пользователя и сессии (`set_property_key`, `unset_property_key`).
 *            - Генерация CSRF-токена для защиты от межсайтовой подделки запросов (`csrf_token`).
 *            - Преобразование прав пользователя в строку JSON и обратно (`encode_user_rights`, `process_user_rights`).
 *            - Добавление нового пользователя в базу данных (`add_new_user`).
 *            - Обновление данных пользователя, включая пароль, email, имя и аватар (`update_user_data`).
 *            - Обновление прав пользователя или группы через Админку (`update_user_rights`).
 *            - Удаление пользователя из системы (`delete_user`).
 *            - Добавление новой группы в систему (`add_new_group`).
 *            - Обновление данных группы (`update_group_data`).
 *            - Удаление группы из системы (`delete_group`).
 *            - Проверка данных пользователя для входа в систему (`login_user`).
 *
 * @note      Используются константы с именами таблиц в базе данных.
 *
 * @warning   Класс зависит от глобального массива $_SESSION. Некорректная реализация методов может привести к ошибкам
 *            при работе с пользователями и группами.
 */
interface User_Interface
{
    /**
     * @brief   Устанавливает объект, реализующий интерфейс Work_Interface.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, что переданный объект реализует интерфейс `Work_Interface`.
     *          2. Присваивает объект для дальнейшего использования.
     *          3. Если в сессии отсутствует тема (`theme`), она инициализируется значением из конфигурации объекта,
     *             реализующего интерфейс `Work_Interface`.
     *
     * @param Work_Interface $work Объект, реализующий интерфейс `Work_Interface`:
     *                             - Должен быть экземпляром класса, реализующего интерфейс `Work_Interface`.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается, если передан некорректный объект (не реализует интерфейс
     *                                  `Work_Interface`).
     *
     * @note    Метод проверяет тип переданного объекта.
     *          Объект используется для дальнейшего взаимодействия в текущем классе.
     *
     * @warning Некорректный объект (не реализует интерфейс `Work_Interface`) вызывает исключение.
     *
     * Пример использования:
     * @code
     * // Создание объекта User
     * $user = new User();
     *
     * // Создание объекта Work
     * $work = new Work(); // Класс, реализующий Work_Interface
     *
     * // Установка объекта Work
     * $user->set_work($work);
     * @endcode
     * @see     PhotoRigma::Interfaces::Work_Interface
     *          Интерфейс, которому должен соответствовать объект.
     */
    public function set_work(Work_Interface $work): void;

    /**
     * @brief   Устанавливает значение свойства в массивах данных пользователя или сессии.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, какой массив нужно изменить, на основе параметра `$name`.
     *          2. Устанавливает значение по указанному ключу в выбранном массиве.
     *          3. Если передано недопустимое имя свойства (не 'user' и не 'session'), выбрасывается исключение.
     *
     * @param string          $name    Имя свойства:
     *                                 - Допустимые значения: 'user' (для массива данных пользователя) или 'session'
     *                                 (для массива данных сессии).
     *                                 Пример: "user".
     * @param string          $key     Ключ, по которому будет установлено значение:
     *                                 - Должен быть строкой.
     *                                 Пример: "username".
     * @param string|int|bool $value   Значение, которое будет установлено:
     *                                 - Может быть строкой, целым числом или булевым значением.
     *                                 Пример: "admin" (строка), 123 (целое число), true (булево значение).
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается, если параметр `$name` содержит недопустимое значение.
     *
     * @note    Метод изменяет массивы данных пользователя или сессии напрямую.
     *          Перед установкой значения проверяется корректность имени свойства.
     *
     * @warning Недопустимое значение параметра `$name` приведет к выбросу исключения.
     *          Убедитесь, что передаете только допустимые значения ('user' или 'session').
     *
     * Пример использования:
     * @code
     * // Установка значения в массиве данных пользователя
     * $user->set_property_key('user', 'username', 'admin');
     *
     * // Установка значения в массиве данных сессии
     * $user->set_property_key('session', 'logged_in', true);
     * @endcode
     */
    public function set_property_key(string $name, string $key, string|int|bool $value): void;

    /**
     * @brief   Удаляет ключ из указанного свойства объекта (user или session).
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, какой массив изменять, на основе параметра `$name`.
     *          2. Если ключ существует в выбранном массиве, он удаляется.
     *          3. Если указанный массив недопустим (не 'user' и не 'session'), выбрасывается исключение.
     *
     * @param string $name   Имя свойства, из которого удаляется ключ:
     *                       - Допустимые значения: 'user' (для массива данных пользователя) или 'session'
     *                       (для массива данных сессии).
     *                       Пример: "user".
     * @param string $key    Ключ, который нужно удалить:
     *                       - Должен быть строкой.
     *                       Пример: "email".
     *                       Ограничения: если ключ отсутствует в массиве, метод завершается без ошибок.
     *
     * @return void Метод ничего не возвращает.
     *
     * @throws InvalidArgumentException Выбрасывается, если указано недопустимое значение для параметра `$name`.
     *
     * @note    Метод изменяет только массивы данных пользователя ('user') или сессии ('session').
     *          Если ключ отсутствует в массиве, метод завершается без ошибок.
     *
     * @warning Не используйте этот метод для удаления ключей из других свойств.
     *          Передавайте только допустимые значения для параметра `$name`.
     *
     * Пример использования:
     * @code
     * // Удаление ключа из массива данных пользователя
     * $user->unset_property_key('user', 'email');
     *
     * // Удаление ключа из массива данных сессии
     * $user->unset_property_key('session', 'logged_in');
     * @endcode
     */
    public function unset_property_key(string $name, string $key): void;

    /**
     * @brief   Генерирует или возвращает CSRF-токен для защиты от межсайтовой подделки запросов.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, существует ли CSRF-токен в сессии.
     *          2. Если токен отсутствует, генерирует новый токен длиной 64 символа.
     *          3. Сохраняет сгенерированный токен в сессии.
     *          4. Возвращает текущий CSRF-токен (либо существующий, либо вновь сгенерированный).
     *
     * @return string CSRF-токен длиной 64 символа.
     *
     * @throws Random\RandomException Выбрасывается, если возникает ошибка при генерации случайных байтов.
     *
     * @note    Токен хранится в сессии и используется для защиты форм от CSRF-атак.
     *
     * @warning Не используйте этот метод для генерации токенов, если сессия недоступна или не инициализирована.
     *
     * Пример использования:
     * @code
     * // Генерация или получение CSRF-токена
     * $token = $user->csrf_token();
     * echo "CSRF Token: {$token}";
     * @endcode
     */
    public function csrf_token(): string;

    /**
     * @brief   Преобразует массив прав пользователя в строку JSON.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, существует ли входной массив. Если массив отсутствует или пуст, возвращается пустая
     *          строка.
     *          2. Проверяет, что входное значение является массивом. Если тип данных некорректен, выбрасывается
     *          исключение.
     *          3. Кодирует массив в строку JSON с использованием флагов:
     *             - `JSON_THROW_ON_ERROR`: Генерирует исключение при ошибках кодирования.
     *             - `JSON_UNESCAPED_UNICODE`: Сохраняет Unicode-символы без экранирования.
     *             - `JSON_UNESCAPED_SLASHES`: Не экранирует слеши (`/`).
     *          4. Возвращает строку JSON, готовую для сохранения в поле `user_rights`.
     *
     * @param array $rights Массив прав пользователя:
     *                      - Может быть ассоциативным массивом, пустым значением или `null`.
     *                      Пример: ['edit' => true, 'delete' => false].
     *                      Ограничения: значение должно быть массивом.
     *
     * @return string Строка JSON, представляющая права пользователя:
     *                - Если массив отсутствует или содержит некорректные данные, возвращается пустая строка.
     *                Пример: '{"edit":true,"delete":false}'.
     *
     * @throws InvalidArgumentException Выбрасывается, если входное значение не является массивом.
     * @throws JsonException Выбрасывается, если возникает ошибка при кодировании массива в JSON.
     *
     * @note    Метод возвращает пустую строку, если массив прав отсутствует или содержит некорректные данные.
     *          Если кодирование JSON завершается успешно, возвращается строка JSON.
     *
     * @warning Входные данные должны быть корректным массивом. Некорректные данные могут привести к выбросу
     *          исключения.
     *
     * Пример использования:
     * @code
     * // Преобразование массива прав в JSON
     * $json = $user->encode_user_rights(['edit' => true, 'delete' => false]);
     * echo "JSON-строка: $json"; // Выведет: {"edit":true,"delete":false}
     *
     * // Обработка пустого массива
     * $json = $user->encode_user_rights([]);
     * echo "JSON-строка: $json"; // Выведет: {}
     * @endcode
     */
    public function encode_user_rights(array $rights): string;

    /**
     * @brief   Обрабатывает поле `user_rights`, преобразуя его из строки JSON в массив прав.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, существует ли поле `user_rights`. Если поле отсутствует или пустое, возвращается пустой
     *          массив.
     *          2. Проверяет, что поле является строкой. Если тип данных некорректен, выбрасывается исключение.
     *          3. Декодирует строку JSON в ассоциативный массив с использованием флагов:
     *             - `JSON_THROW_ON_ERROR`: Генерирует исключение при ошибках декодирования.
     *          4. Возвращает массив прав, готовый для использования.
     *
     * @param string $user_rights Значение поля `user_rights`:
     *                            - Может быть строкой JSON, пустым значением или `null`.
     *                            Пример: '{"edit": 1, "delete": 0}'.
     *                            Ограничения: значение должно быть строкой, содержащей валидный JSON.
     *
     * @return array Ассоциативный массив прав пользователя:
     *               - Если поле `user_rights` отсутствует или содержит некорректные данные, возвращается пустой
     *               массив.
     *               Пример: ['edit' => 1, 'delete' => 0].
     *
     * @throws InvalidArgumentException Выбрасывается, если поле `user_rights` не является строкой.
     * @throws JsonException Выбрасывается, если поле `user_rights` содержит невалидный JSON.
     *
     * @note    Метод возвращает пустой массив, если поле `user_rights` отсутствует или содержит некорректные данные.
     *          Если декодирование JSON завершается успешно, возвращается ассоциативный массив прав.
     *
     * @warning Поле `user_rights` должно содержать валидный JSON. Невалидные данные могут привести к выбросу
     *          исключения.
     *
     * Пример использования:
     * @code
     * // Обработка валидного JSON
     * $rights = $user->process_user_rights('{"edit": 1, "delete": 0}');
     * print_r($rights); // Выведет: ['edit' => 1, 'delete' => 0]
     *
     * // Обработка пустого значения
     * $rights = $user->process_user_rights('');
     * print_r($rights); // Выведет: []
     * @endcode
     */
    public function process_user_rights(string $user_rights): array;

    /**
     * @brief   Добавляет нового пользователя в базу данных, выполняя валидацию входных данных.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность входных данных:
     *             - Логин проверяется на соответствие регулярному выражению.
     *             - Пароль проверяется на пустоту и совпадение с повторным паролем.
     *             - Email проверяется на соответствие регулярному выражению.
     *             - Реальное имя проверяется на соответствие регулярному выражению.
     *             - CAPTCHA проверяется на числовое значение и совпадение с хешем из сессии.
     *             Если данные некорректны, ошибки сохраняются в сессии.
     *          2. Проверяет уникальность логина, email и реального имени в базе данных.
     *          3. Если возникли ошибки, метод завершает выполнение и возвращает `0`.
     *          4. При успешной валидации добавляет нового пользователя в базу данных, назначая ему группу по
     *          умолчанию.
     *             - Пароль хэшируется с использованием `password_hash()`.
     *          5. Возвращает ID нового пользователя или `0` в случае ошибки.
     *
     * @param array $post_data Массив данных из формы ($_POST), содержащий новые значения для полей пользователя:
     *                         - string $login: Логин пользователя (должен соответствовать регулярному выражению).
     *                         - string $password: Пароль пользователя (не должен быть пустым).
     *                         - string $re_password: Повтор пароля (должен совпадать с $password).
     *                         - string $email: Email пользователя (должен соответствовать регулярному выражению).
     *                         - string $real_name: Реальное имя пользователя (должно соответствовать регулярному
     *                         выражению).
     *                         - string $captcha: Значение CAPTCHA (должно быть числом).
     *                         Все поля обязательны для заполнения.
     *
     * @return int ID нового пользователя, если регистрация успешна, или `0` в случае ошибки.
     *
     * @throws RuntimeException Выбрасывается, если группа по умолчанию не найдена в базе данных.
     * @throws PDOException Выбрасывается, если возникает ошибка при работе с базой данных.
     * @throws Exception Выбрасывается, если возникает ошибка при проверке входных данных.
     *
     * @note    Используется CAPTCHA для защиты от автоматической регистрации.
     *          Константы, используемые в методе:
     *          - Регулярное выражение для проверки логина.
     *          - Регулярное выражение для проверки email.
     *          - Регулярное выражение для проверки реального имени.
     *          Эти константы позволяют гибко настраивать поведение метода.
     *
     * @warning Метод зависит от корректной конфигурации базы данных и таблицы групп. Убедитесь, что все необходимые
     *          константы и таблицы настроены правильно. Невалидные данные могут привести к ошибкам.
     *
     * Пример использования:
     * @code
     * // Внутри класса User
     * $userId = $user->add_new_user($_POST);
     * if ($userId > 0) {
     *     echo "Пользователь успешно зарегистрирован! ID: {$userId}";
     * } else {
     *     echo "Ошибка регистрации.";
     * }
     * @endcode
     */
    public function add_new_user(array $post_data): int;

    /**
     * @brief   Обновляет данные существующего пользователя, включая пароль, email, имя и аватар.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет существование пользователя с указанным `$user_id` в базе данных. Если пользователь не
     *          найден, выбрасывается исключение.
     *          2. Валидирует и обновляет пароль:
     *             - Проверяет текущий пароль через `password_verify()`.
     *             - Если новый пароль передан и совпадает с повторным вводом, обновляет его через `password_hash()`.
     *          3. Проверяет уникальность email и имени пользователя в базе данных.
     *          4. Обрабатывает загрузку нового аватара:
     *             - Если файл проходит валидацию, загружает новый аватар.
     *             - Удаляет старый аватар, если он отличается от нового и не является аватаром по умолчанию.
     *          5. Проверяет и обновляет язык (`language`) и тему (`theme`) сайта, если они переданы.
     *          6. Формирует SQL-запрос для обновления данных пользователя в таблице пользователей.
     *          7. Возвращает количество затронутых строк в базе данных после выполнения обновления.
     *
     * @param int   $user_id    Идентификатор пользователя, данные которого необходимо обновить:
     *                          - Должен быть положительным целым числом и существовать в базе данных.
     *                          Пример: 1.
     *                          Ограничения: ID должен быть больше 0.
     * @param array $post_data  Массив данных из формы ($_POST), содержащий новые значения для полей пользователя:
     *                          - string $password: Текущий пароль пользователя (обязательно для изменения пароля).
     *                          - string $edit_password: Новый пароль пользователя (необязательно).
     *                          - string $re_password: Повторный ввод нового пароля (должен совпадать с
     *                          `edit_password`).
     *                          - string $email: Новый email пользователя (должен соответствовать регулярному
     *                          выражению).
     *                          - string $real_name: Новое имя пользователя (должно быть строкой).
     *                          Все поля проходят валидацию перед использованием.
     * @param array $files_data Массив данных загруженного файла ($_FILES), содержащий информацию об аватаре:
     *                          - 'file_avatar' (array): Информация о загруженном файле (необязательно).
     *                          Если файл не передан или не проходит валидацию, аватар остаётся без изменений.
     * @param int   $max_size   Максимальный размер файла для аватара в байтах:
     *                          - Должен быть положительным целым числом.
     *                          Пример: 5 * 1024 * 1024 (5 MB).
     *                          Ограничения: значение должно быть больше 0.
     *
     * @return int Количество затронутых строк в базе данных после выполнения обновления:
     *             - Возвращается `0`, если данные не изменились или запрос завершился ошибкой.
     *
     * @throws RuntimeException Выбрасывается, если пользователь с указанным `$user_id` не найден в базе данных.
     * @throws Exception Выбрасывается, если возникает ошибка при проверке входных данных или обработке аватара.
     *
     * @note    Для обработки аватаров используется метод загрузки файлов. Старый аватар удаляется, если новый успешно
     *          загружен и отличается от старого. Константы, используемые в методе:
     *          - Регулярное выражение для проверки email.
     *          Эти константы позволяют гибко настраивать поведение метода.
     *
     * @warning Не используйте этот метод для массового обновления данных. Он предназначен только для работы с одним
     *          пользователем за раз.
     *
     * Пример использования:
     * @code
     * // Обновление данных пользователя
     * $userId = 1;
     * $maxSize = 5 * 1024 * 1024; // 5 MB
     * $affectedRows = $user->update_user_data($userId, $_POST, $_FILES, $maxSize);
     * if ($affectedRows > 0) {
     *     echo "Данные успешно обновлены!";
     * } else {
     *     echo "Ошибка при обновлении данных.";
     * }
     * @endcode
     */
    public function update_user_data(int $user_id, array $post_data, array $files_data, int $max_size): int;

    /**
     * @brief   Обновляет права пользователя или группу через Админку.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет, изменилась ли группа пользователя в `$post_data`. Если группа изменилась:
     *             - Получает данные новой группы из базы данных.
     *             - Обновляет ID группы пользователя и связанные права доступа.
     *             - Декодирует обновленные права доступа пользователя в массив.
     *          2. Если группа не изменилась:
     *             - Проверяет, отличаются ли текущие права пользователя от переданных в `$post_data`.
     *             - Нормализует значения прав доступа (true/false).
     *             - Кодирует обновленные права доступа в JSON-строку.
     *             - Обновляет права доступа пользователя в базе данных.
     *          3. Возвращает обновленные данные пользователя, включая все поля прав доступа и ID группы.
     *
     * @param int   $user_id   Идентификатор пользователя:
     *                         - Должен быть положительным целым числом.
     *                         Пример: 123.
     *                         Ограничения: ID должен быть больше 0.
     * @param array $user_data Данные пользователя:
     *                         - Должен содержать ключ `group_id` (ID текущей группы пользователя).
     *                         - Также должен содержать все поля прав доступа.
     *                         Пример: ['group_id' => 2, 'edit' => true, 'delete' => false].
     * @param array $post_data Данные, полученные из POST-запроса:
     *                         - Должен содержать ключ `group` (ID новой группы пользователя).
     *                         - Также должен содержать все поля прав доступа.
     *                         Пример: ['group' => 3, 'edit' => 'on', 'delete' => false].
     *
     * @return array Возвращает массив данных пользователя:
     *               - `group_id`: ID группы пользователя.
     *               - Все поля прав доступа.
     *               Пример: ['group_id' => 3, 'edit' => true, 'delete' => false].
     *
     * @throws RuntimeException Выбрасывается, если:
     *                                  - Не удалось получить данные группы из базы данных.
     *                                  - Произошла ошибка при обновлении данных пользователя в базе данных.
     * @throws JsonException Выбрасывается, если возникает ошибка при кодировании или декодировании JSON.
     * @throws Exception Выбрасывается, если возникает ошибка при проверке входных данных.
     *
     * @note    Метод использует нормализацию значений прав доступа (true/false) и их последующее кодирование в
     *          JSON-строку. Константы, используемые в методе:
     *          - Регулярное выражение для проверки email.
     *          Эти константы позволяют гибко настраивать поведение метода.
     *
     * @warning Убедитесь, что входные данные корректны. Невалидные данные могут привести к исключениям.
     *
     * Пример использования:
     * @code
     * // Обновление прав пользователя
     * $userId = 123;
     * $userData = [
     *     'group_id' => 2,
     *     'edit'     => true,
     *     'delete'   => false,
     * ];
     * $postData = [
     *     'group'  => 3,
     *     'edit'   => 'on',
     *     'delete' => false,
     * ];
     * $result = $user->update_user_rights($userId, $userData, $postData);
     * print_r($result);
     * @endcode
     */
    public function update_user_rights(int $user_id, array $user_data, array $post_data): array;

    /**
     * @brief   Удаляет пользователя через Админку.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность входных данных:
     *             - Идентификатор пользователя должен быть положительным целым числом.
     *          2. Удаляет все данные пользователя, включая файл аватара.
     *          3. Обрабатывает связанные данные пользователя (например, категории и фотографии) в зависимости от
     *          логики
     *             реализации.
     *          4. Возвращает результат операции удаления.
     *
     * @param int $user_id Идентификатор пользователя:
     *                     - Должен быть положительным целым числом.
     *                     Пример: 123.
     *                     Ограничения: ID должен быть больше 0.
     *
     * @return bool Возвращает:
     *              - `true`, если пользователь успешно удален.
     *              - `false`, если удаление не выполнено.
     *
     * @throws InvalidArgumentException Выбрасывается, если входные данные некорректны (например, отрицательный ID).
     *
     * @note    Метод должен быть реализован с учетом всех зависимых данных пользователя (например, файлы аватаров,
     *          категории, фотографии). Способ обработки этих данных определяется в реализации.
     *
     * @warning Убедитесь, что входные данные корректны перед вызовом метода. Невалидные данные могут привести к
     *          исключениям.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $user = new User();
     *
     * // Удаление пользователя
     * $result = $user->delete_user(123);
     * if ($result) {
     *     echo "Пользователь успешно удален!";
     * } else {
     *     echo "Не удалось удалить пользователя.";
     * }
     * @endcode
     */
    public function delete_user(int $user_id): bool;

    /**
     * @brief   Добавляет новую группу в систему через Админку.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность входных данных:
     *             - Имя группы должно быть строкой и соответствовать требованиям (например, регулярному выражению).
     *             - Права группы должны быть переданы в виде JSON-строки.
     *          2. Создает новую группу в базе данных, сохраняя её имя и права.
     *          3. Возвращает ID созданной группы.
     *
     * @param array $group_data   Данные новой группы:
     *                            - `name` (string): Имя группы.
     *                            Пример: "Moderators".
     *                            Ограничения: имя должно быть непустой строкой.
     *                            - `user_rights` (string): JSON-строка с правами группы.
     *                            Пример: '{"read": true, "write": true}'.
     *                            Ограничения: строка должна быть валидным JSON.
     *
     * @return int Возвращает ID созданной группы.
     *
     * @throws InvalidArgumentException Выбрасывается, если входные данные некорректны:
     *                                  - Если имя группы отсутствует или пустое.
     *                                  - Если права группы не являются валидной JSON-строкой.
     *
     * @note    Метод должен быть реализован с учетом всех зависимых данных группы (например, права доступа). Способ
     *          обработки этих данных определяется в реализации.
     *
     * @warning Убедитесь, что входные данные корректны перед вызовом метода. Невалидные данные могут привести к
     *          исключениям.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $user = new User();
     *
     * // Добавление новой группы
     * $groupId = $user->add_new_group([
     *     'name' => 'Moderators',
     *     'user_rights' => '{"read": true, "write": true}'
     * ]);
     * echo "Новая группа создана с ID: $groupId";
     * @endcode
     */
    public function add_new_group(array $group_data): int;

    /**
     * @brief   Обновляет данные группы в системе через Админку.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет и обновляет название группы, если оно изменилось в `$post_data`.
     *             - Очищает новое название для безопасности.
     *             - Обновляет поле `name` в таблице групп через SQL-запрос.
     *          2. Обновляет права доступа группы:
     *             - Проверяет каждое поле прав доступа.
     *             - Нормализует значения прав доступа (true/false).
     *             - Кодирует обновленные права доступа в JSON-строку.
     *          3. Обновляет поле `user_rights` в таблице групп через SQL-запрос.
     *          4. Возвращает обновленные данные группы, включая название и все поля прав доступа.
     *
     * @param array $group_data     Данные группы:
     *                              - Должен содержать ключи:
     *                              - `name`: Текущее название группы.
     *                              - `user_rights`: JSON-строка с текущими правами группы.
     *                              Может также содержать поля прав доступа.
     *                              Пример: [
     *                              'name' => 'Moderators',
     *                              'user_rights' => '{"edit": true, "delete": false}',
     *                              ].
     * @param array $post_data      Данные, полученные из POST-запроса:
     *                              - Должен содержать ключ:
     *                              - `id_group`: ID группы.
     *                              Может также содержать ключ:
     *                              - `name_group`: Новое название группы.
     *                              И поля прав доступа.
     *                              Пример: [
     *                              'id_group' => 2,
     *                              'name_group' => 'Editors',
     *                              'edit' => 'on',
     *                              'delete' => false,
     *                              ].
     *
     * @return array Возвращает массив данных группы:
     *               - `name`: Название группы.
     *               - Все поля прав доступа.
     *               Пример: [
     *                   'name' => 'Editors',
     *                   'edit' => true,
     *                   'delete' => false,
     *               ].
     *
     * @throws RuntimeException Выбрасывается, если произошла ошибка при обновлении данных в базе данных.
     * @throws JsonException Выбрасывается, если возникает ошибка при кодировании или декодировании JSON.
     * @throws Exception Выбрасывается, если возникает ошибка при проверке входных данных.
     *
     * @note    Метод использует нормализацию значений прав доступа (true/false) и их последующее кодирование в
     *          JSON-строку. Константы, используемые в методе:
     *          - Регулярное выражение для проверки названия группы.
     *          Эти константы позволяют гибко настраивать поведение метода.
     *
     * @warning Убедитесь, что входные данные корректны. Невалидные данные могут привести к исключениям.
     *
     * Пример использования:
     * @code
     * // Обновление данных группы
     * $group_data = [
     *     'name'        => 'Moderators',
     *     'user_rights' => '{"edit": true, "delete": false}',
     * ];
     * $post_data = [
     *     'id_group'    => 2,
     *     'name_group'  => 'Editors',
     *     'edit'        => 'on',
     *     'delete'      => false,
     * ];
     * $result = $user->update_group_data($group_data, $post_data);
     * print_r($result);
     * @endcode
     */
    public function update_group_data(array $group_data, array $post_data): array;

    /**
     * @brief   Удаляет группу из системы через Админку.
     *
     * @details Этот метод является частью контракта интерфейса и должен быть реализован в классе.
     *          Он выполняет следующие действия:
     *          1. Проверяет корректность входных данных:
     *             - Идентификатор группы должен быть положительным целым числом.
     *             - Удаление запрещено для групп с ID: 0 (Гость), 1 (Пользователь), 2 (Модератор), 3 (Администратор).
     *          2. Удаляет группу по её идентификатору, если удаление разрешено.
     *          3. Возвращает результат операции:
     *             - `true`, если группа успешно удалена.
     *             - `false`, если удаление не выполнено (например, для запрещенных ID).
     *
     * @param int $group_id Идентификатор группы:
     *                      - Должен быть положительным целым числом.
     *                      Пример: 123.
     *                      Ограничения: удаление запрещено для групп с ID: 0, 1, 2, 3.
     *
     * @return bool Возвращает:
     *              - `true`, если группа успешно удалена.
     *              - `false`, если удаление не выполнено (например, для запрещенных ID).
     *
     * @throws InvalidArgumentException Выбрасывается, если входные данные некорректны (например, отрицательный ID).
     *
     * @note    Метод должен быть реализован с учетом ограничений на удаление системных групп (ID: 0, 1, 2, 3). Эти
     *          группы являются критически важными для работы системы и не должны удаляться.
     *
     * @warning Убедитесь, что входные данные корректны перед вызовом метода. Невалидные данные могут привести к
     *          исключениям.
     *
     * Пример использования:
     * @code
     * // Создание объекта
     * $user = new User();
     *
     * // Удаление группы
     * $result = $user->delete_group(123);
     * if ($result) {
     *     echo "Группа успешно удалена.";
     * } else {
     *     echo "Удаление группы запрещено или произошла ошибка.";
     * }
     * @endcode
     */
    public function delete_group(int $group_id): bool;

    /**
     * @brief   Проверяет данные пользователя для входа в систему с "мягким" обновлением паролей на новый формат
     *          хранения.
     *
     * @details Этот метод выполняет следующие действия:
     *          - Проверяет корректность входных данных (логин и пароль) с использованием `Work::check_input()`.
     *          - Ищет пользователя в базе данных по логину.
     *          - Проверяет пароль через `password_verify()` и, при необходимости, через `md5`.
     *          - Если пароль хранится в старом формате (md5), он обновляется до формата `password_hash()`.
     *          - Возвращает ID пользователя или 0 в случае ошибки.
     *
     * @callgraph
     *
     * @param array  $post         Массив данных из формы ($_POST), содержащий ключи:
     *                             - string $login: Логин пользователя (должен соответствовать регулярному выражению
     *                             REG_LOGIN).
     *                             - string $password: Пароль пользователя (не должен быть пустым).
     * @param string $redirect_url URL для перенаправления пользователя в случае возникновения ошибок.
     *
     * @return int ID пользователя, если авторизация успешна, или 0 в случае ошибки.
     *
     * @note    Поддерживается совместимость со старым форматом хранения паролей (md5).
     *
     * @warning Метод зависит от корректной конфигурации базы данных.
     *
     * Пример использования метода:
     * @code
     * $user = new \PhotoRigma\Classes\User();
     * $redirectUrl = '/login/error';
     * $userId = $user->login_user($_POST, $redirectUrl);
     * if ($userId > 0) {
     *     echo "Вход выполнен успешно! ID пользователя: {$userId}";
     * } else {
     *     echo "Ошибка входа.";
     * }
     * @endcode
     * @see     PhotoRigma::Classes::Work::check_input() Метод для проверки правильности входных данных.
     * @see     PhotoRigma::Include::log_in_file() Функция логирования событий.
     *
     * @see     PhotoRigma::Classes::User::login_user Метод реализации в классе User.
     */
    public function login_user(array $post, string $redirect_url): int;
}
